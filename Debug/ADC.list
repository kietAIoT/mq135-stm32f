
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007178  08007178  00017178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007608  08007608  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007608  08007608  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007608  08007608  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007610  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e8  080077f8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080077f8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006d61  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d81  00000000  00000000  00026fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00028d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000557  00000000  00000000  00029480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186ca  00000000  00000000  000299d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cef  00000000  00000000  000420a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000873e1  00000000  00000000  0004bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f78  00000000  00000000  000d3174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d60ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800715c 	.word	0x0800715c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800715c 	.word	0x0800715c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001128:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001134:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001138:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800113c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001144:	e000      	b.n	8001148 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001146:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001148:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f9      	beq.n	8001146 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001152:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc_value = 0;
int _write(int file, char *ptr, int len)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e009      	b.n	800118e <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	60ba      	str	r2, [r7, #8]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ffca 	bl	800111c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	dbf1      	blt.n	800117a <_write+0x12>
	}
	return len;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f000 fae9 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f835 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//xin cahas
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 f8eb 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b2:	f000 f8cb 	bl	800134c <MX_DMA_Init>
  MX_ADC1_Init();
 80011b6:	f000 f88b 	bl	80012d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Arc begin\n");
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <main+0x5c>)
 80011bc:	f003 f93a 	bl	8004434 <puts>

//  HAL_ADCEx_Calibration_Start(&hadc1);
//  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_value,1);
  struct MQ135 mq135;
//  printf("Begin");
  Init(&mq135, &hadc1, &hdma_adc1, -1, -1);
 80011c0:	4638      	mov	r0, r7
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <main+0x60>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <main+0x60>)
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <main+0x64>)
 80011ca:	490f      	ldr	r1, [pc, #60]	; (8001208 <main+0x68>)
 80011cc:	f002 f9d6 	bl	800357c <Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Value of add is %lu and ppm is %d\n",mq135.adc_value, (int)getCorrectedPPM(&mq135, 30.5, 90.0));
 80011d0:	693c      	ldr	r4, [r7, #16]
 80011d2:	463b      	mov	r3, r7
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <main+0x6c>)
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <main+0x70>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fb71 	bl	80038c0 <getCorrectedPPM>
 80011de:	4603      	mov	r3, r0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff75 	bl	80010d0 <__aeabi_f2iz>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4621      	mov	r1, r4
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <main+0x74>)
 80011ee:	f003 f8bb 	bl	8004368 <iprintf>
	  HAL_Delay(500);
 80011f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f6:	f000 fb23 	bl	8001840 <HAL_Delay>
	  printf("Value of add is %lu and ppm is %d\n",mq135.adc_value, (int)getCorrectedPPM(&mq135, 30.5, 90.0));
 80011fa:	e7e9      	b.n	80011d0 <main+0x30>
 80011fc:	08007178 	.word	0x08007178
 8001200:	bf800000 	.word	0xbf800000
 8001204:	20000234 	.word	0x20000234
 8001208:	20000204 	.word	0x20000204
 800120c:	42b40000 	.word	0x42b40000
 8001210:	41f40000 	.word	0x41f40000
 8001214:	08007184 	.word	0x08007184

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f9e4 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001248:	2301      	movs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001256:	2301      	movs	r3, #1
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001264:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001268:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fc1c 	bl	8002aac <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800127a:	f000 f8dd 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2102      	movs	r1, #2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fe88 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012a6:	f000 f8c7 	bl	8001438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012aa:	2302      	movs	r3, #2
 80012ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fff4 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012c2:	f000 f8b9 	bl	8001438 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	; 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_ADC1_Init+0x74>)
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <MX_ADC1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_ADC1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_ADC1_Init+0x74>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_ADC1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_ADC1_Init+0x74>)
 80012fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_ADC1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_ADC1_Init+0x74>)
 8001308:	2201      	movs	r2, #1
 800130a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_ADC1_Init+0x74>)
 800130e:	f000 fabb 	bl	8001888 <HAL_ADC_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001318:	f000 f88e 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001320:	2301      	movs	r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001324:	2306      	movs	r3, #6
 8001326:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_ADC1_Init+0x74>)
 800132e:	f000 fc7d 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001338:	f000 f87e 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000204 	.word	0x20000204
 8001348:	40012400 	.word	0x40012400

0800134c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_DMA_Init+0x38>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <MX_DMA_Init+0x38>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_DMA_Init+0x38>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	200b      	movs	r0, #11
 8001370:	f000 ffdb 	bl	800232a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001374:	200b      	movs	r0, #11
 8001376:	f000 fff4 	bl	8002362 <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_GPIO_Init+0xa8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_GPIO_Init+0xa8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_GPIO_Init+0xac>)
 8001404:	f001 fb3a 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2302      	movs	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_GPIO_Init+0xac>)
 8001422:	f001 f9a7 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40011000 	.word	0x40011000

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_MspInit+0x5c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_MspInit+0x5c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_MspInit+0x5c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_MspInit+0x5c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_MspInit+0x5c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_MspInit+0x5c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_MspInit+0x60>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_MspInit+0x60>)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000

080014a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_ADC_MspInit+0xbc>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d149      	bne.n	800155c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_ADC_MspInit+0xc0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <HAL_ADC_MspInit+0xc0>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_ADC_MspInit+0xc0>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_ADC_MspInit+0xc0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <HAL_ADC_MspInit+0xc0>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_ADC_MspInit+0xc0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fc:	2303      	movs	r3, #3
 80014fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <HAL_ADC_MspInit+0xc4>)
 8001508:	f001 f934 	bl	8002774 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_ADC_MspInit+0xcc>)
 8001510:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001536:	2220      	movs	r2, #32
 8001538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001542:	f000 ff29 	bl	8002398 <HAL_DMA_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800154c:	f7ff ff74 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001554:	621a      	str	r2, [r3, #32]
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_ADC_MspInit+0xc8>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40012400 	.word	0x40012400
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800
 8001570:	20000234 	.word	0x20000234
 8001574:	40020008 	.word	0x40020008

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015be:	f000 f923 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DMA1_Channel1_IRQHandler+0x10>)
 80015ce:	f000 ff9d 	bl	800250c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000234 	.word	0x20000234

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <_kill>:

int _kill(int pid, int sig)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f4:	f003 f850 	bl	8004698 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2216      	movs	r2, #22
 80015fc:	601a      	str	r2, [r3, #0]
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_exit>:

void _exit (int status)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001612:	f04f 31ff 	mov.w	r1, #4294967295
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffe7 	bl	80015ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800161c:	e7fe      	b.n	800161c <_exit+0x12>

0800161e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e00a      	b.n	8001646 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001630:	f3af 8000 	nop.w
 8001634:	4601      	mov	r1, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	60ba      	str	r2, [r7, #8]
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbf0      	blt.n	8001630 <_read+0x12>
  }

  return len;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <_isatty>:

int _isatty(int file)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f002 ffd6 	bl	8004698 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20005000 	.word	0x20005000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000278 	.word	0x20000278
 8001720:	200003d0 	.word	0x200003d0

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff fff8 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001736:	490c      	ldr	r1, [pc, #48]	; (8001768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001738:	4a0c      	ldr	r2, [pc, #48]	; (800176c <LoopFillZerobss+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800174c:	4c09      	ldr	r4, [pc, #36]	; (8001774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f002 ffa3 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175e:	f7ff fd1f 	bl	80011a0 <main>
  bx lr
 8001762:	4770      	bx	lr
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800176c:	08007610 	.word	0x08007610
  ldr r2, =_sbss
 8001770:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001774:	200003cc 	.word	0x200003cc

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x28>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 fdc1 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f000 f808 	bl	80017a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fe54 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x54>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x58>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fdd9 	bl	800237e <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f000 fda1 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_InitTick+0x5c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000008 	.word	0x20000008
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x1c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x20>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_IncTick+0x20>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000008 	.word	0x20000008
 8001828:	2000027c 	.word	0x2000027c

0800182c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <HAL_GetTick+0x10>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	2000027c 	.word	0x2000027c

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff fff0 	bl	800182c <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffe0 	bl	800182c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0be      	b.n	8001a28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fdee 	bl	80014a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 faff 	bl	8001ed0 <ADC_ConversionStop_Disable>
 80018d2:	4603      	mov	r3, r0
 80018d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 8099 	bne.w	8001a16 <HAL_ADC_Init+0x18e>
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 8095 	bne.w	8001a16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f4:	f023 0302 	bic.w	r3, r3, #2
 80018f8:	f043 0202 	orr.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001908:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7b1b      	ldrb	r3, [r3, #12]
 800190e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001910:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	4313      	orrs	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001920:	d003      	beq.n	800192a <HAL_ADC_Init+0xa2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_ADC_Init+0xa8>
 800192a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192e:	e000      	b.n	8001932 <HAL_ADC_Init+0xaa>
 8001930:	2300      	movs	r3, #0
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7d1b      	ldrb	r3, [r3, #20]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d119      	bne.n	8001974 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7b1b      	ldrb	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	3b01      	subs	r3, #1
 800194e:	035a      	lsls	r2, r3, #13
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e00b      	b.n	8001974 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_ADC_Init+0x1a8>)
 8001990:	4013      	ands	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	430b      	orrs	r3, r1
 800199a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	d003      	beq.n	80019ae <HAL_ADC_Init+0x126>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d104      	bne.n	80019b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	051b      	lsls	r3, r3, #20
 80019b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_ADC_Init+0x1ac>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10b      	bne.n	80019f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f2:	e018      	b.n	8001a26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f023 0312 	bic.w	r3, r3, #18
 80019fc:	f043 0210 	orr.w	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a14:	e007      	b.n	8001a26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	ffe1f7fd 	.word	0xffe1f7fd
 8001a34:	ff1f0efe 	.word	0xff1f0efe

08001a38 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a64      	ldr	r2, [pc, #400]	; (8001be0 <HAL_ADC_Start_DMA+0x1a8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d004      	beq.n	8001a5c <HAL_ADC_Start_DMA+0x24>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a63      	ldr	r2, [pc, #396]	; (8001be4 <HAL_ADC_Start_DMA+0x1ac>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_Start_DMA+0x32>
 8001a5c:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_ADC_Start_DMA+0x1a8>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 80b3 	bne.w	8001bd0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_Start_DMA+0x40>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e0ae      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x19e>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f9cb 	bl	8001e1c <ADC_Enable>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f040 809a 	bne.w	8001bc6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a4e      	ldr	r2, [pc, #312]	; (8001be4 <HAL_ADC_Start_DMA+0x1ac>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_Start_DMA+0x84>
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_ADC_Start_DMA+0x1a8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d115      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d026      	beq.n	8001b24 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ade:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae6:	e01d      	b.n	8001b24 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a39      	ldr	r2, [pc, #228]	; (8001be0 <HAL_ADC_Start_DMA+0x1a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_Start_DMA+0xd0>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a38      	ldr	r2, [pc, #224]	; (8001be4 <HAL_ADC_Start_DMA+0x1ac>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10d      	bne.n	8001b24 <HAL_ADC_Start_DMA+0xec>
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_ADC_Start_DMA+0x1a8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f023 0206 	bic.w	r2, r3, #6
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <HAL_ADC_Start_DMA+0x1b0>)
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a24      	ldr	r2, [pc, #144]	; (8001bec <HAL_ADC_Start_DMA+0x1b4>)
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <HAL_ADC_Start_DMA+0x1b8>)
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0202 	mvn.w	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b7c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a18      	ldr	r0, [r3, #32]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	334c      	adds	r3, #76	; 0x4c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f000 fc5d 	bl	800244c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b9c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ba0:	d108      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bb0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bc2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bc4:	e006      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001bce:	e001      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40012400 	.word	0x40012400
 8001be4:	40012800 	.word	0x40012800
 8001be8:	08001f53 	.word	0x08001f53
 8001bec:	08001fcf 	.word	0x08001fcf
 8001bf0:	08001feb 	.word	0x08001feb

08001bf4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x20>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e0dc      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x1da>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d81c      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b05      	subs	r3, #5
 8001c6e:	221f      	movs	r2, #31
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4019      	ands	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b05      	subs	r3, #5
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34
 8001c94:	e03c      	b.n	8001d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d81c      	bhi.n	8001cd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b23      	subs	r3, #35	; 0x23
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	4019      	ands	r1, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b23      	subs	r3, #35	; 0x23
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd6:	e01b      	b.n	8001d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b41      	subs	r3, #65	; 0x41
 8001cea:	221f      	movs	r2, #31
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3b41      	subs	r3, #65	; 0x41
 8001d04:	fa00 f203 	lsl.w	r2, r0, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	d91c      	bls.n	8001d52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68d9      	ldr	r1, [r3, #12]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4019      	ands	r1, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6898      	ldr	r0, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	3b1e      	subs	r3, #30
 8001d44:	fa00 f203 	lsl.w	r2, r0, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	e019      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4019      	ands	r1, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6898      	ldr	r0, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d003      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d92:	2b11      	cmp	r3, #17
 8001d94:	d132      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d125      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d126      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d11a      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9a      	lsrs	r2, r3, #18
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x1b2>
 8001dea:	e007      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40012400 	.word	0x40012400
 8001e14:	20000000 	.word	0x20000000
 8001e18:	431bde83 	.word	0x431bde83

08001e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d040      	beq.n	8001ebc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <ADC_Enable+0xac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <ADC_Enable+0xb0>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e58:	e002      	b.n	8001e60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e66:	f7ff fce1 	bl	800182c <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e6c:	e01f      	b.n	8001eae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e6e:	f7ff fcdd 	bl	800182c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d918      	bls.n	8001eae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d011      	beq.n	8001eae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e007      	b.n	8001ebe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d1d8      	bne.n	8001e6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d12e      	bne.n	8001f48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001efa:	f7ff fc97 	bl	800182c <HAL_GetTick>
 8001efe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f00:	e01b      	b.n	8001f3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f02:	f7ff fc93 	bl	800182c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d914      	bls.n	8001f3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10d      	bne.n	8001f3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e007      	b.n	8001f4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d0dc      	beq.n	8001f02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d127      	bne.n	8001fbc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f86:	d115      	bne.n	8001fb4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d111      	bne.n	8001fb4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fe1d 	bl	8001bf4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fba:	e004      	b.n	8001fc6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff fe12 	bl	8001c06 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fe01 	bl	8001c18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADCEx_Calibration_Start+0x1e>
 800203a:	2302      	movs	r3, #2
 800203c:	e097      	b.n	800216e <HAL_ADCEx_Calibration_Start+0x14e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ff42 	bl	8001ed0 <ADC_ConversionStop_Disable>
 800204c:	4603      	mov	r3, r0
 800204e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fee3 	bl	8001e1c <ADC_Enable>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8081 	bne.w	8002164 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002076:	4b40      	ldr	r3, [pc, #256]	; (8002178 <HAL_ADCEx_Calibration_Start+0x158>)
 8002078:	681c      	ldr	r4, [r3, #0]
 800207a:	2002      	movs	r0, #2
 800207c:	f001 f9c8 	bl	8003410 <HAL_RCCEx_GetPeriphCLKFreq>
 8002080:	4603      	mov	r3, r0
 8002082:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002086:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002088:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800208a:	e002      	b.n	8002092 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3b01      	subs	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f9      	bne.n	800208c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020a8:	f7ff fbc0 	bl	800182c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020ae:	e01b      	b.n	80020e8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020b0:	f7ff fbbc 	bl	800182c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b0a      	cmp	r3, #10
 80020bc:	d914      	bls.n	80020e8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f023 0312 	bic.w	r3, r3, #18
 80020d4:	f043 0210 	orr.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e042      	b.n	800216e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1dc      	bne.n	80020b0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0204 	orr.w	r2, r2, #4
 8002104:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002106:	f7ff fb91 	bl	800182c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800210c:	e01b      	b.n	8002146 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800210e:	f7ff fb8d 	bl	800182c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b0a      	cmp	r3, #10
 800211a:	d914      	bls.n	8002146 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f023 0312 	bic.w	r3, r3, #18
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e013      	b.n	800216e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1dc      	bne.n	800210e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f023 0303 	bic.w	r3, r3, #3
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800216c:	7dfb      	ldrb	r3, [r7, #23]
}
 800216e:	4618      	mov	r0, r3
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <__NVIC_SetPriorityGrouping>:
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4906      	ldr	r1, [pc, #24]	; (8002214 <__NVIC_EnableIRQ+0x34>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Config>:
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff90 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff2d 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff42 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff90 	bl	800226c <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5f 	bl	8002218 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff35 	bl	80021e0 <__NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa2 	bl	80022d0 <SysTick_Config>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e043      	b.n	8002436 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_DMA_Init+0xa8>)
 80023b6:	4413      	add	r3, r2
 80023b8:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_DMA_Init+0xac>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <HAL_DMA_Init+0xb0>)
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	bffdfff8 	.word	0xbffdfff8
 8002444:	cccccccd 	.word	0xcccccccd
 8002448:	40020000 	.word	0x40020000

0800244c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_DMA_Start_IT+0x20>
 8002468:	2302      	movs	r3, #2
 800246a:	e04b      	b.n	8002504 <HAL_DMA_Start_IT+0xb8>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d13a      	bne.n	80024f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f937 	bl	8002718 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 020e 	orr.w	r2, r2, #14
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e00f      	b.n	80024e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0204 	bic.w	r2, r2, #4
 80024d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 020a 	orr.w	r2, r2, #10
 80024e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e005      	b.n	8002502 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2204      	movs	r2, #4
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d04f      	beq.n	80025d4 <HAL_DMA_IRQHandler+0xc8>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a66      	ldr	r2, [pc, #408]	; (80026fc <HAL_DMA_IRQHandler+0x1f0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d029      	beq.n	80025ba <HAL_DMA_IRQHandler+0xae>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a65      	ldr	r2, [pc, #404]	; (8002700 <HAL_DMA_IRQHandler+0x1f4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0xaa>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_DMA_IRQHandler+0x1f8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01a      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xa4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a62      	ldr	r2, [pc, #392]	; (8002708 <HAL_DMA_IRQHandler+0x1fc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d012      	beq.n	80025aa <HAL_DMA_IRQHandler+0x9e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a60      	ldr	r2, [pc, #384]	; (800270c <HAL_DMA_IRQHandler+0x200>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00a      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x98>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5f      	ldr	r2, [pc, #380]	; (8002710 <HAL_DMA_IRQHandler+0x204>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d102      	bne.n	800259e <HAL_DMA_IRQHandler+0x92>
 8002598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259c:	e00e      	b.n	80025bc <HAL_DMA_IRQHandler+0xb0>
 800259e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025a2:	e00b      	b.n	80025bc <HAL_DMA_IRQHandler+0xb0>
 80025a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025a8:	e008      	b.n	80025bc <HAL_DMA_IRQHandler+0xb0>
 80025aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ae:	e005      	b.n	80025bc <HAL_DMA_IRQHandler+0xb0>
 80025b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b4:	e002      	b.n	80025bc <HAL_DMA_IRQHandler+0xb0>
 80025b6:	2340      	movs	r3, #64	; 0x40
 80025b8:	e000      	b.n	80025bc <HAL_DMA_IRQHandler+0xb0>
 80025ba:	2304      	movs	r3, #4
 80025bc:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_DMA_IRQHandler+0x208>)
 80025be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8094 	beq.w	80026f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025d2:	e08e      	b.n	80026f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2202      	movs	r2, #2
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d056      	beq.n	8002692 <HAL_DMA_IRQHandler+0x186>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d051      	beq.n	8002692 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020a 	bic.w	r2, r2, #10
 800260a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_DMA_IRQHandler+0x1f0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d029      	beq.n	8002672 <HAL_DMA_IRQHandler+0x166>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a37      	ldr	r2, [pc, #220]	; (8002700 <HAL_DMA_IRQHandler+0x1f4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d022      	beq.n	800266e <HAL_DMA_IRQHandler+0x162>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a35      	ldr	r2, [pc, #212]	; (8002704 <HAL_DMA_IRQHandler+0x1f8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01a      	beq.n	8002668 <HAL_DMA_IRQHandler+0x15c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_DMA_IRQHandler+0x1fc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d012      	beq.n	8002662 <HAL_DMA_IRQHandler+0x156>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a32      	ldr	r2, [pc, #200]	; (800270c <HAL_DMA_IRQHandler+0x200>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00a      	beq.n	800265c <HAL_DMA_IRQHandler+0x150>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a31      	ldr	r2, [pc, #196]	; (8002710 <HAL_DMA_IRQHandler+0x204>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d102      	bne.n	8002656 <HAL_DMA_IRQHandler+0x14a>
 8002650:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002654:	e00e      	b.n	8002674 <HAL_DMA_IRQHandler+0x168>
 8002656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265a:	e00b      	b.n	8002674 <HAL_DMA_IRQHandler+0x168>
 800265c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002660:	e008      	b.n	8002674 <HAL_DMA_IRQHandler+0x168>
 8002662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002666:	e005      	b.n	8002674 <HAL_DMA_IRQHandler+0x168>
 8002668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266c:	e002      	b.n	8002674 <HAL_DMA_IRQHandler+0x168>
 800266e:	2320      	movs	r3, #32
 8002670:	e000      	b.n	8002674 <HAL_DMA_IRQHandler+0x168>
 8002672:	2302      	movs	r3, #2
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_DMA_IRQHandler+0x208>)
 8002676:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d034      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002690:	e02f      	b.n	80026f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2208      	movs	r2, #8
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d028      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x1e8>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
    }
  }
  return;
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
}
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40020008 	.word	0x40020008
 8002700:	4002001c 	.word	0x4002001c
 8002704:	40020030 	.word	0x40020030
 8002708:	40020044 	.word	0x40020044
 800270c:	40020058 	.word	0x40020058
 8002710:	4002006c 	.word	0x4002006c
 8002714:	40020000 	.word	0x40020000

08002718 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b10      	cmp	r3, #16
 8002744:	d108      	bne.n	8002758 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002756:	e007      	b.n	8002768 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b08b      	sub	sp, #44	; 0x2c
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002786:	e169      	b.n	8002a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002788:	2201      	movs	r2, #1
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8158 	bne.w	8002a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a9a      	ldr	r2, [pc, #616]	; (8002a14 <HAL_GPIO_Init+0x2a0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d05e      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027b0:	4a98      	ldr	r2, [pc, #608]	; (8002a14 <HAL_GPIO_Init+0x2a0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d875      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027b6:	4a98      	ldr	r2, [pc, #608]	; (8002a18 <HAL_GPIO_Init+0x2a4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d058      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027bc:	4a96      	ldr	r2, [pc, #600]	; (8002a18 <HAL_GPIO_Init+0x2a4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d86f      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027c2:	4a96      	ldr	r2, [pc, #600]	; (8002a1c <HAL_GPIO_Init+0x2a8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d052      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027c8:	4a94      	ldr	r2, [pc, #592]	; (8002a1c <HAL_GPIO_Init+0x2a8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d869      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027ce:	4a94      	ldr	r2, [pc, #592]	; (8002a20 <HAL_GPIO_Init+0x2ac>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d04c      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027d4:	4a92      	ldr	r2, [pc, #584]	; (8002a20 <HAL_GPIO_Init+0x2ac>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d863      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027da:	4a92      	ldr	r2, [pc, #584]	; (8002a24 <HAL_GPIO_Init+0x2b0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d046      	beq.n	800286e <HAL_GPIO_Init+0xfa>
 80027e0:	4a90      	ldr	r2, [pc, #576]	; (8002a24 <HAL_GPIO_Init+0x2b0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d85d      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d82a      	bhi.n	8002840 <HAL_GPIO_Init+0xcc>
 80027ea:	2b12      	cmp	r3, #18
 80027ec:	d859      	bhi.n	80028a2 <HAL_GPIO_Init+0x12e>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <HAL_GPIO_Init+0x80>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	0800286f 	.word	0x0800286f
 80027f8:	08002849 	.word	0x08002849
 80027fc:	0800285b 	.word	0x0800285b
 8002800:	0800289d 	.word	0x0800289d
 8002804:	080028a3 	.word	0x080028a3
 8002808:	080028a3 	.word	0x080028a3
 800280c:	080028a3 	.word	0x080028a3
 8002810:	080028a3 	.word	0x080028a3
 8002814:	080028a3 	.word	0x080028a3
 8002818:	080028a3 	.word	0x080028a3
 800281c:	080028a3 	.word	0x080028a3
 8002820:	080028a3 	.word	0x080028a3
 8002824:	080028a3 	.word	0x080028a3
 8002828:	080028a3 	.word	0x080028a3
 800282c:	080028a3 	.word	0x080028a3
 8002830:	080028a3 	.word	0x080028a3
 8002834:	080028a3 	.word	0x080028a3
 8002838:	08002851 	.word	0x08002851
 800283c:	08002865 	.word	0x08002865
 8002840:	4a79      	ldr	r2, [pc, #484]	; (8002a28 <HAL_GPIO_Init+0x2b4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002846:	e02c      	b.n	80028a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	623b      	str	r3, [r7, #32]
          break;
 800284e:	e029      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	3304      	adds	r3, #4
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	e024      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	3308      	adds	r3, #8
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e01f      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	330c      	adds	r3, #12
 800286a:	623b      	str	r3, [r7, #32]
          break;
 800286c:	e01a      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002876:	2304      	movs	r3, #4
 8002878:	623b      	str	r3, [r7, #32]
          break;
 800287a:	e013      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002884:	2308      	movs	r3, #8
 8002886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	611a      	str	r2, [r3, #16]
          break;
 800288e:	e009      	b.n	80028a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002890:	2308      	movs	r3, #8
 8002892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	615a      	str	r2, [r3, #20]
          break;
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x130>
          break;
 80028a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2bff      	cmp	r3, #255	; 0xff
 80028a8:	d801      	bhi.n	80028ae <HAL_GPIO_Init+0x13a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	e001      	b.n	80028b2 <HAL_GPIO_Init+0x13e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d802      	bhi.n	80028c0 <HAL_GPIO_Init+0x14c>
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	e002      	b.n	80028c6 <HAL_GPIO_Init+0x152>
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3b08      	subs	r3, #8
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	210f      	movs	r1, #15
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	431a      	orrs	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80b1 	beq.w	8002a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_GPIO_Init+0x2b8>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_GPIO_Init+0x2b8>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_GPIO_Init+0x2b8>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_GPIO_Init+0x2bc>)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <HAL_GPIO_Init+0x2c0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_GPIO_Init+0x1ec>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <HAL_GPIO_Init+0x2c4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00d      	beq.n	800295c <HAL_GPIO_Init+0x1e8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3e      	ldr	r2, [pc, #248]	; (8002a3c <HAL_GPIO_Init+0x2c8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <HAL_GPIO_Init+0x1e4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3d      	ldr	r2, [pc, #244]	; (8002a40 <HAL_GPIO_Init+0x2cc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_GPIO_Init+0x1e0>
 8002950:	2303      	movs	r3, #3
 8002952:	e006      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002954:	2304      	movs	r3, #4
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002958:	2302      	movs	r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x1ee>
 8002960:	2300      	movs	r3, #0
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002972:	492f      	ldr	r1, [pc, #188]	; (8002a30 <HAL_GPIO_Init+0x2bc>)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	492c      	ldr	r1, [pc, #176]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800299a:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4928      	ldr	r1, [pc, #160]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4922      	ldr	r1, [pc, #136]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	491e      	ldr	r1, [pc, #120]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4918      	ldr	r1, [pc, #96]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4914      	ldr	r1, [pc, #80]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d021      	beq.n	8002a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e021      	b.n	8002a56 <HAL_GPIO_Init+0x2e2>
 8002a12:	bf00      	nop
 8002a14:	10320000 	.word	0x10320000
 8002a18:	10310000 	.word	0x10310000
 8002a1c:	10220000 	.word	0x10220000
 8002a20:	10210000 	.word	0x10210000
 8002a24:	10120000 	.word	0x10120000
 8002a28:	10110000 	.word	0x10110000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40010800 	.word	0x40010800
 8002a38:	40010c00 	.word	0x40010c00
 8002a3c:	40011000 	.word	0x40011000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3301      	adds	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f47f ae8e 	bne.w	8002788 <HAL_GPIO_Init+0x14>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	372c      	adds	r7, #44	; 0x2c
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	611a      	str	r2, [r3, #16]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e272      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8087 	beq.w	8002bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d00c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
 8002ae4:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	4b89      	ldr	r3, [pc, #548]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d168      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e24c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x76>
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7f      	ldr	r2, [pc, #508]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e02e      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a77      	ldr	r2, [pc, #476]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0xbc>
 8002b4e:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a71      	ldr	r2, [pc, #452]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b68:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fe50 	bl	800182c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe fe4c 	bl	800182c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e200      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe4>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fe3c 	bl	800182c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fe38 	bl	800182c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1ec      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x10c>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d063      	beq.n	8002cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be6:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
 8002bfe:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e1c0      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4939      	ldr	r1, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	e03a      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe fdf1 	bl	800182c <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fded 	bl	800182c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1a1      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4927      	ldr	r1, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fdd0 	bl	800182c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fdcc 	bl	800182c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e180      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fdb0 	bl	800182c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fdac 	bl	800182c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e160      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f000 faba 	bl	8003268 <RCC_Delay>
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fd96 	bl	800182c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d02:	e00f      	b.n	8002d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fe fd92 	bl	800182c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d908      	bls.n	8002d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e146      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	42420000 	.word	0x42420000
 8002d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b92      	ldr	r3, [pc, #584]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e9      	bne.n	8002d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a6 	beq.w	8002e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b8b      	ldr	r3, [pc, #556]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a87      	ldr	r2, [pc, #540]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b82      	ldr	r3, [pc, #520]	; (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7e      	ldr	r2, [pc, #504]	; (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fd53 	bl	800182c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe fd4f 	bl	800182c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e103      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b75      	ldr	r3, [pc, #468]	; (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x312>
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e02d      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x334>
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a69      	ldr	r2, [pc, #420]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a66      	ldr	r2, [pc, #408]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x356>
 8002de8:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a60      	ldr	r2, [pc, #384]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a5d      	ldr	r2, [pc, #372]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a5a      	ldr	r2, [pc, #360]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a57      	ldr	r2, [pc, #348]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fe fd03 	bl	800182c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fcff 	bl	800182c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0b1      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x37e>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fced 	bl	800182c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe fce9 	bl	800182c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e09b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8087 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e94:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d061      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d146      	bne.n	8002f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe fcbd 	bl	800182c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe fcb9 	bl	800182c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e06d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4921      	ldr	r1, [pc, #132]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a19      	ldr	r1, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	430b      	orrs	r3, r1
 8002f02:	491b      	ldr	r1, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fc8d 	bl	800182c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fc89 	bl	800182c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e03d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46a>
 8002f34:	e035      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fc76 	bl	800182c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fc72 	bl	800182c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e026      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x498>
 8002f62:	e01e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e019      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
 8002f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x500>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d0      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0207 	bic.w	r2, r3, #7
 8002fda:	4965      	ldr	r1, [pc, #404]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800302e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d040      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d115      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e073      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06b      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4936      	ldr	r1, [pc, #216]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a0:	f7fe fbc4 	bl	800182c <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe fbc0 	bl	800182c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e053      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d210      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0207 	bic.w	r2, r3, #7
 80030e6:	4922      	ldr	r1, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f821 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1cc>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1d0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fb22 	bl	80017a8 <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40022000 	.word	0x40022000
 8003174:	40021000 	.word	0x40021000
 8003178:	08007224 	.word	0x08007224
 800317c:	20000000 	.word	0x20000000
 8003180:	20000004 	.word	0x20000004

08003184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d002      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x30>
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x36>
 80031b2:	e027      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_GetSysClockFreq+0x98>)
 80031b6:	613b      	str	r3, [r7, #16]
      break;
 80031b8:	e027      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0c9b      	lsrs	r3, r3, #18
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	4a17      	ldr	r2, [pc, #92]	; (8003220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c4:	5cd3      	ldrb	r3, [r2, r3]
 80031c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_GetSysClockFreq+0x94>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0c5b      	lsrs	r3, r3, #17
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <HAL_RCC_GetSysClockFreq+0x98>)
 80031e6:	fb03 f202 	mul.w	r2, r3, r2
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e004      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031f8:	fb02 f303 	mul.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	613b      	str	r3, [r7, #16]
      break;
 8003202:	e002      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetSysClockFreq+0x98>)
 8003206:	613b      	str	r3, [r7, #16]
      break;
 8003208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320a:	693b      	ldr	r3, [r7, #16]
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	007a1200 	.word	0x007a1200
 8003220:	0800723c 	.word	0x0800723c
 8003224:	0800724c 	.word	0x0800724c
 8003228:	003d0900 	.word	0x003d0900

0800322c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <HAL_RCC_GetHCLKFreq+0x10>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff fff2 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08007234 	.word	0x08007234

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d118      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003304:	f7fe fa92 	bl	800182c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fe fa8e 	bl	800182c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06d      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d027      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d014      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe fa5d 	bl	800182c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe fa59 	bl	800182c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e036      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4917      	ldr	r1, [pc, #92]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420440 	.word	0x42420440

08003410 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b10      	cmp	r3, #16
 8003436:	f200 808a 	bhi.w	800354e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d045      	beq.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d075      	beq.n	8003532 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003446:	e082      	b.n	800354e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003448:	4b46      	ldr	r3, [pc, #280]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800344e:	4b45      	ldr	r3, [pc, #276]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d07b      	beq.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	0c9b      	lsrs	r3, r3, #18
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	4a41      	ldr	r2, [pc, #260]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003472:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	4a3b      	ldr	r2, [pc, #236]	; (800356c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800348c:	4a38      	ldr	r2, [pc, #224]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e004      	b.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4a34      	ldr	r2, [pc, #208]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034a8:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b4:	d102      	bne.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	61bb      	str	r3, [r7, #24]
      break;
 80034ba:	e04a      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
      break;
 80034ca:	e042      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d108      	bne.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80034e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e01f      	b.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003508:	f649 4340 	movw	r3, #40000	; 0x9c40
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e00f      	b.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351a:	d11c      	bne.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d016      	beq.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003528:	f24f 4324 	movw	r3, #62500	; 0xf424
 800352c:	61bb      	str	r3, [r7, #24]
      break;
 800352e:	e012      	b.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003530:	e011      	b.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003532:	f7ff fe85 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0b9b      	lsrs	r3, r3, #14
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	61bb      	str	r3, [r7, #24]
      break;
 800354c:	e004      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003556:	bf00      	nop
    }
  }
  return (frequency);
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	08007250 	.word	0x08007250
 800356c:	08007260 	.word	0x08007260
 8003570:	007a1200 	.word	0x007a1200
 8003574:	003d0900 	.word	0x003d0900
 8003578:	aaaaaaab 	.word	0xaaaaaaab

0800357c <Init>:
#include "mq135.h"

//extern uint32_t adc_valuel;

void  Init(struct MQ135 *mq135, ADC_HandleTypeDef *hadc, DMA_HandleTypeDef *hdma_adc, float _rload, float _rzero) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
    if (_rload==-1) mq135->_rload = 10.0; else mq135->_rload =_rload;
 800358a:	491c      	ldr	r1, [pc, #112]	; (80035fc <Init+0x80>)
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f7fd fd6d 	bl	800106c <__aeabi_fcmpeq>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <Init+0x24>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <Init+0x84>)
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	e002      	b.n	80035a6 <Init+0x2a>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	609a      	str	r2, [r3, #8]
    if (_rzero==-1) mq135->_rzero = 76.63; else mq135->_rzero =_rzero;
 80035a6:	4915      	ldr	r1, [pc, #84]	; (80035fc <Init+0x80>)
 80035a8:	69b8      	ldr	r0, [r7, #24]
 80035aa:	f7fd fd5f 	bl	800106c <__aeabi_fcmpeq>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <Init+0x40>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <Init+0x88>)
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e002      	b.n	80035c2 <Init+0x46>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	60da      	str	r2, [r3, #12]
    mq135->hadc =hadc;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	601a      	str	r2, [r3, #0]
    mq135->hdma_adc =hdma_adc;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]
    mq135->adc_value = 0;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
    mq135->ppm = 0;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
    HAL_ADCEx_Calibration_Start(mq135->hadc);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fd1e 	bl	8002020 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(mq135->hadc,(uint32_t*)&mq135->adc_value,1);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3310      	adds	r3, #16
 80035ec:	2201      	movs	r2, #1
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7fe fa22 	bl	8001a38 <HAL_ADC_Start_DMA>
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	bf800000 	.word	0xbf800000
 8003600:	41200000 	.word	0x41200000
 8003604:	4299428f 	.word	0x4299428f

08003608 <getCorrectionFactor>:

float getCorrectionFactor(struct MQ135 *mq135, float t, float h) {
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]

    if(t < 20){
 8003614:	4952      	ldr	r1, [pc, #328]	; (8003760 <getCorrectionFactor+0x158>)
 8003616:	68b8      	ldr	r0, [r7, #8]
 8003618:	f7fd fd32 	bl	8001080 <__aeabi_fcmplt>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d052      	beq.n	80036c8 <getCorrectionFactor+0xc0>
        return CORA * t * t - CORB * t + CORC - (h-33.)*CORD;
 8003622:	68b8      	ldr	r0, [r7, #8]
 8003624:	f7fc ff00 	bl	8000428 <__aeabi_f2d>
 8003628:	a33f      	add	r3, pc, #252	; (adr r3, 8003728 <getCorrectionFactor+0x120>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fc ff53 	bl	80004d8 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4614      	mov	r4, r2
 8003638:	461d      	mov	r5, r3
 800363a:	68b8      	ldr	r0, [r7, #8]
 800363c:	f7fc fef4 	bl	8000428 <__aeabi_f2d>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc ff46 	bl	80004d8 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	68b8      	ldr	r0, [r7, #8]
 8003656:	f7fc fee7 	bl	8000428 <__aeabi_f2d>
 800365a:	a335      	add	r3, pc, #212	; (adr r3, 8003730 <getCorrectionFactor+0x128>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ff3a 	bl	80004d8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4620      	mov	r0, r4
 800366a:	4629      	mov	r1, r5
 800366c:	f7fc fd7c 	bl	8000168 <__aeabi_dsub>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	a32f      	add	r3, pc, #188	; (adr r3, 8003738 <getCorrectionFactor+0x130>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc fd75 	bl	800016c <__adddf3>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4614      	mov	r4, r2
 8003688:	461d      	mov	r5, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fc fecc 	bl	8000428 <__aeabi_f2d>
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b33      	ldr	r3, [pc, #204]	; (8003764 <getCorrectionFactor+0x15c>)
 8003696:	f7fc fd67 	bl	8000168 <__aeabi_dsub>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	a327      	add	r3, pc, #156	; (adr r3, 8003740 <getCorrectionFactor+0x138>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc ff16 	bl	80004d8 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fc fd58 	bl	8000168 <__aeabi_dsub>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd f9e2 	bl	8000a88 <__aeabi_d2f>
 80036c4:	4603      	mov	r3, r0
 80036c6:	e029      	b.n	800371c <getCorrectionFactor+0x114>
    } else {
        return CORE * t + CORF * h + CORG; //0.87
 80036c8:	68b8      	ldr	r0, [r7, #8]
 80036ca:	f7fc fead 	bl	8000428 <__aeabi_f2d>
 80036ce:	a31e      	add	r3, pc, #120	; (adr r3, 8003748 <getCorrectionFactor+0x140>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fc ff00 	bl	80004d8 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fc fea1 	bl	8000428 <__aeabi_f2d>
 80036e6:	a31a      	add	r3, pc, #104	; (adr r3, 8003750 <getCorrectionFactor+0x148>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc fef4 	bl	80004d8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4620      	mov	r0, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	f7fc fd38 	bl	800016c <__adddf3>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	a314      	add	r3, pc, #80	; (adr r3, 8003758 <getCorrectionFactor+0x150>)
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f7fc fd2f 	bl	800016c <__adddf3>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	f7fd f9b7 	bl	8000a88 <__aeabi_d2f>
 800371a:	4603      	mov	r3, r0
    }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}
 8003724:	f3af 8000 	nop.w
 8003728:	8db8bac7 	.word	0x8db8bac7
 800372c:	3f36f006 	.word	0x3f36f006
 8003730:	ec6bce85 	.word	0xec6bce85
 8003734:	3f9bd512 	.word	0x3f9bd512
 8003738:	fa97e133 	.word	0xfa97e133
 800373c:	3ff65379 	.word	0x3ff65379
 8003740:	487fcb92 	.word	0x487fcb92
 8003744:	3f5d7dbf 	.word	0x3f5d7dbf
 8003748:	8717fb8e 	.word	0x8717fb8e
 800374c:	bf6b4e81 	.word	0xbf6b4e81
 8003750:	34a6f316 	.word	0x34a6f316
 8003754:	bf5f81f8 	.word	0xbf5f81f8
 8003758:	500c31e8 	.word	0x500c31e8
 800375c:	3ff21501 	.word	0x3ff21501
 8003760:	41a00000 	.word	0x41a00000
 8003764:	40408000 	.word	0x40408000

08003768 <getResistance>:

float getResistance(struct MQ135 *mq135) {
 8003768:	b5b0      	push	{r4, r5, r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
   *  @brief we need to convert adc from 12 bit to 10 bit by dividing to 4
  */
    // adc_value = 0;
    // HAL_ADC_Start_DMA(mq135->hadc,(uint32_t*)&adc_value,1);
//	mq135->adc_value
	uint32_t temp = mq135->adc_value/4;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	60fb      	str	r3, [r7, #12]
	printf("Tempt %lu\n", temp);
 8003778:	68f9      	ldr	r1, [r7, #12]
 800377a:	4835      	ldr	r0, [pc, #212]	; (8003850 <getResistance+0xe8>)
 800377c:	f000 fdf4 	bl	8004368 <iprintf>
//	((1023./(float)(temp)) - 1.)*(mq135->_rload);
	printf("getResitance %d",(int)(((1023./(float)(temp)) - 1.)*(mq135->_rload)));
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7fd fa87 	bl	8000c94 <__aeabi_ui2f>
 8003786:	4603      	mov	r3, r0
 8003788:	4618      	mov	r0, r3
 800378a:	f7fc fe4d 	bl	8000428 <__aeabi_f2d>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	a12d      	add	r1, pc, #180	; (adr r1, 8003848 <getResistance+0xe0>)
 8003794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003798:	f7fc ffc8 	bl	800072c <__aeabi_ddiv>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <getResistance+0xec>)
 80037aa:	f7fc fcdd 	bl	8000168 <__aeabi_dsub>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4614      	mov	r4, r2
 80037b4:	461d      	mov	r5, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fe34 	bl	8000428 <__aeabi_f2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4620      	mov	r0, r4
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7fc fe86 	bl	80004d8 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f7fd f930 	bl	8000a38 <__aeabi_d2iz>
 80037d8:	4603      	mov	r3, r0
 80037da:	4619      	mov	r1, r3
 80037dc:	481e      	ldr	r0, [pc, #120]	; (8003858 <getResistance+0xf0>)
 80037de:	f000 fdc3 	bl	8004368 <iprintf>
  return ((1023./(float)(temp)) - 1.)*(mq135->_rload);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7fd fa56 	bl	8000c94 <__aeabi_ui2f>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc fe1c 	bl	8000428 <__aeabi_f2d>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	a114      	add	r1, pc, #80	; (adr r1, 8003848 <getResistance+0xe0>)
 80037f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037fa:	f7fc ff97 	bl	800072c <__aeabi_ddiv>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <getResistance+0xec>)
 800380c:	f7fc fcac 	bl	8000168 <__aeabi_dsub>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fc fe03 	bl	8000428 <__aeabi_f2d>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fc fe55 	bl	80004d8 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f927 	bl	8000a88 <__aeabi_d2f>
 800383a:	4603      	mov	r3, r0
//	return mq135->ppm;
}//20
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bdb0      	pop	{r4, r5, r7, pc}
 8003844:	f3af 8000 	nop.w
 8003848:	00000000 	.word	0x00000000
 800384c:	408ff800 	.word	0x408ff800
 8003850:	080071a8 	.word	0x080071a8
 8003854:	3ff00000 	.word	0x3ff00000
 8003858:	080071b4 	.word	0x080071b4

0800385c <getCorrectedResistance>:

float getCorrectedResistance(struct MQ135 *mq135, float t, float h) {
 800385c:	b5b0      	push	{r4, r5, r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
	printf("Temperature = %f:: getCorrectionFactor() = %lf\n", t, (double)getCorrectionFactor(mq135, t, h));
 8003868:	68b8      	ldr	r0, [r7, #8]
 800386a:	f7fc fddd 	bl	8000428 <__aeabi_f2d>
 800386e:	4604      	mov	r4, r0
 8003870:	460d      	mov	r5, r1
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fec6 	bl	8003608 <getCorrectionFactor>
 800387c:	4603      	mov	r3, r0
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fdd2 	bl	8000428 <__aeabi_f2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	e9cd 2300 	strd	r2, r3, [sp]
 800388c:	4622      	mov	r2, r4
 800388e:	462b      	mov	r3, r5
 8003890:	480a      	ldr	r0, [pc, #40]	; (80038bc <getCorrectedResistance+0x60>)
 8003892:	f000 fd69 	bl	8004368 <iprintf>
  return getResistance(mq135)/getCorrectionFactor(mq135, t, h);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff ff66 	bl	8003768 <getResistance>
 800389c:	4604      	mov	r4, r0
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff feb0 	bl	8003608 <getCorrectionFactor>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4619      	mov	r1, r3
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7fd fafd 	bl	8000eac <__aeabi_fdiv>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bdb0      	pop	{r4, r5, r7, pc}
 80038bc:	080071c4 	.word	0x080071c4

080038c0 <getCorrectedPPM>:

float getPPM(struct MQ135 *mq135) {
  return PARA * pow((getResistance(mq135)/(mq135->_rzero)), -PARB);
}

float getCorrectedPPM(struct MQ135 *mq135, float t, float h) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	printf("pow((getCorrectedResistance(mq135, t, h)=%d\n", (int)(getCorrectedResistance(mq135, t, h)));
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff ffc3 	bl	800385c <getCorrectedResistance>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd fbf9 	bl	80010d0 <__aeabi_f2iz>
 80038de:	4603      	mov	r3, r0
 80038e0:	4619      	mov	r1, r3
 80038e2:	4819      	ldr	r0, [pc, #100]	; (8003948 <getCorrectedPPM+0x88>)
 80038e4:	f000 fd40 	bl	8004368 <iprintf>
  return PARA * pow((getCorrectedResistance(mq135, t, h)/(mq135->_rzero)), -PARB);
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ffb5 	bl	800385c <getCorrectedResistance>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fd fad6 	bl	8000eac <__aeabi_fdiv>
 8003900:	4603      	mov	r3, r0
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fd90 	bl	8000428 <__aeabi_f2d>
 8003908:	a30b      	add	r3, pc, #44	; (adr r3, 8003938 <getCorrectedPPM+0x78>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f002 fd1d 	bl	800634c <pow>
 8003912:	a30b      	add	r3, pc, #44	; (adr r3, 8003940 <getCorrectedPPM+0x80>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f7fc fdde 	bl	80004d8 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fd f8b0 	bl	8000a88 <__aeabi_d2f>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	f3af 8000 	nop.w
 8003938:	bf42646d 	.word	0xbf42646d
 800393c:	c00626fb 	.word	0xc00626fb
 8003940:	490f3d8b 	.word	0x490f3d8b
 8003944:	405d2688 	.word	0x405d2688
 8003948:	080071f4 	.word	0x080071f4

0800394c <__cvt>:
 800394c:	2b00      	cmp	r3, #0
 800394e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003952:	461f      	mov	r7, r3
 8003954:	bfbb      	ittet	lt
 8003956:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800395a:	461f      	movlt	r7, r3
 800395c:	2300      	movge	r3, #0
 800395e:	232d      	movlt	r3, #45	; 0x2d
 8003960:	b088      	sub	sp, #32
 8003962:	4614      	mov	r4, r2
 8003964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003966:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003968:	7013      	strb	r3, [r2, #0]
 800396a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800396c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003970:	f023 0820 	bic.w	r8, r3, #32
 8003974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003978:	d005      	beq.n	8003986 <__cvt+0x3a>
 800397a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800397e:	d100      	bne.n	8003982 <__cvt+0x36>
 8003980:	3501      	adds	r5, #1
 8003982:	2302      	movs	r3, #2
 8003984:	e000      	b.n	8003988 <__cvt+0x3c>
 8003986:	2303      	movs	r3, #3
 8003988:	aa07      	add	r2, sp, #28
 800398a:	9204      	str	r2, [sp, #16]
 800398c:	aa06      	add	r2, sp, #24
 800398e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003992:	e9cd 3500 	strd	r3, r5, [sp]
 8003996:	4622      	mov	r2, r4
 8003998:	463b      	mov	r3, r7
 800399a:	f000 ff41 	bl	8004820 <_dtoa_r>
 800399e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039a2:	4606      	mov	r6, r0
 80039a4:	d102      	bne.n	80039ac <__cvt+0x60>
 80039a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039a8:	07db      	lsls	r3, r3, #31
 80039aa:	d522      	bpl.n	80039f2 <__cvt+0xa6>
 80039ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039b0:	eb06 0905 	add.w	r9, r6, r5
 80039b4:	d110      	bne.n	80039d8 <__cvt+0x8c>
 80039b6:	7833      	ldrb	r3, [r6, #0]
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d10a      	bne.n	80039d2 <__cvt+0x86>
 80039bc:	2200      	movs	r2, #0
 80039be:	2300      	movs	r3, #0
 80039c0:	4620      	mov	r0, r4
 80039c2:	4639      	mov	r1, r7
 80039c4:	f7fc fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80039c8:	b918      	cbnz	r0, 80039d2 <__cvt+0x86>
 80039ca:	f1c5 0501 	rsb	r5, r5, #1
 80039ce:	f8ca 5000 	str.w	r5, [sl]
 80039d2:	f8da 3000 	ldr.w	r3, [sl]
 80039d6:	4499      	add	r9, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	2300      	movs	r3, #0
 80039dc:	4620      	mov	r0, r4
 80039de:	4639      	mov	r1, r7
 80039e0:	f7fc ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80039e4:	b108      	cbz	r0, 80039ea <__cvt+0x9e>
 80039e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80039ea:	2230      	movs	r2, #48	; 0x30
 80039ec:	9b07      	ldr	r3, [sp, #28]
 80039ee:	454b      	cmp	r3, r9
 80039f0:	d307      	bcc.n	8003a02 <__cvt+0xb6>
 80039f2:	4630      	mov	r0, r6
 80039f4:	9b07      	ldr	r3, [sp, #28]
 80039f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039f8:	1b9b      	subs	r3, r3, r6
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	b008      	add	sp, #32
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	9107      	str	r1, [sp, #28]
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e7f0      	b.n	80039ec <__cvt+0xa0>

08003a0a <__exponent>:
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	f803 2b02 	strb.w	r2, [r3], #2
 8003a14:	bfb6      	itet	lt
 8003a16:	222d      	movlt	r2, #45	; 0x2d
 8003a18:	222b      	movge	r2, #43	; 0x2b
 8003a1a:	4249      	neglt	r1, r1
 8003a1c:	2909      	cmp	r1, #9
 8003a1e:	7042      	strb	r2, [r0, #1]
 8003a20:	dd2a      	ble.n	8003a78 <__exponent+0x6e>
 8003a22:	f10d 0207 	add.w	r2, sp, #7
 8003a26:	4617      	mov	r7, r2
 8003a28:	260a      	movs	r6, #10
 8003a2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a2e:	4694      	mov	ip, r2
 8003a30:	fb06 1415 	mls	r4, r6, r5, r1
 8003a34:	3430      	adds	r4, #48	; 0x30
 8003a36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	2c63      	cmp	r4, #99	; 0x63
 8003a3e:	4629      	mov	r1, r5
 8003a40:	f102 32ff 	add.w	r2, r2, #4294967295
 8003a44:	dcf1      	bgt.n	8003a2a <__exponent+0x20>
 8003a46:	3130      	adds	r1, #48	; 0x30
 8003a48:	f1ac 0402 	sub.w	r4, ip, #2
 8003a4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a50:	4622      	mov	r2, r4
 8003a52:	1c41      	adds	r1, r0, #1
 8003a54:	42ba      	cmp	r2, r7
 8003a56:	d30a      	bcc.n	8003a6e <__exponent+0x64>
 8003a58:	f10d 0209 	add.w	r2, sp, #9
 8003a5c:	eba2 020c 	sub.w	r2, r2, ip
 8003a60:	42bc      	cmp	r4, r7
 8003a62:	bf88      	it	hi
 8003a64:	2200      	movhi	r2, #0
 8003a66:	4413      	add	r3, r2
 8003a68:	1a18      	subs	r0, r3, r0
 8003a6a:	b003      	add	sp, #12
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003a72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003a76:	e7ed      	b.n	8003a54 <__exponent+0x4a>
 8003a78:	2330      	movs	r3, #48	; 0x30
 8003a7a:	3130      	adds	r1, #48	; 0x30
 8003a7c:	7083      	strb	r3, [r0, #2]
 8003a7e:	70c1      	strb	r1, [r0, #3]
 8003a80:	1d03      	adds	r3, r0, #4
 8003a82:	e7f1      	b.n	8003a68 <__exponent+0x5e>

08003a84 <_printf_float>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	b091      	sub	sp, #68	; 0x44
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a90:	4616      	mov	r6, r2
 8003a92:	461f      	mov	r7, r3
 8003a94:	4605      	mov	r5, r0
 8003a96:	f000 fdb5 	bl	8004604 <_localeconv_r>
 8003a9a:	6803      	ldr	r3, [r0, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa0:	f7fc fb56 	bl	8000150 <strlen>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8003aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8003aac:	900a      	str	r0, [sp, #40]	; 0x28
 8003aae:	3307      	adds	r3, #7
 8003ab0:	f023 0307 	bic.w	r3, r3, #7
 8003ab4:	f103 0208 	add.w	r2, r3, #8
 8003ab8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003abc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ac0:	f8c8 2000 	str.w	r2, [r8]
 8003ac4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003ac8:	4652      	mov	r2, sl
 8003aca:	4643      	mov	r3, r8
 8003acc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ad0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ada:	4650      	mov	r0, sl
 8003adc:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <_printf_float+0x2cc>)
 8003ade:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ae0:	f7fc ff94 	bl	8000a0c <__aeabi_dcmpun>
 8003ae4:	bb70      	cbnz	r0, 8003b44 <_printf_float+0xc0>
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	4650      	mov	r0, sl
 8003aec:	4b98      	ldr	r3, [pc, #608]	; (8003d50 <_printf_float+0x2cc>)
 8003aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003af0:	f7fc ff6e 	bl	80009d0 <__aeabi_dcmple>
 8003af4:	bb30      	cbnz	r0, 8003b44 <_printf_float+0xc0>
 8003af6:	2200      	movs	r2, #0
 8003af8:	2300      	movs	r3, #0
 8003afa:	4650      	mov	r0, sl
 8003afc:	4641      	mov	r1, r8
 8003afe:	f7fc ff5d 	bl	80009bc <__aeabi_dcmplt>
 8003b02:	b110      	cbz	r0, 8003b0a <_printf_float+0x86>
 8003b04:	232d      	movs	r3, #45	; 0x2d
 8003b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b0a:	4a92      	ldr	r2, [pc, #584]	; (8003d54 <_printf_float+0x2d0>)
 8003b0c:	4b92      	ldr	r3, [pc, #584]	; (8003d58 <_printf_float+0x2d4>)
 8003b0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b12:	bf94      	ite	ls
 8003b14:	4690      	movls	r8, r2
 8003b16:	4698      	movhi	r8, r3
 8003b18:	2303      	movs	r3, #3
 8003b1a:	f04f 0a00 	mov.w	sl, #0
 8003b1e:	6123      	str	r3, [r4, #16]
 8003b20:	f02b 0304 	bic.w	r3, fp, #4
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	4633      	mov	r3, r6
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	9700      	str	r7, [sp, #0]
 8003b2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b30:	f000 f9d6 	bl	8003ee0 <_printf_common>
 8003b34:	3001      	adds	r0, #1
 8003b36:	f040 8090 	bne.w	8003c5a <_printf_float+0x1d6>
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3e:	b011      	add	sp, #68	; 0x44
 8003b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b44:	4652      	mov	r2, sl
 8003b46:	4643      	mov	r3, r8
 8003b48:	4650      	mov	r0, sl
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	f7fc ff5e 	bl	8000a0c <__aeabi_dcmpun>
 8003b50:	b148      	cbz	r0, 8003b66 <_printf_float+0xe2>
 8003b52:	f1b8 0f00 	cmp.w	r8, #0
 8003b56:	bfb8      	it	lt
 8003b58:	232d      	movlt	r3, #45	; 0x2d
 8003b5a:	4a80      	ldr	r2, [pc, #512]	; (8003d5c <_printf_float+0x2d8>)
 8003b5c:	bfb8      	it	lt
 8003b5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b62:	4b7f      	ldr	r3, [pc, #508]	; (8003d60 <_printf_float+0x2dc>)
 8003b64:	e7d3      	b.n	8003b0e <_printf_float+0x8a>
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	d142      	bne.n	8003bf6 <_printf_float+0x172>
 8003b70:	2306      	movs	r3, #6
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	9206      	str	r2, [sp, #24]
 8003b78:	aa0e      	add	r2, sp, #56	; 0x38
 8003b7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b7e:	aa0d      	add	r2, sp, #52	; 0x34
 8003b80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b84:	9203      	str	r2, [sp, #12]
 8003b86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	4652      	mov	r2, sl
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	4628      	mov	r0, r5
 8003b98:	4643      	mov	r3, r8
 8003b9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b9c:	f7ff fed6 	bl	800394c <__cvt>
 8003ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ba2:	4680      	mov	r8, r0
 8003ba4:	2947      	cmp	r1, #71	; 0x47
 8003ba6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ba8:	d108      	bne.n	8003bbc <_printf_float+0x138>
 8003baa:	1cc8      	adds	r0, r1, #3
 8003bac:	db02      	blt.n	8003bb4 <_printf_float+0x130>
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	dd40      	ble.n	8003c36 <_printf_float+0x1b2>
 8003bb4:	f1a9 0902 	sub.w	r9, r9, #2
 8003bb8:	fa5f f989 	uxtb.w	r9, r9
 8003bbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bc0:	d81f      	bhi.n	8003c02 <_printf_float+0x17e>
 8003bc2:	464a      	mov	r2, r9
 8003bc4:	3901      	subs	r1, #1
 8003bc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bca:	910d      	str	r1, [sp, #52]	; 0x34
 8003bcc:	f7ff ff1d 	bl	8003a0a <__exponent>
 8003bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bd2:	4682      	mov	sl, r0
 8003bd4:	1813      	adds	r3, r2, r0
 8003bd6:	2a01      	cmp	r2, #1
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	dc02      	bgt.n	8003be2 <_printf_float+0x15e>
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	07d2      	lsls	r2, r2, #31
 8003be0:	d501      	bpl.n	8003be6 <_printf_float+0x162>
 8003be2:	3301      	adds	r3, #1
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d09b      	beq.n	8003b26 <_printf_float+0xa2>
 8003bee:	232d      	movs	r3, #45	; 0x2d
 8003bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf4:	e797      	b.n	8003b26 <_printf_float+0xa2>
 8003bf6:	2947      	cmp	r1, #71	; 0x47
 8003bf8:	d1bc      	bne.n	8003b74 <_printf_float+0xf0>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ba      	bne.n	8003b74 <_printf_float+0xf0>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e7b7      	b.n	8003b72 <_printf_float+0xee>
 8003c02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c06:	d118      	bne.n	8003c3a <_printf_float+0x1b6>
 8003c08:	2900      	cmp	r1, #0
 8003c0a:	6863      	ldr	r3, [r4, #4]
 8003c0c:	dd0b      	ble.n	8003c26 <_printf_float+0x1a2>
 8003c0e:	6121      	str	r1, [r4, #16]
 8003c10:	b913      	cbnz	r3, 8003c18 <_printf_float+0x194>
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	07d0      	lsls	r0, r2, #31
 8003c16:	d502      	bpl.n	8003c1e <_printf_float+0x19a>
 8003c18:	3301      	adds	r3, #1
 8003c1a:	440b      	add	r3, r1
 8003c1c:	6123      	str	r3, [r4, #16]
 8003c1e:	f04f 0a00 	mov.w	sl, #0
 8003c22:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c24:	e7df      	b.n	8003be6 <_printf_float+0x162>
 8003c26:	b913      	cbnz	r3, 8003c2e <_printf_float+0x1aa>
 8003c28:	6822      	ldr	r2, [r4, #0]
 8003c2a:	07d2      	lsls	r2, r2, #31
 8003c2c:	d501      	bpl.n	8003c32 <_printf_float+0x1ae>
 8003c2e:	3302      	adds	r3, #2
 8003c30:	e7f4      	b.n	8003c1c <_printf_float+0x198>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e7f2      	b.n	8003c1c <_printf_float+0x198>
 8003c36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	db05      	blt.n	8003c4c <_printf_float+0x1c8>
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	6121      	str	r1, [r4, #16]
 8003c44:	07d8      	lsls	r0, r3, #31
 8003c46:	d5ea      	bpl.n	8003c1e <_printf_float+0x19a>
 8003c48:	1c4b      	adds	r3, r1, #1
 8003c4a:	e7e7      	b.n	8003c1c <_printf_float+0x198>
 8003c4c:	2900      	cmp	r1, #0
 8003c4e:	bfcc      	ite	gt
 8003c50:	2201      	movgt	r2, #1
 8003c52:	f1c1 0202 	rsble	r2, r1, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	e7e0      	b.n	8003c1c <_printf_float+0x198>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	055a      	lsls	r2, r3, #21
 8003c5e:	d407      	bmi.n	8003c70 <_printf_float+0x1ec>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	4642      	mov	r2, r8
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d12b      	bne.n	8003cc6 <_printf_float+0x242>
 8003c6e:	e764      	b.n	8003b3a <_printf_float+0xb6>
 8003c70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c74:	f240 80dd 	bls.w	8003e32 <_printf_float+0x3ae>
 8003c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f7fc fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d033      	beq.n	8003cf0 <_printf_float+0x26c>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <_printf_float+0x2e0>)
 8003c90:	47b8      	blx	r7
 8003c92:	3001      	adds	r0, #1
 8003c94:	f43f af51 	beq.w	8003b3a <_printf_float+0xb6>
 8003c98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	db02      	blt.n	8003ca6 <_printf_float+0x222>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	07d8      	lsls	r0, r3, #31
 8003ca4:	d50f      	bpl.n	8003cc6 <_printf_float+0x242>
 8003ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f af42 	beq.w	8003b3a <_printf_float+0xb6>
 8003cb6:	f04f 0800 	mov.w	r8, #0
 8003cba:	f104 091a 	add.w	r9, r4, #26
 8003cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	4543      	cmp	r3, r8
 8003cc4:	dc09      	bgt.n	8003cda <_printf_float+0x256>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	079b      	lsls	r3, r3, #30
 8003cca:	f100 8104 	bmi.w	8003ed6 <_printf_float+0x452>
 8003cce:	68e0      	ldr	r0, [r4, #12]
 8003cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cd2:	4298      	cmp	r0, r3
 8003cd4:	bfb8      	it	lt
 8003cd6:	4618      	movlt	r0, r3
 8003cd8:	e731      	b.n	8003b3e <_printf_float+0xba>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	464a      	mov	r2, r9
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b8      	blx	r7
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f43f af28 	beq.w	8003b3a <_printf_float+0xb6>
 8003cea:	f108 0801 	add.w	r8, r8, #1
 8003cee:	e7e6      	b.n	8003cbe <_printf_float+0x23a>
 8003cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	dc38      	bgt.n	8003d68 <_printf_float+0x2e4>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <_printf_float+0x2e0>)
 8003cfe:	47b8      	blx	r7
 8003d00:	3001      	adds	r0, #1
 8003d02:	f43f af1a 	beq.w	8003b3a <_printf_float+0xb6>
 8003d06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	d102      	bne.n	8003d14 <_printf_float+0x290>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	07d9      	lsls	r1, r3, #31
 8003d12:	d5d8      	bpl.n	8003cc6 <_printf_float+0x242>
 8003d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f af0b 	beq.w	8003b3a <_printf_float+0xb6>
 8003d24:	f04f 0900 	mov.w	r9, #0
 8003d28:	f104 0a1a 	add.w	sl, r4, #26
 8003d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d2e:	425b      	negs	r3, r3
 8003d30:	454b      	cmp	r3, r9
 8003d32:	dc01      	bgt.n	8003d38 <_printf_float+0x2b4>
 8003d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d36:	e794      	b.n	8003c62 <_printf_float+0x1de>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4652      	mov	r2, sl
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4628      	mov	r0, r5
 8003d40:	47b8      	blx	r7
 8003d42:	3001      	adds	r0, #1
 8003d44:	f43f aef9 	beq.w	8003b3a <_printf_float+0xb6>
 8003d48:	f109 0901 	add.w	r9, r9, #1
 8003d4c:	e7ee      	b.n	8003d2c <_printf_float+0x2a8>
 8003d4e:	bf00      	nop
 8003d50:	7fefffff 	.word	0x7fefffff
 8003d54:	08007262 	.word	0x08007262
 8003d58:	08007266 	.word	0x08007266
 8003d5c:	0800726a 	.word	0x0800726a
 8003d60:	0800726e 	.word	0x0800726e
 8003d64:	08007272 	.word	0x08007272
 8003d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	bfa8      	it	ge
 8003d70:	461a      	movge	r2, r3
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	4691      	mov	r9, r2
 8003d76:	dc37      	bgt.n	8003de8 <_printf_float+0x364>
 8003d78:	f04f 0b00 	mov.w	fp, #0
 8003d7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d80:	f104 021a 	add.w	r2, r4, #26
 8003d84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d88:	ebaa 0309 	sub.w	r3, sl, r9
 8003d8c:	455b      	cmp	r3, fp
 8003d8e:	dc33      	bgt.n	8003df8 <_printf_float+0x374>
 8003d90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d94:	429a      	cmp	r2, r3
 8003d96:	db3b      	blt.n	8003e10 <_printf_float+0x38c>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	07da      	lsls	r2, r3, #31
 8003d9c:	d438      	bmi.n	8003e10 <_printf_float+0x38c>
 8003d9e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003da2:	eba2 0903 	sub.w	r9, r2, r3
 8003da6:	eba2 020a 	sub.w	r2, r2, sl
 8003daa:	4591      	cmp	r9, r2
 8003dac:	bfa8      	it	ge
 8003dae:	4691      	movge	r9, r2
 8003db0:	f1b9 0f00 	cmp.w	r9, #0
 8003db4:	dc34      	bgt.n	8003e20 <_printf_float+0x39c>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dbe:	f104 0a1a 	add.w	sl, r4, #26
 8003dc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	eba3 0309 	sub.w	r3, r3, r9
 8003dcc:	4543      	cmp	r3, r8
 8003dce:	f77f af7a 	ble.w	8003cc6 <_printf_float+0x242>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4628      	mov	r0, r5
 8003dda:	47b8      	blx	r7
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f43f aeac 	beq.w	8003b3a <_printf_float+0xb6>
 8003de2:	f108 0801 	add.w	r8, r8, #1
 8003de6:	e7ec      	b.n	8003dc2 <_printf_float+0x33e>
 8003de8:	4613      	mov	r3, r2
 8003dea:	4631      	mov	r1, r6
 8003dec:	4642      	mov	r2, r8
 8003dee:	4628      	mov	r0, r5
 8003df0:	47b8      	blx	r7
 8003df2:	3001      	adds	r0, #1
 8003df4:	d1c0      	bne.n	8003d78 <_printf_float+0x2f4>
 8003df6:	e6a0      	b.n	8003b3a <_printf_float+0xb6>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e00:	47b8      	blx	r7
 8003e02:	3001      	adds	r0, #1
 8003e04:	f43f ae99 	beq.w	8003b3a <_printf_float+0xb6>
 8003e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e0a:	f10b 0b01 	add.w	fp, fp, #1
 8003e0e:	e7b9      	b.n	8003d84 <_printf_float+0x300>
 8003e10:	4631      	mov	r1, r6
 8003e12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e16:	4628      	mov	r0, r5
 8003e18:	47b8      	blx	r7
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d1bf      	bne.n	8003d9e <_printf_float+0x31a>
 8003e1e:	e68c      	b.n	8003b3a <_printf_float+0xb6>
 8003e20:	464b      	mov	r3, r9
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	eb08 020a 	add.w	r2, r8, sl
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d1c2      	bne.n	8003db6 <_printf_float+0x332>
 8003e30:	e683      	b.n	8003b3a <_printf_float+0xb6>
 8003e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e34:	2a01      	cmp	r2, #1
 8003e36:	dc01      	bgt.n	8003e3c <_printf_float+0x3b8>
 8003e38:	07db      	lsls	r3, r3, #31
 8003e3a:	d539      	bpl.n	8003eb0 <_printf_float+0x42c>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4642      	mov	r2, r8
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	f43f ae77 	beq.w	8003b3a <_printf_float+0xb6>
 8003e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e50:	4631      	mov	r1, r6
 8003e52:	4628      	mov	r0, r5
 8003e54:	47b8      	blx	r7
 8003e56:	3001      	adds	r0, #1
 8003e58:	f43f ae6f 	beq.w	8003b3a <_printf_float+0xb6>
 8003e5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e60:	2200      	movs	r2, #0
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003e68:	f7fc fd9e 	bl	80009a8 <__aeabi_dcmpeq>
 8003e6c:	b9d8      	cbnz	r0, 8003ea6 <_printf_float+0x422>
 8003e6e:	f109 33ff 	add.w	r3, r9, #4294967295
 8003e72:	f108 0201 	add.w	r2, r8, #1
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d10e      	bne.n	8003e9e <_printf_float+0x41a>
 8003e80:	e65b      	b.n	8003b3a <_printf_float+0xb6>
 8003e82:	2301      	movs	r3, #1
 8003e84:	464a      	mov	r2, r9
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f ae54 	beq.w	8003b3a <_printf_float+0xb6>
 8003e92:	f108 0801 	add.w	r8, r8, #1
 8003e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	4543      	cmp	r3, r8
 8003e9c:	dcf1      	bgt.n	8003e82 <_printf_float+0x3fe>
 8003e9e:	4653      	mov	r3, sl
 8003ea0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ea4:	e6de      	b.n	8003c64 <_printf_float+0x1e0>
 8003ea6:	f04f 0800 	mov.w	r8, #0
 8003eaa:	f104 091a 	add.w	r9, r4, #26
 8003eae:	e7f2      	b.n	8003e96 <_printf_float+0x412>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	e7df      	b.n	8003e76 <_printf_float+0x3f2>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	464a      	mov	r2, r9
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f ae3a 	beq.w	8003b3a <_printf_float+0xb6>
 8003ec6:	f108 0801 	add.w	r8, r8, #1
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ece:	1a5b      	subs	r3, r3, r1
 8003ed0:	4543      	cmp	r3, r8
 8003ed2:	dcf0      	bgt.n	8003eb6 <_printf_float+0x432>
 8003ed4:	e6fb      	b.n	8003cce <_printf_float+0x24a>
 8003ed6:	f04f 0800 	mov.w	r8, #0
 8003eda:	f104 0919 	add.w	r9, r4, #25
 8003ede:	e7f4      	b.n	8003eca <_printf_float+0x446>

08003ee0 <_printf_common>:
 8003ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	4699      	mov	r9, r3
 8003ee8:	688a      	ldr	r2, [r1, #8]
 8003eea:	690b      	ldr	r3, [r1, #16]
 8003eec:	4607      	mov	r7, r0
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	bfb8      	it	lt
 8003ef2:	4613      	movlt	r3, r2
 8003ef4:	6033      	str	r3, [r6, #0]
 8003ef6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003efa:	460c      	mov	r4, r1
 8003efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f00:	b10a      	cbz	r2, 8003f06 <_printf_common+0x26>
 8003f02:	3301      	adds	r3, #1
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	0699      	lsls	r1, r3, #26
 8003f0a:	bf42      	ittt	mi
 8003f0c:	6833      	ldrmi	r3, [r6, #0]
 8003f0e:	3302      	addmi	r3, #2
 8003f10:	6033      	strmi	r3, [r6, #0]
 8003f12:	6825      	ldr	r5, [r4, #0]
 8003f14:	f015 0506 	ands.w	r5, r5, #6
 8003f18:	d106      	bne.n	8003f28 <_printf_common+0x48>
 8003f1a:	f104 0a19 	add.w	sl, r4, #25
 8003f1e:	68e3      	ldr	r3, [r4, #12]
 8003f20:	6832      	ldr	r2, [r6, #0]
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	dc2b      	bgt.n	8003f80 <_printf_common+0xa0>
 8003f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f2c:	1e13      	subs	r3, r2, #0
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	bf18      	it	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	0692      	lsls	r2, r2, #26
 8003f36:	d430      	bmi.n	8003f9a <_printf_common+0xba>
 8003f38:	4649      	mov	r1, r9
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d023      	beq.n	8003f8e <_printf_common+0xae>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	6922      	ldr	r2, [r4, #16]
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	bf14      	ite	ne
 8003f52:	2500      	movne	r5, #0
 8003f54:	6833      	ldreq	r3, [r6, #0]
 8003f56:	f04f 0600 	mov.w	r6, #0
 8003f5a:	bf08      	it	eq
 8003f5c:	68e5      	ldreq	r5, [r4, #12]
 8003f5e:	f104 041a 	add.w	r4, r4, #26
 8003f62:	bf08      	it	eq
 8003f64:	1aed      	subeq	r5, r5, r3
 8003f66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f6a:	bf08      	it	eq
 8003f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bfc4      	itt	gt
 8003f74:	1a9b      	subgt	r3, r3, r2
 8003f76:	18ed      	addgt	r5, r5, r3
 8003f78:	42b5      	cmp	r5, r6
 8003f7a:	d11a      	bne.n	8003fb2 <_printf_common+0xd2>
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e008      	b.n	8003f92 <_printf_common+0xb2>
 8003f80:	2301      	movs	r3, #1
 8003f82:	4652      	mov	r2, sl
 8003f84:	4649      	mov	r1, r9
 8003f86:	4638      	mov	r0, r7
 8003f88:	47c0      	blx	r8
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d103      	bne.n	8003f96 <_printf_common+0xb6>
 8003f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f96:	3501      	adds	r5, #1
 8003f98:	e7c1      	b.n	8003f1e <_printf_common+0x3e>
 8003f9a:	2030      	movs	r0, #48	; 0x30
 8003f9c:	18e1      	adds	r1, r4, r3
 8003f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa8:	4422      	add	r2, r4
 8003faa:	3302      	adds	r3, #2
 8003fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb0:	e7c2      	b.n	8003f38 <_printf_common+0x58>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	4638      	mov	r0, r7
 8003fba:	47c0      	blx	r8
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d0e6      	beq.n	8003f8e <_printf_common+0xae>
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	e7d9      	b.n	8003f78 <_printf_common+0x98>

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	4691      	mov	r9, r2
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4680      	mov	r8, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d5 	beq.w	8004190 <_printf_i+0x1cc>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80c1 	beq.w	800416e <_printf_i+0x1aa>
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	; (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	08004177 	.word	0x08004177
 8004034:	0800409d 	.word	0x0800409d
 8004038:	08004131 	.word	0x08004131
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	08004199 	.word	0x08004199
 8004048:	08003fed 	.word	0x08003fed
 800404c:	0800409d 	.word	0x0800409d
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004139 	.word	0x08004139
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e0a0      	b.n	80041b2 <_printf_i+0x1ee>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	682b      	ldr	r3, [r5, #0]
 8004074:	0607      	lsls	r7, r0, #24
 8004076:	f103 0104 	add.w	r1, r3, #4
 800407a:	6029      	str	r1, [r5, #0]
 800407c:	d501      	bpl.n	8004082 <_printf_i+0xbe>
 800407e:	681e      	ldr	r6, [r3, #0]
 8004080:	e003      	b.n	800408a <_printf_i+0xc6>
 8004082:	0646      	lsls	r6, r0, #25
 8004084:	d5fb      	bpl.n	800407e <_printf_i+0xba>
 8004086:	f9b3 6000 	ldrsh.w	r6, [r3]
 800408a:	2e00      	cmp	r6, #0
 800408c:	da03      	bge.n	8004096 <_printf_i+0xd2>
 800408e:	232d      	movs	r3, #45	; 0x2d
 8004090:	4276      	negs	r6, r6
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	230a      	movs	r3, #10
 8004098:	4859      	ldr	r0, [pc, #356]	; (8004200 <_printf_i+0x23c>)
 800409a:	e012      	b.n	80040c2 <_printf_i+0xfe>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	6029      	str	r1, [r5, #0]
 80040a4:	0605      	lsls	r5, r0, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xe8>
 80040a8:	681e      	ldr	r6, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_printf_i+0xee>
 80040ac:	0641      	lsls	r1, r0, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xe4>
 80040b0:	881e      	ldrh	r6, [r3, #0]
 80040b2:	2f6f      	cmp	r7, #111	; 0x6f
 80040b4:	bf0c      	ite	eq
 80040b6:	2308      	moveq	r3, #8
 80040b8:	230a      	movne	r3, #10
 80040ba:	4851      	ldr	r0, [pc, #324]	; (8004200 <_printf_i+0x23c>)
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c2:	6865      	ldr	r5, [r4, #4]
 80040c4:	2d00      	cmp	r5, #0
 80040c6:	bfa8      	it	ge
 80040c8:	6821      	ldrge	r1, [r4, #0]
 80040ca:	60a5      	str	r5, [r4, #8]
 80040cc:	bfa4      	itt	ge
 80040ce:	f021 0104 	bicge.w	r1, r1, #4
 80040d2:	6021      	strge	r1, [r4, #0]
 80040d4:	b90e      	cbnz	r6, 80040da <_printf_i+0x116>
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	d04b      	beq.n	8004172 <_printf_i+0x1ae>
 80040da:	4615      	mov	r5, r2
 80040dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e0:	fb03 6711 	mls	r7, r3, r1, r6
 80040e4:	5dc7      	ldrb	r7, [r0, r7]
 80040e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ea:	4637      	mov	r7, r6
 80040ec:	42bb      	cmp	r3, r7
 80040ee:	460e      	mov	r6, r1
 80040f0:	d9f4      	bls.n	80040dc <_printf_i+0x118>
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d10b      	bne.n	800410e <_printf_i+0x14a>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	07de      	lsls	r6, r3, #31
 80040fa:	d508      	bpl.n	800410e <_printf_i+0x14a>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	6861      	ldr	r1, [r4, #4]
 8004100:	4299      	cmp	r1, r3
 8004102:	bfde      	ittt	le
 8004104:	2330      	movle	r3, #48	; 0x30
 8004106:	f805 3c01 	strble.w	r3, [r5, #-1]
 800410a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800410e:	1b52      	subs	r2, r2, r5
 8004110:	6122      	str	r2, [r4, #16]
 8004112:	464b      	mov	r3, r9
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f8cd a000 	str.w	sl, [sp]
 800411c:	aa03      	add	r2, sp, #12
 800411e:	f7ff fedf 	bl	8003ee0 <_printf_common>
 8004122:	3001      	adds	r0, #1
 8004124:	d14a      	bne.n	80041bc <_printf_i+0x1f8>
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	b004      	add	sp, #16
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	2778      	movs	r7, #120	; 0x78
 800413a:	4832      	ldr	r0, [pc, #200]	; (8004204 <_printf_i+0x240>)
 800413c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	6829      	ldr	r1, [r5, #0]
 8004144:	061f      	lsls	r7, r3, #24
 8004146:	f851 6b04 	ldr.w	r6, [r1], #4
 800414a:	d402      	bmi.n	8004152 <_printf_i+0x18e>
 800414c:	065f      	lsls	r7, r3, #25
 800414e:	bf48      	it	mi
 8004150:	b2b6      	uxthmi	r6, r6
 8004152:	07df      	lsls	r7, r3, #31
 8004154:	bf48      	it	mi
 8004156:	f043 0320 	orrmi.w	r3, r3, #32
 800415a:	6029      	str	r1, [r5, #0]
 800415c:	bf48      	it	mi
 800415e:	6023      	strmi	r3, [r4, #0]
 8004160:	b91e      	cbnz	r6, 800416a <_printf_i+0x1a6>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	f023 0320 	bic.w	r3, r3, #32
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	2310      	movs	r3, #16
 800416c:	e7a6      	b.n	80040bc <_printf_i+0xf8>
 800416e:	4824      	ldr	r0, [pc, #144]	; (8004200 <_printf_i+0x23c>)
 8004170:	e7e4      	b.n	800413c <_printf_i+0x178>
 8004172:	4615      	mov	r5, r2
 8004174:	e7bd      	b.n	80040f2 <_printf_i+0x12e>
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	6826      	ldr	r6, [r4, #0]
 800417a:	1d18      	adds	r0, r3, #4
 800417c:	6961      	ldr	r1, [r4, #20]
 800417e:	6028      	str	r0, [r5, #0]
 8004180:	0635      	lsls	r5, r6, #24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0x1c6>
 8004186:	6019      	str	r1, [r3, #0]
 8004188:	e002      	b.n	8004190 <_printf_i+0x1cc>
 800418a:	0670      	lsls	r0, r6, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0x1c2>
 800418e:	8019      	strh	r1, [r3, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	4615      	mov	r5, r2
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	e7bc      	b.n	8004112 <_printf_i+0x14e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	2100      	movs	r1, #0
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	602a      	str	r2, [r5, #0]
 80041a0:	681d      	ldr	r5, [r3, #0]
 80041a2:	6862      	ldr	r2, [r4, #4]
 80041a4:	4628      	mov	r0, r5
 80041a6:	f000 faa3 	bl	80046f0 <memchr>
 80041aa:	b108      	cbz	r0, 80041b0 <_printf_i+0x1ec>
 80041ac:	1b40      	subs	r0, r0, r5
 80041ae:	6060      	str	r0, [r4, #4]
 80041b0:	6863      	ldr	r3, [r4, #4]
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	2300      	movs	r3, #0
 80041b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ba:	e7aa      	b.n	8004112 <_printf_i+0x14e>
 80041bc:	462a      	mov	r2, r5
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	47d0      	blx	sl
 80041c6:	3001      	adds	r0, #1
 80041c8:	d0ad      	beq.n	8004126 <_printf_i+0x162>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	079b      	lsls	r3, r3, #30
 80041ce:	d413      	bmi.n	80041f8 <_printf_i+0x234>
 80041d0:	68e0      	ldr	r0, [r4, #12]
 80041d2:	9b03      	ldr	r3, [sp, #12]
 80041d4:	4298      	cmp	r0, r3
 80041d6:	bfb8      	it	lt
 80041d8:	4618      	movlt	r0, r3
 80041da:	e7a6      	b.n	800412a <_printf_i+0x166>
 80041dc:	2301      	movs	r3, #1
 80041de:	4632      	mov	r2, r6
 80041e0:	4649      	mov	r1, r9
 80041e2:	4640      	mov	r0, r8
 80041e4:	47d0      	blx	sl
 80041e6:	3001      	adds	r0, #1
 80041e8:	d09d      	beq.n	8004126 <_printf_i+0x162>
 80041ea:	3501      	adds	r5, #1
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	9903      	ldr	r1, [sp, #12]
 80041f0:	1a5b      	subs	r3, r3, r1
 80041f2:	42ab      	cmp	r3, r5
 80041f4:	dcf2      	bgt.n	80041dc <_printf_i+0x218>
 80041f6:	e7eb      	b.n	80041d0 <_printf_i+0x20c>
 80041f8:	2500      	movs	r5, #0
 80041fa:	f104 0619 	add.w	r6, r4, #25
 80041fe:	e7f5      	b.n	80041ec <_printf_i+0x228>
 8004200:	08007274 	.word	0x08007274
 8004204:	08007285 	.word	0x08007285

08004208 <std>:
 8004208:	2300      	movs	r3, #0
 800420a:	b510      	push	{r4, lr}
 800420c:	4604      	mov	r4, r0
 800420e:	e9c0 3300 	strd	r3, r3, [r0]
 8004212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004216:	6083      	str	r3, [r0, #8]
 8004218:	8181      	strh	r1, [r0, #12]
 800421a:	6643      	str	r3, [r0, #100]	; 0x64
 800421c:	81c2      	strh	r2, [r0, #14]
 800421e:	6183      	str	r3, [r0, #24]
 8004220:	4619      	mov	r1, r3
 8004222:	2208      	movs	r2, #8
 8004224:	305c      	adds	r0, #92	; 0x5c
 8004226:	f000 f9e5 	bl	80045f4 <memset>
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <std+0x38>)
 800422c:	6224      	str	r4, [r4, #32]
 800422e:	6263      	str	r3, [r4, #36]	; 0x24
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <std+0x3c>)
 8004232:	62a3      	str	r3, [r4, #40]	; 0x28
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <std+0x40>)
 8004236:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <std+0x44>)
 800423a:	6323      	str	r3, [r4, #48]	; 0x30
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	08004445 	.word	0x08004445
 8004244:	08004467 	.word	0x08004467
 8004248:	0800449f 	.word	0x0800449f
 800424c:	080044c3 	.word	0x080044c3

08004250 <stdio_exit_handler>:
 8004250:	4a02      	ldr	r2, [pc, #8]	; (800425c <stdio_exit_handler+0xc>)
 8004252:	4903      	ldr	r1, [pc, #12]	; (8004260 <stdio_exit_handler+0x10>)
 8004254:	4803      	ldr	r0, [pc, #12]	; (8004264 <stdio_exit_handler+0x14>)
 8004256:	f000 b869 	b.w	800432c <_fwalk_sglue>
 800425a:	bf00      	nop
 800425c:	2000000c 	.word	0x2000000c
 8004260:	08006059 	.word	0x08006059
 8004264:	20000018 	.word	0x20000018

08004268 <cleanup_stdio>:
 8004268:	6841      	ldr	r1, [r0, #4]
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <cleanup_stdio+0x34>)
 800426c:	b510      	push	{r4, lr}
 800426e:	4299      	cmp	r1, r3
 8004270:	4604      	mov	r4, r0
 8004272:	d001      	beq.n	8004278 <cleanup_stdio+0x10>
 8004274:	f001 fef0 	bl	8006058 <_fflush_r>
 8004278:	68a1      	ldr	r1, [r4, #8]
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <cleanup_stdio+0x38>)
 800427c:	4299      	cmp	r1, r3
 800427e:	d002      	beq.n	8004286 <cleanup_stdio+0x1e>
 8004280:	4620      	mov	r0, r4
 8004282:	f001 fee9 	bl	8006058 <_fflush_r>
 8004286:	68e1      	ldr	r1, [r4, #12]
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <cleanup_stdio+0x3c>)
 800428a:	4299      	cmp	r1, r3
 800428c:	d004      	beq.n	8004298 <cleanup_stdio+0x30>
 800428e:	4620      	mov	r0, r4
 8004290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004294:	f001 bee0 	b.w	8006058 <_fflush_r>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	20000280 	.word	0x20000280
 80042a0:	200002e8 	.word	0x200002e8
 80042a4:	20000350 	.word	0x20000350

080042a8 <global_stdio_init.part.0>:
 80042a8:	b510      	push	{r4, lr}
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <global_stdio_init.part.0+0x30>)
 80042ac:	4c0b      	ldr	r4, [pc, #44]	; (80042dc <global_stdio_init.part.0+0x34>)
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <global_stdio_init.part.0+0x38>)
 80042b0:	4620      	mov	r0, r4
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	2104      	movs	r1, #4
 80042b6:	2200      	movs	r2, #0
 80042b8:	f7ff ffa6 	bl	8004208 <std>
 80042bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042c0:	2201      	movs	r2, #1
 80042c2:	2109      	movs	r1, #9
 80042c4:	f7ff ffa0 	bl	8004208 <std>
 80042c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042cc:	2202      	movs	r2, #2
 80042ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d2:	2112      	movs	r1, #18
 80042d4:	f7ff bf98 	b.w	8004208 <std>
 80042d8:	200003b8 	.word	0x200003b8
 80042dc:	20000280 	.word	0x20000280
 80042e0:	08004251 	.word	0x08004251

080042e4 <__sfp_lock_acquire>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__sfp_lock_acquire+0x8>)
 80042e6:	f000 ba01 	b.w	80046ec <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	200003c1 	.word	0x200003c1

080042f0 <__sfp_lock_release>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__sfp_lock_release+0x8>)
 80042f2:	f000 b9fc 	b.w	80046ee <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	200003c1 	.word	0x200003c1

080042fc <__sinit>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4604      	mov	r4, r0
 8004300:	f7ff fff0 	bl	80042e4 <__sfp_lock_acquire>
 8004304:	6a23      	ldr	r3, [r4, #32]
 8004306:	b11b      	cbz	r3, 8004310 <__sinit+0x14>
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	f7ff bff0 	b.w	80042f0 <__sfp_lock_release>
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <__sinit+0x28>)
 8004312:	6223      	str	r3, [r4, #32]
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__sinit+0x2c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f5      	bne.n	8004308 <__sinit+0xc>
 800431c:	f7ff ffc4 	bl	80042a8 <global_stdio_init.part.0>
 8004320:	e7f2      	b.n	8004308 <__sinit+0xc>
 8004322:	bf00      	nop
 8004324:	08004269 	.word	0x08004269
 8004328:	200003b8 	.word	0x200003b8

0800432c <_fwalk_sglue>:
 800432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004330:	4607      	mov	r7, r0
 8004332:	4688      	mov	r8, r1
 8004334:	4614      	mov	r4, r2
 8004336:	2600      	movs	r6, #0
 8004338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800433c:	f1b9 0901 	subs.w	r9, r9, #1
 8004340:	d505      	bpl.n	800434e <_fwalk_sglue+0x22>
 8004342:	6824      	ldr	r4, [r4, #0]
 8004344:	2c00      	cmp	r4, #0
 8004346:	d1f7      	bne.n	8004338 <_fwalk_sglue+0xc>
 8004348:	4630      	mov	r0, r6
 800434a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800434e:	89ab      	ldrh	r3, [r5, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d907      	bls.n	8004364 <_fwalk_sglue+0x38>
 8004354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004358:	3301      	adds	r3, #1
 800435a:	d003      	beq.n	8004364 <_fwalk_sglue+0x38>
 800435c:	4629      	mov	r1, r5
 800435e:	4638      	mov	r0, r7
 8004360:	47c0      	blx	r8
 8004362:	4306      	orrs	r6, r0
 8004364:	3568      	adds	r5, #104	; 0x68
 8004366:	e7e9      	b.n	800433c <_fwalk_sglue+0x10>

08004368 <iprintf>:
 8004368:	b40f      	push	{r0, r1, r2, r3}
 800436a:	b507      	push	{r0, r1, r2, lr}
 800436c:	4906      	ldr	r1, [pc, #24]	; (8004388 <iprintf+0x20>)
 800436e:	ab04      	add	r3, sp, #16
 8004370:	6808      	ldr	r0, [r1, #0]
 8004372:	f853 2b04 	ldr.w	r2, [r3], #4
 8004376:	6881      	ldr	r1, [r0, #8]
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	f001 fcd1 	bl	8005d20 <_vfiprintf_r>
 800437e:	b003      	add	sp, #12
 8004380:	f85d eb04 	ldr.w	lr, [sp], #4
 8004384:	b004      	add	sp, #16
 8004386:	4770      	bx	lr
 8004388:	20000064 	.word	0x20000064

0800438c <_puts_r>:
 800438c:	6a03      	ldr	r3, [r0, #32]
 800438e:	b570      	push	{r4, r5, r6, lr}
 8004390:	4605      	mov	r5, r0
 8004392:	460e      	mov	r6, r1
 8004394:	6884      	ldr	r4, [r0, #8]
 8004396:	b90b      	cbnz	r3, 800439c <_puts_r+0x10>
 8004398:	f7ff ffb0 	bl	80042fc <__sinit>
 800439c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439e:	07db      	lsls	r3, r3, #31
 80043a0:	d405      	bmi.n	80043ae <_puts_r+0x22>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	0598      	lsls	r0, r3, #22
 80043a6:	d402      	bmi.n	80043ae <_puts_r+0x22>
 80043a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043aa:	f000 f99f 	bl	80046ec <__retarget_lock_acquire_recursive>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	0719      	lsls	r1, r3, #28
 80043b2:	d513      	bpl.n	80043dc <_puts_r+0x50>
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	b18b      	cbz	r3, 80043dc <_puts_r+0x50>
 80043b8:	3e01      	subs	r6, #1
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043c0:	3b01      	subs	r3, #1
 80043c2:	60a3      	str	r3, [r4, #8]
 80043c4:	b9e9      	cbnz	r1, 8004402 <_puts_r+0x76>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da2e      	bge.n	8004428 <_puts_r+0x9c>
 80043ca:	4622      	mov	r2, r4
 80043cc:	210a      	movs	r1, #10
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 f87b 	bl	80044ca <__swbuf_r>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d007      	beq.n	80043e8 <_puts_r+0x5c>
 80043d8:	250a      	movs	r5, #10
 80043da:	e007      	b.n	80043ec <_puts_r+0x60>
 80043dc:	4621      	mov	r1, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 f8b0 	bl	8004544 <__swsetup_r>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0e7      	beq.n	80043b8 <_puts_r+0x2c>
 80043e8:	f04f 35ff 	mov.w	r5, #4294967295
 80043ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ee:	07da      	lsls	r2, r3, #31
 80043f0:	d405      	bmi.n	80043fe <_puts_r+0x72>
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	059b      	lsls	r3, r3, #22
 80043f6:	d402      	bmi.n	80043fe <_puts_r+0x72>
 80043f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043fa:	f000 f978 	bl	80046ee <__retarget_lock_release_recursive>
 80043fe:	4628      	mov	r0, r5
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	2b00      	cmp	r3, #0
 8004404:	da04      	bge.n	8004410 <_puts_r+0x84>
 8004406:	69a2      	ldr	r2, [r4, #24]
 8004408:	429a      	cmp	r2, r3
 800440a:	dc06      	bgt.n	800441a <_puts_r+0x8e>
 800440c:	290a      	cmp	r1, #10
 800440e:	d004      	beq.n	800441a <_puts_r+0x8e>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	6022      	str	r2, [r4, #0]
 8004416:	7019      	strb	r1, [r3, #0]
 8004418:	e7cf      	b.n	80043ba <_puts_r+0x2e>
 800441a:	4622      	mov	r2, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f854 	bl	80044ca <__swbuf_r>
 8004422:	3001      	adds	r0, #1
 8004424:	d1c9      	bne.n	80043ba <_puts_r+0x2e>
 8004426:	e7df      	b.n	80043e8 <_puts_r+0x5c>
 8004428:	250a      	movs	r5, #10
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	701d      	strb	r5, [r3, #0]
 8004432:	e7db      	b.n	80043ec <_puts_r+0x60>

08004434 <puts>:
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <puts+0xc>)
 8004436:	4601      	mov	r1, r0
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	f7ff bfa7 	b.w	800438c <_puts_r>
 800443e:	bf00      	nop
 8004440:	20000064 	.word	0x20000064

08004444 <__sread>:
 8004444:	b510      	push	{r4, lr}
 8004446:	460c      	mov	r4, r1
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	f000 f900 	bl	8004650 <_read_r>
 8004450:	2800      	cmp	r0, #0
 8004452:	bfab      	itete	ge
 8004454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004456:	89a3      	ldrhlt	r3, [r4, #12]
 8004458:	181b      	addge	r3, r3, r0
 800445a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800445e:	bfac      	ite	ge
 8004460:	6563      	strge	r3, [r4, #84]	; 0x54
 8004462:	81a3      	strhlt	r3, [r4, #12]
 8004464:	bd10      	pop	{r4, pc}

08004466 <__swrite>:
 8004466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	461f      	mov	r7, r3
 800446c:	898b      	ldrh	r3, [r1, #12]
 800446e:	4605      	mov	r5, r0
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	460c      	mov	r4, r1
 8004474:	4616      	mov	r6, r2
 8004476:	d505      	bpl.n	8004484 <__swrite+0x1e>
 8004478:	2302      	movs	r3, #2
 800447a:	2200      	movs	r2, #0
 800447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004480:	f000 f8d4 	bl	800462c <_lseek_r>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	4632      	mov	r2, r6
 8004488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	4628      	mov	r0, r5
 8004490:	463b      	mov	r3, r7
 8004492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449a:	f000 b8eb 	b.w	8004674 <_write_r>

0800449e <__sseek>:
 800449e:	b510      	push	{r4, lr}
 80044a0:	460c      	mov	r4, r1
 80044a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a6:	f000 f8c1 	bl	800462c <_lseek_r>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	bf15      	itete	ne
 80044b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80044b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044ba:	81a3      	strheq	r3, [r4, #12]
 80044bc:	bf18      	it	ne
 80044be:	81a3      	strhne	r3, [r4, #12]
 80044c0:	bd10      	pop	{r4, pc}

080044c2 <__sclose>:
 80044c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c6:	f000 b8a1 	b.w	800460c <_close_r>

080044ca <__swbuf_r>:
 80044ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044cc:	460e      	mov	r6, r1
 80044ce:	4614      	mov	r4, r2
 80044d0:	4605      	mov	r5, r0
 80044d2:	b118      	cbz	r0, 80044dc <__swbuf_r+0x12>
 80044d4:	6a03      	ldr	r3, [r0, #32]
 80044d6:	b90b      	cbnz	r3, 80044dc <__swbuf_r+0x12>
 80044d8:	f7ff ff10 	bl	80042fc <__sinit>
 80044dc:	69a3      	ldr	r3, [r4, #24]
 80044de:	60a3      	str	r3, [r4, #8]
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	071a      	lsls	r2, r3, #28
 80044e4:	d525      	bpl.n	8004532 <__swbuf_r+0x68>
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	b31b      	cbz	r3, 8004532 <__swbuf_r+0x68>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	6922      	ldr	r2, [r4, #16]
 80044ee:	b2f6      	uxtb	r6, r6
 80044f0:	1a98      	subs	r0, r3, r2
 80044f2:	6963      	ldr	r3, [r4, #20]
 80044f4:	4637      	mov	r7, r6
 80044f6:	4283      	cmp	r3, r0
 80044f8:	dc04      	bgt.n	8004504 <__swbuf_r+0x3a>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f001 fdab 	bl	8006058 <_fflush_r>
 8004502:	b9e0      	cbnz	r0, 800453e <__swbuf_r+0x74>
 8004504:	68a3      	ldr	r3, [r4, #8]
 8004506:	3b01      	subs	r3, #1
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	701e      	strb	r6, [r3, #0]
 8004512:	6962      	ldr	r2, [r4, #20]
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	429a      	cmp	r2, r3
 8004518:	d004      	beq.n	8004524 <__swbuf_r+0x5a>
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	07db      	lsls	r3, r3, #31
 800451e:	d506      	bpl.n	800452e <__swbuf_r+0x64>
 8004520:	2e0a      	cmp	r6, #10
 8004522:	d104      	bne.n	800452e <__swbuf_r+0x64>
 8004524:	4621      	mov	r1, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f001 fd96 	bl	8006058 <_fflush_r>
 800452c:	b938      	cbnz	r0, 800453e <__swbuf_r+0x74>
 800452e:	4638      	mov	r0, r7
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 f805 	bl	8004544 <__swsetup_r>
 800453a:	2800      	cmp	r0, #0
 800453c:	d0d5      	beq.n	80044ea <__swbuf_r+0x20>
 800453e:	f04f 37ff 	mov.w	r7, #4294967295
 8004542:	e7f4      	b.n	800452e <__swbuf_r+0x64>

08004544 <__swsetup_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <__swsetup_r+0xac>)
 8004548:	4605      	mov	r5, r0
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	460c      	mov	r4, r1
 800454e:	b118      	cbz	r0, 8004558 <__swsetup_r+0x14>
 8004550:	6a03      	ldr	r3, [r0, #32]
 8004552:	b90b      	cbnz	r3, 8004558 <__swsetup_r+0x14>
 8004554:	f7ff fed2 	bl	80042fc <__sinit>
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800455e:	0718      	lsls	r0, r3, #28
 8004560:	d422      	bmi.n	80045a8 <__swsetup_r+0x64>
 8004562:	06d9      	lsls	r1, r3, #27
 8004564:	d407      	bmi.n	8004576 <__swsetup_r+0x32>
 8004566:	2309      	movs	r3, #9
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800456e:	f04f 30ff 	mov.w	r0, #4294967295
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	e034      	b.n	80045e0 <__swsetup_r+0x9c>
 8004576:	0758      	lsls	r0, r3, #29
 8004578:	d512      	bpl.n	80045a0 <__swsetup_r+0x5c>
 800457a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800457c:	b141      	cbz	r1, 8004590 <__swsetup_r+0x4c>
 800457e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004582:	4299      	cmp	r1, r3
 8004584:	d002      	beq.n	800458c <__swsetup_r+0x48>
 8004586:	4628      	mov	r0, r5
 8004588:	f000 ff2e 	bl	80053e8 <_free_r>
 800458c:	2300      	movs	r3, #0
 800458e:	6363      	str	r3, [r4, #52]	; 0x34
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	2300      	movs	r3, #0
 800459a:	6063      	str	r3, [r4, #4]
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f043 0308 	orr.w	r3, r3, #8
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	6923      	ldr	r3, [r4, #16]
 80045aa:	b94b      	cbnz	r3, 80045c0 <__swsetup_r+0x7c>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b6:	d003      	beq.n	80045c0 <__swsetup_r+0x7c>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4628      	mov	r0, r5
 80045bc:	f001 fd99 	bl	80060f2 <__smakebuf_r>
 80045c0:	89a0      	ldrh	r0, [r4, #12]
 80045c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c6:	f010 0301 	ands.w	r3, r0, #1
 80045ca:	d00a      	beq.n	80045e2 <__swsetup_r+0x9e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6963      	ldr	r3, [r4, #20]
 80045d2:	425b      	negs	r3, r3
 80045d4:	61a3      	str	r3, [r4, #24]
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	b943      	cbnz	r3, 80045ec <__swsetup_r+0xa8>
 80045da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045de:	d1c4      	bne.n	800456a <__swsetup_r+0x26>
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	0781      	lsls	r1, r0, #30
 80045e4:	bf58      	it	pl
 80045e6:	6963      	ldrpl	r3, [r4, #20]
 80045e8:	60a3      	str	r3, [r4, #8]
 80045ea:	e7f4      	b.n	80045d6 <__swsetup_r+0x92>
 80045ec:	2000      	movs	r0, #0
 80045ee:	e7f7      	b.n	80045e0 <__swsetup_r+0x9c>
 80045f0:	20000064 	.word	0x20000064

080045f4 <memset>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	4402      	add	r2, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <_localeconv_r>:
 8004604:	4800      	ldr	r0, [pc, #0]	; (8004608 <_localeconv_r+0x4>)
 8004606:	4770      	bx	lr
 8004608:	20000158 	.word	0x20000158

0800460c <_close_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	; (8004628 <_close_r+0x1c>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fd f81e 	bl	8001658 <_close>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_close_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_close_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	200003bc 	.word	0x200003bc

0800462c <_lseek_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4604      	mov	r4, r0
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	2200      	movs	r2, #0
 8004636:	4d05      	ldr	r5, [pc, #20]	; (800464c <_lseek_r+0x20>)
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fd f830 	bl	80016a0 <_lseek>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_lseek_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_lseek_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	200003bc 	.word	0x200003bc

08004650 <_read_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	2200      	movs	r2, #0
 800465a:	4d05      	ldr	r5, [pc, #20]	; (8004670 <_read_r+0x20>)
 800465c:	602a      	str	r2, [r5, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	f7fc ffdd 	bl	800161e <_read>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_read_r+0x1e>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_read_r+0x1e>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	200003bc 	.word	0x200003bc

08004674 <_write_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4604      	mov	r4, r0
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	2200      	movs	r2, #0
 800467e:	4d05      	ldr	r5, [pc, #20]	; (8004694 <_write_r+0x20>)
 8004680:	602a      	str	r2, [r5, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	f7fc fd70 	bl	8001168 <_write>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_write_r+0x1e>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_write_r+0x1e>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	200003bc 	.word	0x200003bc

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	; (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000064 	.word	0x20000064

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	2600      	movs	r6, #0
 80046a8:	4d0c      	ldr	r5, [pc, #48]	; (80046dc <__libc_init_array+0x38>)
 80046aa:	4c0d      	ldr	r4, [pc, #52]	; (80046e0 <__libc_init_array+0x3c>)
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	f002 fd52 	bl	800715c <_init>
 80046b8:	2600      	movs	r6, #0
 80046ba:	4d0a      	ldr	r5, [pc, #40]	; (80046e4 <__libc_init_array+0x40>)
 80046bc:	4c0a      	ldr	r4, [pc, #40]	; (80046e8 <__libc_init_array+0x44>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08007608 	.word	0x08007608
 80046e0:	08007608 	.word	0x08007608
 80046e4:	08007608 	.word	0x08007608
 80046e8:	0800760c 	.word	0x0800760c

080046ec <__retarget_lock_acquire_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_release_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <memchr>:
 80046f0:	4603      	mov	r3, r0
 80046f2:	b510      	push	{r4, lr}
 80046f4:	b2c9      	uxtb	r1, r1
 80046f6:	4402      	add	r2, r0
 80046f8:	4293      	cmp	r3, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	d101      	bne.n	8004702 <memchr+0x12>
 80046fe:	2000      	movs	r0, #0
 8004700:	e003      	b.n	800470a <memchr+0x1a>
 8004702:	7804      	ldrb	r4, [r0, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	428c      	cmp	r4, r1
 8004708:	d1f6      	bne.n	80046f8 <memchr+0x8>
 800470a:	bd10      	pop	{r4, pc}

0800470c <quorem>:
 800470c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	6903      	ldr	r3, [r0, #16]
 8004712:	690c      	ldr	r4, [r1, #16]
 8004714:	4607      	mov	r7, r0
 8004716:	42a3      	cmp	r3, r4
 8004718:	db7f      	blt.n	800481a <quorem+0x10e>
 800471a:	3c01      	subs	r4, #1
 800471c:	f100 0514 	add.w	r5, r0, #20
 8004720:	f101 0814 	add.w	r8, r1, #20
 8004724:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800472e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004732:	3301      	adds	r3, #1
 8004734:	429a      	cmp	r2, r3
 8004736:	fbb2 f6f3 	udiv	r6, r2, r3
 800473a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800473e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004742:	d331      	bcc.n	80047a8 <quorem+0x9c>
 8004744:	f04f 0e00 	mov.w	lr, #0
 8004748:	4640      	mov	r0, r8
 800474a:	46ac      	mov	ip, r5
 800474c:	46f2      	mov	sl, lr
 800474e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004752:	b293      	uxth	r3, r2
 8004754:	fb06 e303 	mla	r3, r6, r3, lr
 8004758:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800475c:	0c1a      	lsrs	r2, r3, #16
 800475e:	b29b      	uxth	r3, r3
 8004760:	fb06 220e 	mla	r2, r6, lr, r2
 8004764:	ebaa 0303 	sub.w	r3, sl, r3
 8004768:	f8dc a000 	ldr.w	sl, [ip]
 800476c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004770:	fa1f fa8a 	uxth.w	sl, sl
 8004774:	4453      	add	r3, sl
 8004776:	f8dc a000 	ldr.w	sl, [ip]
 800477a:	b292      	uxth	r2, r2
 800477c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004784:	b29b      	uxth	r3, r3
 8004786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800478a:	4581      	cmp	r9, r0
 800478c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004790:	f84c 3b04 	str.w	r3, [ip], #4
 8004794:	d2db      	bcs.n	800474e <quorem+0x42>
 8004796:	f855 300b 	ldr.w	r3, [r5, fp]
 800479a:	b92b      	cbnz	r3, 80047a8 <quorem+0x9c>
 800479c:	9b01      	ldr	r3, [sp, #4]
 800479e:	3b04      	subs	r3, #4
 80047a0:	429d      	cmp	r5, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	d32d      	bcc.n	8004802 <quorem+0xf6>
 80047a6:	613c      	str	r4, [r7, #16]
 80047a8:	4638      	mov	r0, r7
 80047aa:	f001 f993 	bl	8005ad4 <__mcmp>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	db23      	blt.n	80047fa <quorem+0xee>
 80047b2:	4629      	mov	r1, r5
 80047b4:	2000      	movs	r0, #0
 80047b6:	3601      	adds	r6, #1
 80047b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80047bc:	f8d1 c000 	ldr.w	ip, [r1]
 80047c0:	b293      	uxth	r3, r2
 80047c2:	1ac3      	subs	r3, r0, r3
 80047c4:	0c12      	lsrs	r2, r2, #16
 80047c6:	fa1f f08c 	uxth.w	r0, ip
 80047ca:	4403      	add	r3, r0
 80047cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80047d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047da:	45c1      	cmp	r9, r8
 80047dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047e0:	f841 3b04 	str.w	r3, [r1], #4
 80047e4:	d2e8      	bcs.n	80047b8 <quorem+0xac>
 80047e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ee:	b922      	cbnz	r2, 80047fa <quorem+0xee>
 80047f0:	3b04      	subs	r3, #4
 80047f2:	429d      	cmp	r5, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	d30a      	bcc.n	800480e <quorem+0x102>
 80047f8:	613c      	str	r4, [r7, #16]
 80047fa:	4630      	mov	r0, r6
 80047fc:	b003      	add	sp, #12
 80047fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	3b04      	subs	r3, #4
 8004806:	2a00      	cmp	r2, #0
 8004808:	d1cd      	bne.n	80047a6 <quorem+0x9a>
 800480a:	3c01      	subs	r4, #1
 800480c:	e7c8      	b.n	80047a0 <quorem+0x94>
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	3b04      	subs	r3, #4
 8004812:	2a00      	cmp	r2, #0
 8004814:	d1f0      	bne.n	80047f8 <quorem+0xec>
 8004816:	3c01      	subs	r4, #1
 8004818:	e7eb      	b.n	80047f2 <quorem+0xe6>
 800481a:	2000      	movs	r0, #0
 800481c:	e7ee      	b.n	80047fc <quorem+0xf0>
	...

08004820 <_dtoa_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	4616      	mov	r6, r2
 8004826:	461f      	mov	r7, r3
 8004828:	69c4      	ldr	r4, [r0, #28]
 800482a:	b099      	sub	sp, #100	; 0x64
 800482c:	4605      	mov	r5, r0
 800482e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004832:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004836:	b974      	cbnz	r4, 8004856 <_dtoa_r+0x36>
 8004838:	2010      	movs	r0, #16
 800483a:	f000 fe1d 	bl	8005478 <malloc>
 800483e:	4602      	mov	r2, r0
 8004840:	61e8      	str	r0, [r5, #28]
 8004842:	b920      	cbnz	r0, 800484e <_dtoa_r+0x2e>
 8004844:	21ef      	movs	r1, #239	; 0xef
 8004846:	4bac      	ldr	r3, [pc, #688]	; (8004af8 <_dtoa_r+0x2d8>)
 8004848:	48ac      	ldr	r0, [pc, #688]	; (8004afc <_dtoa_r+0x2dc>)
 800484a:	f001 fccf 	bl	80061ec <__assert_func>
 800484e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004852:	6004      	str	r4, [r0, #0]
 8004854:	60c4      	str	r4, [r0, #12]
 8004856:	69eb      	ldr	r3, [r5, #28]
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	b151      	cbz	r1, 8004872 <_dtoa_r+0x52>
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	2301      	movs	r3, #1
 8004860:	4093      	lsls	r3, r2
 8004862:	604a      	str	r2, [r1, #4]
 8004864:	608b      	str	r3, [r1, #8]
 8004866:	4628      	mov	r0, r5
 8004868:	f000 fefa 	bl	8005660 <_Bfree>
 800486c:	2200      	movs	r2, #0
 800486e:	69eb      	ldr	r3, [r5, #28]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	1e3b      	subs	r3, r7, #0
 8004874:	bfaf      	iteee	ge
 8004876:	2300      	movge	r3, #0
 8004878:	2201      	movlt	r2, #1
 800487a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800487e:	9305      	strlt	r3, [sp, #20]
 8004880:	bfa8      	it	ge
 8004882:	f8c8 3000 	strge.w	r3, [r8]
 8004886:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800488a:	4b9d      	ldr	r3, [pc, #628]	; (8004b00 <_dtoa_r+0x2e0>)
 800488c:	bfb8      	it	lt
 800488e:	f8c8 2000 	strlt.w	r2, [r8]
 8004892:	ea33 0309 	bics.w	r3, r3, r9
 8004896:	d119      	bne.n	80048cc <_dtoa_r+0xac>
 8004898:	f242 730f 	movw	r3, #9999	; 0x270f
 800489c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048a4:	4333      	orrs	r3, r6
 80048a6:	f000 8589 	beq.w	80053bc <_dtoa_r+0xb9c>
 80048aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048ac:	b953      	cbnz	r3, 80048c4 <_dtoa_r+0xa4>
 80048ae:	4b95      	ldr	r3, [pc, #596]	; (8004b04 <_dtoa_r+0x2e4>)
 80048b0:	e023      	b.n	80048fa <_dtoa_r+0xda>
 80048b2:	4b95      	ldr	r3, [pc, #596]	; (8004b08 <_dtoa_r+0x2e8>)
 80048b4:	9303      	str	r3, [sp, #12]
 80048b6:	3308      	adds	r3, #8
 80048b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	9803      	ldr	r0, [sp, #12]
 80048be:	b019      	add	sp, #100	; 0x64
 80048c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c4:	4b8f      	ldr	r3, [pc, #572]	; (8004b04 <_dtoa_r+0x2e4>)
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	3303      	adds	r3, #3
 80048ca:	e7f5      	b.n	80048b8 <_dtoa_r+0x98>
 80048cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80048d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048d8:	2200      	movs	r2, #0
 80048da:	2300      	movs	r3, #0
 80048dc:	f7fc f864 	bl	80009a8 <__aeabi_dcmpeq>
 80048e0:	4680      	mov	r8, r0
 80048e2:	b160      	cbz	r0, 80048fe <_dtoa_r+0xde>
 80048e4:	2301      	movs	r3, #1
 80048e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8562 	beq.w	80053b6 <_dtoa_r+0xb96>
 80048f2:	4b86      	ldr	r3, [pc, #536]	; (8004b0c <_dtoa_r+0x2ec>)
 80048f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	e7de      	b.n	80048bc <_dtoa_r+0x9c>
 80048fe:	ab16      	add	r3, sp, #88	; 0x58
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	ab17      	add	r3, sp, #92	; 0x5c
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4628      	mov	r0, r5
 8004908:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800490c:	f001 f98a 	bl	8005c24 <__d2b>
 8004910:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004914:	4682      	mov	sl, r0
 8004916:	2c00      	cmp	r4, #0
 8004918:	d07e      	beq.n	8004a18 <_dtoa_r+0x1f8>
 800491a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800491e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004920:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004928:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800492c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004930:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004934:	4619      	mov	r1, r3
 8004936:	2200      	movs	r2, #0
 8004938:	4b75      	ldr	r3, [pc, #468]	; (8004b10 <_dtoa_r+0x2f0>)
 800493a:	f7fb fc15 	bl	8000168 <__aeabi_dsub>
 800493e:	a368      	add	r3, pc, #416	; (adr r3, 8004ae0 <_dtoa_r+0x2c0>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fdc8 	bl	80004d8 <__aeabi_dmul>
 8004948:	a367      	add	r3, pc, #412	; (adr r3, 8004ae8 <_dtoa_r+0x2c8>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fc0d 	bl	800016c <__adddf3>
 8004952:	4606      	mov	r6, r0
 8004954:	4620      	mov	r0, r4
 8004956:	460f      	mov	r7, r1
 8004958:	f7fb fd54 	bl	8000404 <__aeabi_i2d>
 800495c:	a364      	add	r3, pc, #400	; (adr r3, 8004af0 <_dtoa_r+0x2d0>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f7fb fdb9 	bl	80004d8 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4630      	mov	r0, r6
 800496c:	4639      	mov	r1, r7
 800496e:	f7fb fbfd 	bl	800016c <__adddf3>
 8004972:	4606      	mov	r6, r0
 8004974:	460f      	mov	r7, r1
 8004976:	f7fc f85f 	bl	8000a38 <__aeabi_d2iz>
 800497a:	2200      	movs	r2, #0
 800497c:	4683      	mov	fp, r0
 800497e:	2300      	movs	r3, #0
 8004980:	4630      	mov	r0, r6
 8004982:	4639      	mov	r1, r7
 8004984:	f7fc f81a 	bl	80009bc <__aeabi_dcmplt>
 8004988:	b148      	cbz	r0, 800499e <_dtoa_r+0x17e>
 800498a:	4658      	mov	r0, fp
 800498c:	f7fb fd3a 	bl	8000404 <__aeabi_i2d>
 8004990:	4632      	mov	r2, r6
 8004992:	463b      	mov	r3, r7
 8004994:	f7fc f808 	bl	80009a8 <__aeabi_dcmpeq>
 8004998:	b908      	cbnz	r0, 800499e <_dtoa_r+0x17e>
 800499a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800499e:	f1bb 0f16 	cmp.w	fp, #22
 80049a2:	d857      	bhi.n	8004a54 <_dtoa_r+0x234>
 80049a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049a8:	4b5a      	ldr	r3, [pc, #360]	; (8004b14 <_dtoa_r+0x2f4>)
 80049aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fc f803 	bl	80009bc <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d04e      	beq.n	8004a58 <_dtoa_r+0x238>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80049c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049c4:	1b1b      	subs	r3, r3, r4
 80049c6:	1e5a      	subs	r2, r3, #1
 80049c8:	bf46      	itte	mi
 80049ca:	f1c3 0901 	rsbmi	r9, r3, #1
 80049ce:	2300      	movmi	r3, #0
 80049d0:	f04f 0900 	movpl.w	r9, #0
 80049d4:	9209      	str	r2, [sp, #36]	; 0x24
 80049d6:	bf48      	it	mi
 80049d8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80049da:	f1bb 0f00 	cmp.w	fp, #0
 80049de:	db3d      	blt.n	8004a5c <_dtoa_r+0x23c>
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80049e6:	445b      	add	r3, fp
 80049e8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ea:	2300      	movs	r3, #0
 80049ec:	930a      	str	r3, [sp, #40]	; 0x28
 80049ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049f0:	2b09      	cmp	r3, #9
 80049f2:	d867      	bhi.n	8004ac4 <_dtoa_r+0x2a4>
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	bfc4      	itt	gt
 80049f8:	3b04      	subgt	r3, #4
 80049fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80049fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049fe:	bfc8      	it	gt
 8004a00:	2400      	movgt	r4, #0
 8004a02:	f1a3 0302 	sub.w	r3, r3, #2
 8004a06:	bfd8      	it	le
 8004a08:	2401      	movle	r4, #1
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	f200 8086 	bhi.w	8004b1c <_dtoa_r+0x2fc>
 8004a10:	e8df f003 	tbb	[pc, r3]
 8004a14:	5637392c 	.word	0x5637392c
 8004a18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a1c:	441c      	add	r4, r3
 8004a1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	bfc1      	itttt	gt
 8004a26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a2a:	fa09 f903 	lslgt.w	r9, r9, r3
 8004a2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004a32:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004a36:	bfd6      	itet	le
 8004a38:	f1c3 0320 	rsble	r3, r3, #32
 8004a3c:	ea49 0003 	orrgt.w	r0, r9, r3
 8004a40:	fa06 f003 	lslle.w	r0, r6, r3
 8004a44:	f7fb fcce 	bl	80003e4 <__aeabi_ui2d>
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004a4e:	3c01      	subs	r4, #1
 8004a50:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a52:	e76f      	b.n	8004934 <_dtoa_r+0x114>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e7b3      	b.n	80049c0 <_dtoa_r+0x1a0>
 8004a58:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a5a:	e7b2      	b.n	80049c2 <_dtoa_r+0x1a2>
 8004a5c:	f1cb 0300 	rsb	r3, fp, #0
 8004a60:	930a      	str	r3, [sp, #40]	; 0x28
 8004a62:	2300      	movs	r3, #0
 8004a64:	eba9 090b 	sub.w	r9, r9, fp
 8004a68:	930e      	str	r3, [sp, #56]	; 0x38
 8004a6a:	e7c0      	b.n	80049ee <_dtoa_r+0x1ce>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dc55      	bgt.n	8004b22 <_dtoa_r+0x302>
 8004a76:	2301      	movs	r3, #1
 8004a78:	461a      	mov	r2, r3
 8004a7a:	9306      	str	r3, [sp, #24]
 8004a7c:	9308      	str	r3, [sp, #32]
 8004a7e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a80:	e00b      	b.n	8004a9a <_dtoa_r+0x27a>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e7f3      	b.n	8004a6e <_dtoa_r+0x24e>
 8004a86:	2300      	movs	r3, #0
 8004a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a8c:	445b      	add	r3, fp
 8004a8e:	9306      	str	r3, [sp, #24]
 8004a90:	3301      	adds	r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	9308      	str	r3, [sp, #32]
 8004a96:	bfb8      	it	lt
 8004a98:	2301      	movlt	r3, #1
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	69e8      	ldr	r0, [r5, #28]
 8004aa0:	f102 0614 	add.w	r6, r2, #20
 8004aa4:	429e      	cmp	r6, r3
 8004aa6:	d940      	bls.n	8004b2a <_dtoa_r+0x30a>
 8004aa8:	6041      	str	r1, [r0, #4]
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 fd98 	bl	80055e0 <_Balloc>
 8004ab0:	9003      	str	r0, [sp, #12]
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d13c      	bne.n	8004b30 <_dtoa_r+0x310>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f240 11af 	movw	r1, #431	; 0x1af
 8004abc:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <_dtoa_r+0x2f8>)
 8004abe:	e6c3      	b.n	8004848 <_dtoa_r+0x28>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e7e1      	b.n	8004a88 <_dtoa_r+0x268>
 8004ac4:	2401      	movs	r4, #1
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	940b      	str	r4, [sp, #44]	; 0x2c
 8004aca:	9322      	str	r3, [sp, #136]	; 0x88
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	9306      	str	r3, [sp, #24]
 8004ad4:	9308      	str	r3, [sp, #32]
 8004ad6:	2312      	movs	r3, #18
 8004ad8:	e7d1      	b.n	8004a7e <_dtoa_r+0x25e>
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w
 8004ae0:	636f4361 	.word	0x636f4361
 8004ae4:	3fd287a7 	.word	0x3fd287a7
 8004ae8:	8b60c8b3 	.word	0x8b60c8b3
 8004aec:	3fc68a28 	.word	0x3fc68a28
 8004af0:	509f79fb 	.word	0x509f79fb
 8004af4:	3fd34413 	.word	0x3fd34413
 8004af8:	080072a3 	.word	0x080072a3
 8004afc:	080072ba 	.word	0x080072ba
 8004b00:	7ff00000 	.word	0x7ff00000
 8004b04:	0800729f 	.word	0x0800729f
 8004b08:	08007296 	.word	0x08007296
 8004b0c:	08007273 	.word	0x08007273
 8004b10:	3ff80000 	.word	0x3ff80000
 8004b14:	080073a8 	.word	0x080073a8
 8004b18:	08007312 	.word	0x08007312
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b20:	e7d4      	b.n	8004acc <_dtoa_r+0x2ac>
 8004b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b24:	9306      	str	r3, [sp, #24]
 8004b26:	9308      	str	r3, [sp, #32]
 8004b28:	e7b7      	b.n	8004a9a <_dtoa_r+0x27a>
 8004b2a:	3101      	adds	r1, #1
 8004b2c:	0052      	lsls	r2, r2, #1
 8004b2e:	e7b7      	b.n	8004aa0 <_dtoa_r+0x280>
 8004b30:	69eb      	ldr	r3, [r5, #28]
 8004b32:	9a03      	ldr	r2, [sp, #12]
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	9b08      	ldr	r3, [sp, #32]
 8004b38:	2b0e      	cmp	r3, #14
 8004b3a:	f200 80a8 	bhi.w	8004c8e <_dtoa_r+0x46e>
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	f000 80a5 	beq.w	8004c8e <_dtoa_r+0x46e>
 8004b44:	f1bb 0f00 	cmp.w	fp, #0
 8004b48:	dd34      	ble.n	8004bb4 <_dtoa_r+0x394>
 8004b4a:	4b9a      	ldr	r3, [pc, #616]	; (8004db4 <_dtoa_r+0x594>)
 8004b4c:	f00b 020f 	and.w	r2, fp, #15
 8004b50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004b58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004b64:	d016      	beq.n	8004b94 <_dtoa_r+0x374>
 8004b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b6a:	4b93      	ldr	r3, [pc, #588]	; (8004db8 <_dtoa_r+0x598>)
 8004b6c:	2703      	movs	r7, #3
 8004b6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b72:	f7fb fddb 	bl	800072c <__aeabi_ddiv>
 8004b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b7a:	f004 040f 	and.w	r4, r4, #15
 8004b7e:	4e8e      	ldr	r6, [pc, #568]	; (8004db8 <_dtoa_r+0x598>)
 8004b80:	b954      	cbnz	r4, 8004b98 <_dtoa_r+0x378>
 8004b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b8a:	f7fb fdcf 	bl	800072c <__aeabi_ddiv>
 8004b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b92:	e029      	b.n	8004be8 <_dtoa_r+0x3c8>
 8004b94:	2702      	movs	r7, #2
 8004b96:	e7f2      	b.n	8004b7e <_dtoa_r+0x35e>
 8004b98:	07e1      	lsls	r1, r4, #31
 8004b9a:	d508      	bpl.n	8004bae <_dtoa_r+0x38e>
 8004b9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ba0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ba4:	f7fb fc98 	bl	80004d8 <__aeabi_dmul>
 8004ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bac:	3701      	adds	r7, #1
 8004bae:	1064      	asrs	r4, r4, #1
 8004bb0:	3608      	adds	r6, #8
 8004bb2:	e7e5      	b.n	8004b80 <_dtoa_r+0x360>
 8004bb4:	f000 80a5 	beq.w	8004d02 <_dtoa_r+0x4e2>
 8004bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bbc:	f1cb 0400 	rsb	r4, fp, #0
 8004bc0:	4b7c      	ldr	r3, [pc, #496]	; (8004db4 <_dtoa_r+0x594>)
 8004bc2:	f004 020f 	and.w	r2, r4, #15
 8004bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fc83 	bl	80004d8 <__aeabi_dmul>
 8004bd2:	2702      	movs	r7, #2
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bda:	4e77      	ldr	r6, [pc, #476]	; (8004db8 <_dtoa_r+0x598>)
 8004bdc:	1124      	asrs	r4, r4, #4
 8004bde:	2c00      	cmp	r4, #0
 8004be0:	f040 8084 	bne.w	8004cec <_dtoa_r+0x4cc>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1d2      	bne.n	8004b8e <_dtoa_r+0x36e>
 8004be8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004bec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8087 	beq.w	8004d06 <_dtoa_r+0x4e6>
 8004bf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <_dtoa_r+0x59c>)
 8004c00:	f7fb fedc 	bl	80009bc <__aeabi_dcmplt>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d07e      	beq.n	8004d06 <_dtoa_r+0x4e6>
 8004c08:	9b08      	ldr	r3, [sp, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d07b      	beq.n	8004d06 <_dtoa_r+0x4e6>
 8004c0e:	9b06      	ldr	r3, [sp, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	dd38      	ble.n	8004c86 <_dtoa_r+0x466>
 8004c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4b69      	ldr	r3, [pc, #420]	; (8004dc0 <_dtoa_r+0x5a0>)
 8004c1c:	f7fb fc5c 	bl	80004d8 <__aeabi_dmul>
 8004c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c24:	9c06      	ldr	r4, [sp, #24]
 8004c26:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004c2a:	3701      	adds	r7, #1
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	f7fb fbe9 	bl	8000404 <__aeabi_i2d>
 8004c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c36:	f7fb fc4f 	bl	80004d8 <__aeabi_dmul>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <_dtoa_r+0x5a4>)
 8004c3e:	f7fb fa95 	bl	800016c <__adddf3>
 8004c42:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c4a:	9611      	str	r6, [sp, #68]	; 0x44
 8004c4c:	2c00      	cmp	r4, #0
 8004c4e:	d15d      	bne.n	8004d0c <_dtoa_r+0x4ec>
 8004c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c54:	2200      	movs	r2, #0
 8004c56:	4b5c      	ldr	r3, [pc, #368]	; (8004dc8 <_dtoa_r+0x5a8>)
 8004c58:	f7fb fa86 	bl	8000168 <__aeabi_dsub>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c64:	4633      	mov	r3, r6
 8004c66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c68:	f7fb fec6 	bl	80009f8 <__aeabi_dcmpgt>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f040 8295 	bne.w	800519c <_dtoa_r+0x97c>
 8004c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c7c:	f7fb fe9e 	bl	80009bc <__aeabi_dcmplt>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f040 8289 	bne.w	8005198 <_dtoa_r+0x978>
 8004c86:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f2c0 8151 	blt.w	8004f38 <_dtoa_r+0x718>
 8004c96:	f1bb 0f0e 	cmp.w	fp, #14
 8004c9a:	f300 814d 	bgt.w	8004f38 <_dtoa_r+0x718>
 8004c9e:	4b45      	ldr	r3, [pc, #276]	; (8004db4 <_dtoa_r+0x594>)
 8004ca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ca8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004cac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f280 80da 	bge.w	8004e68 <_dtoa_r+0x648>
 8004cb4:	9b08      	ldr	r3, [sp, #32]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f300 80d6 	bgt.w	8004e68 <_dtoa_r+0x648>
 8004cbc:	f040 826b 	bne.w	8005196 <_dtoa_r+0x976>
 8004cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4b40      	ldr	r3, [pc, #256]	; (8004dc8 <_dtoa_r+0x5a8>)
 8004cc8:	f7fb fc06 	bl	80004d8 <__aeabi_dmul>
 8004ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cd0:	f7fb fe88 	bl	80009e4 <__aeabi_dcmpge>
 8004cd4:	9c08      	ldr	r4, [sp, #32]
 8004cd6:	4626      	mov	r6, r4
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	f040 8241 	bne.w	8005160 <_dtoa_r+0x940>
 8004cde:	2331      	movs	r3, #49	; 0x31
 8004ce0:	9f03      	ldr	r7, [sp, #12]
 8004ce2:	f10b 0b01 	add.w	fp, fp, #1
 8004ce6:	f807 3b01 	strb.w	r3, [r7], #1
 8004cea:	e23d      	b.n	8005168 <_dtoa_r+0x948>
 8004cec:	07e2      	lsls	r2, r4, #31
 8004cee:	d505      	bpl.n	8004cfc <_dtoa_r+0x4dc>
 8004cf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cf4:	f7fb fbf0 	bl	80004d8 <__aeabi_dmul>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	3701      	adds	r7, #1
 8004cfc:	1064      	asrs	r4, r4, #1
 8004cfe:	3608      	adds	r6, #8
 8004d00:	e76d      	b.n	8004bde <_dtoa_r+0x3be>
 8004d02:	2702      	movs	r7, #2
 8004d04:	e770      	b.n	8004be8 <_dtoa_r+0x3c8>
 8004d06:	46d8      	mov	r8, fp
 8004d08:	9c08      	ldr	r4, [sp, #32]
 8004d0a:	e78f      	b.n	8004c2c <_dtoa_r+0x40c>
 8004d0c:	9903      	ldr	r1, [sp, #12]
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <_dtoa_r+0x594>)
 8004d10:	4421      	add	r1, r4
 8004d12:	9112      	str	r1, [sp, #72]	; 0x48
 8004d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d1a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d22:	2900      	cmp	r1, #0
 8004d24:	d054      	beq.n	8004dd0 <_dtoa_r+0x5b0>
 8004d26:	2000      	movs	r0, #0
 8004d28:	4928      	ldr	r1, [pc, #160]	; (8004dcc <_dtoa_r+0x5ac>)
 8004d2a:	f7fb fcff 	bl	800072c <__aeabi_ddiv>
 8004d2e:	463b      	mov	r3, r7
 8004d30:	4632      	mov	r2, r6
 8004d32:	f7fb fa19 	bl	8000168 <__aeabi_dsub>
 8004d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d3a:	9f03      	ldr	r7, [sp, #12]
 8004d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d40:	f7fb fe7a 	bl	8000a38 <__aeabi_d2iz>
 8004d44:	4604      	mov	r4, r0
 8004d46:	f7fb fb5d 	bl	8000404 <__aeabi_i2d>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d52:	f7fb fa09 	bl	8000168 <__aeabi_dsub>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	3430      	adds	r4, #48	; 0x30
 8004d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d64:	f807 4b01 	strb.w	r4, [r7], #1
 8004d68:	f7fb fe28 	bl	80009bc <__aeabi_dcmplt>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d173      	bne.n	8004e58 <_dtoa_r+0x638>
 8004d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d74:	2000      	movs	r0, #0
 8004d76:	4911      	ldr	r1, [pc, #68]	; (8004dbc <_dtoa_r+0x59c>)
 8004d78:	f7fb f9f6 	bl	8000168 <__aeabi_dsub>
 8004d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d80:	f7fb fe1c 	bl	80009bc <__aeabi_dcmplt>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f040 80b6 	bne.w	8004ef6 <_dtoa_r+0x6d6>
 8004d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d8c:	429f      	cmp	r7, r3
 8004d8e:	f43f af7a 	beq.w	8004c86 <_dtoa_r+0x466>
 8004d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <_dtoa_r+0x5a0>)
 8004d9a:	f7fb fb9d 	bl	80004d8 <__aeabi_dmul>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <_dtoa_r+0x5a0>)
 8004daa:	f7fb fb95 	bl	80004d8 <__aeabi_dmul>
 8004dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004db2:	e7c3      	b.n	8004d3c <_dtoa_r+0x51c>
 8004db4:	080073a8 	.word	0x080073a8
 8004db8:	08007380 	.word	0x08007380
 8004dbc:	3ff00000 	.word	0x3ff00000
 8004dc0:	40240000 	.word	0x40240000
 8004dc4:	401c0000 	.word	0x401c0000
 8004dc8:	40140000 	.word	0x40140000
 8004dcc:	3fe00000 	.word	0x3fe00000
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fb80 	bl	80004d8 <__aeabi_dmul>
 8004dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dde:	9c03      	ldr	r4, [sp, #12]
 8004de0:	9314      	str	r3, [sp, #80]	; 0x50
 8004de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004de6:	f7fb fe27 	bl	8000a38 <__aeabi_d2iz>
 8004dea:	9015      	str	r0, [sp, #84]	; 0x54
 8004dec:	f7fb fb0a 	bl	8000404 <__aeabi_i2d>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004df8:	f7fb f9b6 	bl	8000168 <__aeabi_dsub>
 8004dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dfe:	4606      	mov	r6, r0
 8004e00:	3330      	adds	r3, #48	; 0x30
 8004e02:	f804 3b01 	strb.w	r3, [r4], #1
 8004e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e08:	460f      	mov	r7, r1
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	d124      	bne.n	8004e5c <_dtoa_r+0x63c>
 8004e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e16:	4baf      	ldr	r3, [pc, #700]	; (80050d4 <_dtoa_r+0x8b4>)
 8004e18:	f7fb f9a8 	bl	800016c <__adddf3>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d163      	bne.n	8004ef4 <_dtoa_r+0x6d4>
 8004e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e30:	2000      	movs	r0, #0
 8004e32:	49a8      	ldr	r1, [pc, #672]	; (80050d4 <_dtoa_r+0x8b4>)
 8004e34:	f7fb f998 	bl	8000168 <__aeabi_dsub>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	4639      	mov	r1, r7
 8004e40:	f7fb fdbc 	bl	80009bc <__aeabi_dcmplt>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f43f af1e 	beq.w	8004c86 <_dtoa_r+0x466>
 8004e4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e4c:	1e7b      	subs	r3, r7, #1
 8004e4e:	9314      	str	r3, [sp, #80]	; 0x50
 8004e50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e54:	2b30      	cmp	r3, #48	; 0x30
 8004e56:	d0f8      	beq.n	8004e4a <_dtoa_r+0x62a>
 8004e58:	46c3      	mov	fp, r8
 8004e5a:	e03b      	b.n	8004ed4 <_dtoa_r+0x6b4>
 8004e5c:	4b9e      	ldr	r3, [pc, #632]	; (80050d8 <_dtoa_r+0x8b8>)
 8004e5e:	f7fb fb3b 	bl	80004d8 <__aeabi_dmul>
 8004e62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e66:	e7bc      	b.n	8004de2 <_dtoa_r+0x5c2>
 8004e68:	9f03      	ldr	r7, [sp, #12]
 8004e6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e72:	4640      	mov	r0, r8
 8004e74:	4649      	mov	r1, r9
 8004e76:	f7fb fc59 	bl	800072c <__aeabi_ddiv>
 8004e7a:	f7fb fddd 	bl	8000a38 <__aeabi_d2iz>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	f7fb fac0 	bl	8000404 <__aeabi_i2d>
 8004e84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e88:	f7fb fb26 	bl	80004d8 <__aeabi_dmul>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	f7fb f968 	bl	8000168 <__aeabi_dsub>
 8004e98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e9c:	f807 6b01 	strb.w	r6, [r7], #1
 8004ea0:	9e03      	ldr	r6, [sp, #12]
 8004ea2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004ea6:	1bbe      	subs	r6, r7, r6
 8004ea8:	45b4      	cmp	ip, r6
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	d136      	bne.n	8004f1e <_dtoa_r+0x6fe>
 8004eb0:	f7fb f95c 	bl	800016c <__adddf3>
 8004eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004eb8:	4680      	mov	r8, r0
 8004eba:	4689      	mov	r9, r1
 8004ebc:	f7fb fd9c 	bl	80009f8 <__aeabi_dcmpgt>
 8004ec0:	bb58      	cbnz	r0, 8004f1a <_dtoa_r+0x6fa>
 8004ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4649      	mov	r1, r9
 8004eca:	f7fb fd6d 	bl	80009a8 <__aeabi_dcmpeq>
 8004ece:	b108      	cbz	r0, 8004ed4 <_dtoa_r+0x6b4>
 8004ed0:	07e3      	lsls	r3, r4, #31
 8004ed2:	d422      	bmi.n	8004f1a <_dtoa_r+0x6fa>
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 fbc2 	bl	8005660 <_Bfree>
 8004edc:	2300      	movs	r3, #0
 8004ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ee0:	703b      	strb	r3, [r7, #0]
 8004ee2:	f10b 0301 	add.w	r3, fp, #1
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f43f ace6 	beq.w	80048bc <_dtoa_r+0x9c>
 8004ef0:	601f      	str	r7, [r3, #0]
 8004ef2:	e4e3      	b.n	80048bc <_dtoa_r+0x9c>
 8004ef4:	4627      	mov	r7, r4
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	461f      	mov	r7, r3
 8004efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004efe:	2a39      	cmp	r2, #57	; 0x39
 8004f00:	d107      	bne.n	8004f12 <_dtoa_r+0x6f2>
 8004f02:	9a03      	ldr	r2, [sp, #12]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1f7      	bne.n	8004ef8 <_dtoa_r+0x6d8>
 8004f08:	2230      	movs	r2, #48	; 0x30
 8004f0a:	9903      	ldr	r1, [sp, #12]
 8004f0c:	f108 0801 	add.w	r8, r8, #1
 8004f10:	700a      	strb	r2, [r1, #0]
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	3201      	adds	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e79e      	b.n	8004e58 <_dtoa_r+0x638>
 8004f1a:	46d8      	mov	r8, fp
 8004f1c:	e7eb      	b.n	8004ef6 <_dtoa_r+0x6d6>
 8004f1e:	2200      	movs	r2, #0
 8004f20:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <_dtoa_r+0x8b8>)
 8004f22:	f7fb fad9 	bl	80004d8 <__aeabi_dmul>
 8004f26:	2200      	movs	r2, #0
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4680      	mov	r8, r0
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	f7fb fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d09b      	beq.n	8004e6e <_dtoa_r+0x64e>
 8004f36:	e7cd      	b.n	8004ed4 <_dtoa_r+0x6b4>
 8004f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	f000 80c4 	beq.w	80050c8 <_dtoa_r+0x8a8>
 8004f40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f42:	2a01      	cmp	r2, #1
 8004f44:	f300 80a8 	bgt.w	8005098 <_dtoa_r+0x878>
 8004f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	f000 80a0 	beq.w	8005090 <_dtoa_r+0x870>
 8004f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f54:	464f      	mov	r7, r9
 8004f56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	441a      	add	r2, r3
 8004f5e:	4628      	mov	r0, r5
 8004f60:	4499      	add	r9, r3
 8004f62:	9209      	str	r2, [sp, #36]	; 0x24
 8004f64:	f000 fc32 	bl	80057cc <__i2b>
 8004f68:	4606      	mov	r6, r0
 8004f6a:	b15f      	cbz	r7, 8004f84 <_dtoa_r+0x764>
 8004f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dd08      	ble.n	8004f84 <_dtoa_r+0x764>
 8004f72:	42bb      	cmp	r3, r7
 8004f74:	bfa8      	it	ge
 8004f76:	463b      	movge	r3, r7
 8004f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7a:	eba9 0903 	sub.w	r9, r9, r3
 8004f7e:	1aff      	subs	r7, r7, r3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	9309      	str	r3, [sp, #36]	; 0x24
 8004f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f86:	b1f3      	cbz	r3, 8004fc6 <_dtoa_r+0x7a6>
 8004f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80a0 	beq.w	80050d0 <_dtoa_r+0x8b0>
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	dd10      	ble.n	8004fb6 <_dtoa_r+0x796>
 8004f94:	4631      	mov	r1, r6
 8004f96:	4622      	mov	r2, r4
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 fcd5 	bl	8005948 <__pow5mult>
 8004f9e:	4652      	mov	r2, sl
 8004fa0:	4601      	mov	r1, r0
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 fc27 	bl	80057f8 <__multiply>
 8004faa:	4680      	mov	r8, r0
 8004fac:	4651      	mov	r1, sl
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 fb56 	bl	8005660 <_Bfree>
 8004fb4:	46c2      	mov	sl, r8
 8004fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb8:	1b1a      	subs	r2, r3, r4
 8004fba:	d004      	beq.n	8004fc6 <_dtoa_r+0x7a6>
 8004fbc:	4651      	mov	r1, sl
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fcc2 	bl	8005948 <__pow5mult>
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 fbff 	bl	80057cc <__i2b>
 8004fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f340 8082 	ble.w	80050dc <_dtoa_r+0x8bc>
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4601      	mov	r1, r0
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 fcb3 	bl	8005948 <__pow5mult>
 8004fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	dd7b      	ble.n	80050e2 <_dtoa_r+0x8c2>
 8004fea:	f04f 0800 	mov.w	r8, #0
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ff4:	6918      	ldr	r0, [r3, #16]
 8004ff6:	f000 fb9b 	bl	8005730 <__hi0bits>
 8004ffa:	f1c0 0020 	rsb	r0, r0, #32
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	4418      	add	r0, r3
 8005002:	f010 001f 	ands.w	r0, r0, #31
 8005006:	f000 8092 	beq.w	800512e <_dtoa_r+0x90e>
 800500a:	f1c0 0320 	rsb	r3, r0, #32
 800500e:	2b04      	cmp	r3, #4
 8005010:	f340 8085 	ble.w	800511e <_dtoa_r+0x8fe>
 8005014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005016:	f1c0 001c 	rsb	r0, r0, #28
 800501a:	4403      	add	r3, r0
 800501c:	4481      	add	r9, r0
 800501e:	4407      	add	r7, r0
 8005020:	9309      	str	r3, [sp, #36]	; 0x24
 8005022:	f1b9 0f00 	cmp.w	r9, #0
 8005026:	dd05      	ble.n	8005034 <_dtoa_r+0x814>
 8005028:	4651      	mov	r1, sl
 800502a:	464a      	mov	r2, r9
 800502c:	4628      	mov	r0, r5
 800502e:	f000 fce5 	bl	80059fc <__lshift>
 8005032:	4682      	mov	sl, r0
 8005034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	dd05      	ble.n	8005046 <_dtoa_r+0x826>
 800503a:	4621      	mov	r1, r4
 800503c:	461a      	mov	r2, r3
 800503e:	4628      	mov	r0, r5
 8005040:	f000 fcdc 	bl	80059fc <__lshift>
 8005044:	4604      	mov	r4, r0
 8005046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d072      	beq.n	8005132 <_dtoa_r+0x912>
 800504c:	4621      	mov	r1, r4
 800504e:	4650      	mov	r0, sl
 8005050:	f000 fd40 	bl	8005ad4 <__mcmp>
 8005054:	2800      	cmp	r0, #0
 8005056:	da6c      	bge.n	8005132 <_dtoa_r+0x912>
 8005058:	2300      	movs	r3, #0
 800505a:	4651      	mov	r1, sl
 800505c:	220a      	movs	r2, #10
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fb20 	bl	80056a4 <__multadd>
 8005064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005066:	4682      	mov	sl, r0
 8005068:	f10b 3bff 	add.w	fp, fp, #4294967295
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 81ac 	beq.w	80053ca <_dtoa_r+0xbaa>
 8005072:	2300      	movs	r3, #0
 8005074:	4631      	mov	r1, r6
 8005076:	220a      	movs	r2, #10
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fb13 	bl	80056a4 <__multadd>
 800507e:	9b06      	ldr	r3, [sp, #24]
 8005080:	4606      	mov	r6, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f300 8093 	bgt.w	80051ae <_dtoa_r+0x98e>
 8005088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800508a:	2b02      	cmp	r3, #2
 800508c:	dc59      	bgt.n	8005142 <_dtoa_r+0x922>
 800508e:	e08e      	b.n	80051ae <_dtoa_r+0x98e>
 8005090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005092:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005096:	e75d      	b.n	8004f54 <_dtoa_r+0x734>
 8005098:	9b08      	ldr	r3, [sp, #32]
 800509a:	1e5c      	subs	r4, r3, #1
 800509c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509e:	42a3      	cmp	r3, r4
 80050a0:	bfbf      	itttt	lt
 80050a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80050a6:	1ae3      	sublt	r3, r4, r3
 80050a8:	18d2      	addlt	r2, r2, r3
 80050aa:	bfa8      	it	ge
 80050ac:	1b1c      	subge	r4, r3, r4
 80050ae:	9b08      	ldr	r3, [sp, #32]
 80050b0:	bfbe      	ittt	lt
 80050b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80050b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80050b6:	2400      	movlt	r4, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bfb5      	itete	lt
 80050bc:	eba9 0703 	sublt.w	r7, r9, r3
 80050c0:	464f      	movge	r7, r9
 80050c2:	2300      	movlt	r3, #0
 80050c4:	9b08      	ldrge	r3, [sp, #32]
 80050c6:	e747      	b.n	8004f58 <_dtoa_r+0x738>
 80050c8:	464f      	mov	r7, r9
 80050ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80050ce:	e74c      	b.n	8004f6a <_dtoa_r+0x74a>
 80050d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d2:	e773      	b.n	8004fbc <_dtoa_r+0x79c>
 80050d4:	3fe00000 	.word	0x3fe00000
 80050d8:	40240000 	.word	0x40240000
 80050dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050de:	2b01      	cmp	r3, #1
 80050e0:	dc18      	bgt.n	8005114 <_dtoa_r+0x8f4>
 80050e2:	9b04      	ldr	r3, [sp, #16]
 80050e4:	b9b3      	cbnz	r3, 8005114 <_dtoa_r+0x8f4>
 80050e6:	9b05      	ldr	r3, [sp, #20]
 80050e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ec:	b993      	cbnz	r3, 8005114 <_dtoa_r+0x8f4>
 80050ee:	9b05      	ldr	r3, [sp, #20]
 80050f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050f4:	0d1b      	lsrs	r3, r3, #20
 80050f6:	051b      	lsls	r3, r3, #20
 80050f8:	b17b      	cbz	r3, 800511a <_dtoa_r+0x8fa>
 80050fa:	f04f 0801 	mov.w	r8, #1
 80050fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005100:	f109 0901 	add.w	r9, r9, #1
 8005104:	3301      	adds	r3, #1
 8005106:	9309      	str	r3, [sp, #36]	; 0x24
 8005108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	f47f af6f 	bne.w	8004fee <_dtoa_r+0x7ce>
 8005110:	2001      	movs	r0, #1
 8005112:	e774      	b.n	8004ffe <_dtoa_r+0x7de>
 8005114:	f04f 0800 	mov.w	r8, #0
 8005118:	e7f6      	b.n	8005108 <_dtoa_r+0x8e8>
 800511a:	4698      	mov	r8, r3
 800511c:	e7f4      	b.n	8005108 <_dtoa_r+0x8e8>
 800511e:	d080      	beq.n	8005022 <_dtoa_r+0x802>
 8005120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005122:	331c      	adds	r3, #28
 8005124:	441a      	add	r2, r3
 8005126:	4499      	add	r9, r3
 8005128:	441f      	add	r7, r3
 800512a:	9209      	str	r2, [sp, #36]	; 0x24
 800512c:	e779      	b.n	8005022 <_dtoa_r+0x802>
 800512e:	4603      	mov	r3, r0
 8005130:	e7f6      	b.n	8005120 <_dtoa_r+0x900>
 8005132:	9b08      	ldr	r3, [sp, #32]
 8005134:	2b00      	cmp	r3, #0
 8005136:	dc34      	bgt.n	80051a2 <_dtoa_r+0x982>
 8005138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800513a:	2b02      	cmp	r3, #2
 800513c:	dd31      	ble.n	80051a2 <_dtoa_r+0x982>
 800513e:	9b08      	ldr	r3, [sp, #32]
 8005140:	9306      	str	r3, [sp, #24]
 8005142:	9b06      	ldr	r3, [sp, #24]
 8005144:	b963      	cbnz	r3, 8005160 <_dtoa_r+0x940>
 8005146:	4621      	mov	r1, r4
 8005148:	2205      	movs	r2, #5
 800514a:	4628      	mov	r0, r5
 800514c:	f000 faaa 	bl	80056a4 <__multadd>
 8005150:	4601      	mov	r1, r0
 8005152:	4604      	mov	r4, r0
 8005154:	4650      	mov	r0, sl
 8005156:	f000 fcbd 	bl	8005ad4 <__mcmp>
 800515a:	2800      	cmp	r0, #0
 800515c:	f73f adbf 	bgt.w	8004cde <_dtoa_r+0x4be>
 8005160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005162:	9f03      	ldr	r7, [sp, #12]
 8005164:	ea6f 0b03 	mvn.w	fp, r3
 8005168:	f04f 0800 	mov.w	r8, #0
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fa76 	bl	8005660 <_Bfree>
 8005174:	2e00      	cmp	r6, #0
 8005176:	f43f aead 	beq.w	8004ed4 <_dtoa_r+0x6b4>
 800517a:	f1b8 0f00 	cmp.w	r8, #0
 800517e:	d005      	beq.n	800518c <_dtoa_r+0x96c>
 8005180:	45b0      	cmp	r8, r6
 8005182:	d003      	beq.n	800518c <_dtoa_r+0x96c>
 8005184:	4641      	mov	r1, r8
 8005186:	4628      	mov	r0, r5
 8005188:	f000 fa6a 	bl	8005660 <_Bfree>
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	f000 fa66 	bl	8005660 <_Bfree>
 8005194:	e69e      	b.n	8004ed4 <_dtoa_r+0x6b4>
 8005196:	2400      	movs	r4, #0
 8005198:	4626      	mov	r6, r4
 800519a:	e7e1      	b.n	8005160 <_dtoa_r+0x940>
 800519c:	46c3      	mov	fp, r8
 800519e:	4626      	mov	r6, r4
 80051a0:	e59d      	b.n	8004cde <_dtoa_r+0x4be>
 80051a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80c8 	beq.w	800533a <_dtoa_r+0xb1a>
 80051aa:	9b08      	ldr	r3, [sp, #32]
 80051ac:	9306      	str	r3, [sp, #24]
 80051ae:	2f00      	cmp	r7, #0
 80051b0:	dd05      	ble.n	80051be <_dtoa_r+0x99e>
 80051b2:	4631      	mov	r1, r6
 80051b4:	463a      	mov	r2, r7
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 fc20 	bl	80059fc <__lshift>
 80051bc:	4606      	mov	r6, r0
 80051be:	f1b8 0f00 	cmp.w	r8, #0
 80051c2:	d05b      	beq.n	800527c <_dtoa_r+0xa5c>
 80051c4:	4628      	mov	r0, r5
 80051c6:	6871      	ldr	r1, [r6, #4]
 80051c8:	f000 fa0a 	bl	80055e0 <_Balloc>
 80051cc:	4607      	mov	r7, r0
 80051ce:	b928      	cbnz	r0, 80051dc <_dtoa_r+0x9bc>
 80051d0:	4602      	mov	r2, r0
 80051d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80051d6:	4b81      	ldr	r3, [pc, #516]	; (80053dc <_dtoa_r+0xbbc>)
 80051d8:	f7ff bb36 	b.w	8004848 <_dtoa_r+0x28>
 80051dc:	6932      	ldr	r2, [r6, #16]
 80051de:	f106 010c 	add.w	r1, r6, #12
 80051e2:	3202      	adds	r2, #2
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	300c      	adds	r0, #12
 80051e8:	f000 fff2 	bl	80061d0 <memcpy>
 80051ec:	2201      	movs	r2, #1
 80051ee:	4639      	mov	r1, r7
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 fc03 	bl	80059fc <__lshift>
 80051f6:	46b0      	mov	r8, r6
 80051f8:	4606      	mov	r6, r0
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	9a03      	ldr	r2, [sp, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	9308      	str	r3, [sp, #32]
 8005202:	9b06      	ldr	r3, [sp, #24]
 8005204:	4413      	add	r3, r2
 8005206:	930b      	str	r3, [sp, #44]	; 0x2c
 8005208:	9b04      	ldr	r3, [sp, #16]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	930a      	str	r3, [sp, #40]	; 0x28
 8005210:	9b08      	ldr	r3, [sp, #32]
 8005212:	4621      	mov	r1, r4
 8005214:	3b01      	subs	r3, #1
 8005216:	4650      	mov	r0, sl
 8005218:	9304      	str	r3, [sp, #16]
 800521a:	f7ff fa77 	bl	800470c <quorem>
 800521e:	4641      	mov	r1, r8
 8005220:	9006      	str	r0, [sp, #24]
 8005222:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005226:	4650      	mov	r0, sl
 8005228:	f000 fc54 	bl	8005ad4 <__mcmp>
 800522c:	4632      	mov	r2, r6
 800522e:	9009      	str	r0, [sp, #36]	; 0x24
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 fc6a 	bl	8005b0c <__mdiff>
 8005238:	68c2      	ldr	r2, [r0, #12]
 800523a:	4607      	mov	r7, r0
 800523c:	bb02      	cbnz	r2, 8005280 <_dtoa_r+0xa60>
 800523e:	4601      	mov	r1, r0
 8005240:	4650      	mov	r0, sl
 8005242:	f000 fc47 	bl	8005ad4 <__mcmp>
 8005246:	4602      	mov	r2, r0
 8005248:	4639      	mov	r1, r7
 800524a:	4628      	mov	r0, r5
 800524c:	920c      	str	r2, [sp, #48]	; 0x30
 800524e:	f000 fa07 	bl	8005660 <_Bfree>
 8005252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005256:	9f08      	ldr	r7, [sp, #32]
 8005258:	ea43 0102 	orr.w	r1, r3, r2
 800525c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525e:	4319      	orrs	r1, r3
 8005260:	d110      	bne.n	8005284 <_dtoa_r+0xa64>
 8005262:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005266:	d029      	beq.n	80052bc <_dtoa_r+0xa9c>
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	dd02      	ble.n	8005274 <_dtoa_r+0xa54>
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005274:	9b04      	ldr	r3, [sp, #16]
 8005276:	f883 9000 	strb.w	r9, [r3]
 800527a:	e777      	b.n	800516c <_dtoa_r+0x94c>
 800527c:	4630      	mov	r0, r6
 800527e:	e7ba      	b.n	80051f6 <_dtoa_r+0x9d6>
 8005280:	2201      	movs	r2, #1
 8005282:	e7e1      	b.n	8005248 <_dtoa_r+0xa28>
 8005284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	db04      	blt.n	8005294 <_dtoa_r+0xa74>
 800528a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800528c:	430b      	orrs	r3, r1
 800528e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005290:	430b      	orrs	r3, r1
 8005292:	d120      	bne.n	80052d6 <_dtoa_r+0xab6>
 8005294:	2a00      	cmp	r2, #0
 8005296:	dded      	ble.n	8005274 <_dtoa_r+0xa54>
 8005298:	4651      	mov	r1, sl
 800529a:	2201      	movs	r2, #1
 800529c:	4628      	mov	r0, r5
 800529e:	f000 fbad 	bl	80059fc <__lshift>
 80052a2:	4621      	mov	r1, r4
 80052a4:	4682      	mov	sl, r0
 80052a6:	f000 fc15 	bl	8005ad4 <__mcmp>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	dc03      	bgt.n	80052b6 <_dtoa_r+0xa96>
 80052ae:	d1e1      	bne.n	8005274 <_dtoa_r+0xa54>
 80052b0:	f019 0f01 	tst.w	r9, #1
 80052b4:	d0de      	beq.n	8005274 <_dtoa_r+0xa54>
 80052b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80052ba:	d1d8      	bne.n	800526e <_dtoa_r+0xa4e>
 80052bc:	2339      	movs	r3, #57	; 0x39
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	7013      	strb	r3, [r2, #0]
 80052c2:	463b      	mov	r3, r7
 80052c4:	461f      	mov	r7, r3
 80052c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	2a39      	cmp	r2, #57	; 0x39
 80052ce:	d06b      	beq.n	80053a8 <_dtoa_r+0xb88>
 80052d0:	3201      	adds	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e74a      	b.n	800516c <_dtoa_r+0x94c>
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	dd07      	ble.n	80052ea <_dtoa_r+0xaca>
 80052da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80052de:	d0ed      	beq.n	80052bc <_dtoa_r+0xa9c>
 80052e0:	9a04      	ldr	r2, [sp, #16]
 80052e2:	f109 0301 	add.w	r3, r9, #1
 80052e6:	7013      	strb	r3, [r2, #0]
 80052e8:	e740      	b.n	800516c <_dtoa_r+0x94c>
 80052ea:	9b08      	ldr	r3, [sp, #32]
 80052ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d042      	beq.n	800537c <_dtoa_r+0xb5c>
 80052f6:	4651      	mov	r1, sl
 80052f8:	2300      	movs	r3, #0
 80052fa:	220a      	movs	r2, #10
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f9d1 	bl	80056a4 <__multadd>
 8005302:	45b0      	cmp	r8, r6
 8005304:	4682      	mov	sl, r0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	f04f 020a 	mov.w	r2, #10
 800530e:	4641      	mov	r1, r8
 8005310:	4628      	mov	r0, r5
 8005312:	d107      	bne.n	8005324 <_dtoa_r+0xb04>
 8005314:	f000 f9c6 	bl	80056a4 <__multadd>
 8005318:	4680      	mov	r8, r0
 800531a:	4606      	mov	r6, r0
 800531c:	9b08      	ldr	r3, [sp, #32]
 800531e:	3301      	adds	r3, #1
 8005320:	9308      	str	r3, [sp, #32]
 8005322:	e775      	b.n	8005210 <_dtoa_r+0x9f0>
 8005324:	f000 f9be 	bl	80056a4 <__multadd>
 8005328:	4631      	mov	r1, r6
 800532a:	4680      	mov	r8, r0
 800532c:	2300      	movs	r3, #0
 800532e:	220a      	movs	r2, #10
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f9b7 	bl	80056a4 <__multadd>
 8005336:	4606      	mov	r6, r0
 8005338:	e7f0      	b.n	800531c <_dtoa_r+0xafc>
 800533a:	9b08      	ldr	r3, [sp, #32]
 800533c:	9306      	str	r3, [sp, #24]
 800533e:	9f03      	ldr	r7, [sp, #12]
 8005340:	4621      	mov	r1, r4
 8005342:	4650      	mov	r0, sl
 8005344:	f7ff f9e2 	bl	800470c <quorem>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800534e:	f807 9b01 	strb.w	r9, [r7], #1
 8005352:	1afa      	subs	r2, r7, r3
 8005354:	9b06      	ldr	r3, [sp, #24]
 8005356:	4293      	cmp	r3, r2
 8005358:	dd07      	ble.n	800536a <_dtoa_r+0xb4a>
 800535a:	4651      	mov	r1, sl
 800535c:	2300      	movs	r3, #0
 800535e:	220a      	movs	r2, #10
 8005360:	4628      	mov	r0, r5
 8005362:	f000 f99f 	bl	80056a4 <__multadd>
 8005366:	4682      	mov	sl, r0
 8005368:	e7ea      	b.n	8005340 <_dtoa_r+0xb20>
 800536a:	9b06      	ldr	r3, [sp, #24]
 800536c:	f04f 0800 	mov.w	r8, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfcc      	ite	gt
 8005374:	461f      	movgt	r7, r3
 8005376:	2701      	movle	r7, #1
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	441f      	add	r7, r3
 800537c:	4651      	mov	r1, sl
 800537e:	2201      	movs	r2, #1
 8005380:	4628      	mov	r0, r5
 8005382:	f000 fb3b 	bl	80059fc <__lshift>
 8005386:	4621      	mov	r1, r4
 8005388:	4682      	mov	sl, r0
 800538a:	f000 fba3 	bl	8005ad4 <__mcmp>
 800538e:	2800      	cmp	r0, #0
 8005390:	dc97      	bgt.n	80052c2 <_dtoa_r+0xaa2>
 8005392:	d102      	bne.n	800539a <_dtoa_r+0xb7a>
 8005394:	f019 0f01 	tst.w	r9, #1
 8005398:	d193      	bne.n	80052c2 <_dtoa_r+0xaa2>
 800539a:	463b      	mov	r3, r7
 800539c:	461f      	mov	r7, r3
 800539e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053a2:	2a30      	cmp	r2, #48	; 0x30
 80053a4:	d0fa      	beq.n	800539c <_dtoa_r+0xb7c>
 80053a6:	e6e1      	b.n	800516c <_dtoa_r+0x94c>
 80053a8:	9a03      	ldr	r2, [sp, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d18a      	bne.n	80052c4 <_dtoa_r+0xaa4>
 80053ae:	2331      	movs	r3, #49	; 0x31
 80053b0:	f10b 0b01 	add.w	fp, fp, #1
 80053b4:	e797      	b.n	80052e6 <_dtoa_r+0xac6>
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <_dtoa_r+0xbc0>)
 80053b8:	f7ff ba9f 	b.w	80048fa <_dtoa_r+0xda>
 80053bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f47f aa77 	bne.w	80048b2 <_dtoa_r+0x92>
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <_dtoa_r+0xbc4>)
 80053c6:	f7ff ba98 	b.w	80048fa <_dtoa_r+0xda>
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dcb6      	bgt.n	800533e <_dtoa_r+0xb1e>
 80053d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	f73f aeb5 	bgt.w	8005142 <_dtoa_r+0x922>
 80053d8:	e7b1      	b.n	800533e <_dtoa_r+0xb1e>
 80053da:	bf00      	nop
 80053dc:	08007312 	.word	0x08007312
 80053e0:	08007272 	.word	0x08007272
 80053e4:	08007296 	.word	0x08007296

080053e8 <_free_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4605      	mov	r5, r0
 80053ec:	2900      	cmp	r1, #0
 80053ee:	d040      	beq.n	8005472 <_free_r+0x8a>
 80053f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f4:	1f0c      	subs	r4, r1, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bfb8      	it	lt
 80053fa:	18e4      	addlt	r4, r4, r3
 80053fc:	f000 f8e4 	bl	80055c8 <__malloc_lock>
 8005400:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <_free_r+0x8c>)
 8005402:	6813      	ldr	r3, [r2, #0]
 8005404:	b933      	cbnz	r3, 8005414 <_free_r+0x2c>
 8005406:	6063      	str	r3, [r4, #4]
 8005408:	6014      	str	r4, [r2, #0]
 800540a:	4628      	mov	r0, r5
 800540c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005410:	f000 b8e0 	b.w	80055d4 <__malloc_unlock>
 8005414:	42a3      	cmp	r3, r4
 8005416:	d908      	bls.n	800542a <_free_r+0x42>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	1821      	adds	r1, r4, r0
 800541c:	428b      	cmp	r3, r1
 800541e:	bf01      	itttt	eq
 8005420:	6819      	ldreq	r1, [r3, #0]
 8005422:	685b      	ldreq	r3, [r3, #4]
 8005424:	1809      	addeq	r1, r1, r0
 8005426:	6021      	streq	r1, [r4, #0]
 8005428:	e7ed      	b.n	8005406 <_free_r+0x1e>
 800542a:	461a      	mov	r2, r3
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	b10b      	cbz	r3, 8005434 <_free_r+0x4c>
 8005430:	42a3      	cmp	r3, r4
 8005432:	d9fa      	bls.n	800542a <_free_r+0x42>
 8005434:	6811      	ldr	r1, [r2, #0]
 8005436:	1850      	adds	r0, r2, r1
 8005438:	42a0      	cmp	r0, r4
 800543a:	d10b      	bne.n	8005454 <_free_r+0x6c>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	4401      	add	r1, r0
 8005440:	1850      	adds	r0, r2, r1
 8005442:	4283      	cmp	r3, r0
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	d1e0      	bne.n	800540a <_free_r+0x22>
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4408      	add	r0, r1
 800544e:	6010      	str	r0, [r2, #0]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	e7da      	b.n	800540a <_free_r+0x22>
 8005454:	d902      	bls.n	800545c <_free_r+0x74>
 8005456:	230c      	movs	r3, #12
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	e7d6      	b.n	800540a <_free_r+0x22>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	1821      	adds	r1, r4, r0
 8005460:	428b      	cmp	r3, r1
 8005462:	bf01      	itttt	eq
 8005464:	6819      	ldreq	r1, [r3, #0]
 8005466:	685b      	ldreq	r3, [r3, #4]
 8005468:	1809      	addeq	r1, r1, r0
 800546a:	6021      	streq	r1, [r4, #0]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6054      	str	r4, [r2, #4]
 8005470:	e7cb      	b.n	800540a <_free_r+0x22>
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200003c4 	.word	0x200003c4

08005478 <malloc>:
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <malloc+0xc>)
 800547a:	4601      	mov	r1, r0
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f000 b823 	b.w	80054c8 <_malloc_r>
 8005482:	bf00      	nop
 8005484:	20000064 	.word	0x20000064

08005488 <sbrk_aligned>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4e0e      	ldr	r6, [pc, #56]	; (80054c4 <sbrk_aligned+0x3c>)
 800548c:	460c      	mov	r4, r1
 800548e:	6831      	ldr	r1, [r6, #0]
 8005490:	4605      	mov	r5, r0
 8005492:	b911      	cbnz	r1, 800549a <sbrk_aligned+0x12>
 8005494:	f000 fe8c 	bl	80061b0 <_sbrk_r>
 8005498:	6030      	str	r0, [r6, #0]
 800549a:	4621      	mov	r1, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f000 fe87 	bl	80061b0 <_sbrk_r>
 80054a2:	1c43      	adds	r3, r0, #1
 80054a4:	d00a      	beq.n	80054bc <sbrk_aligned+0x34>
 80054a6:	1cc4      	adds	r4, r0, #3
 80054a8:	f024 0403 	bic.w	r4, r4, #3
 80054ac:	42a0      	cmp	r0, r4
 80054ae:	d007      	beq.n	80054c0 <sbrk_aligned+0x38>
 80054b0:	1a21      	subs	r1, r4, r0
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 fe7c 	bl	80061b0 <_sbrk_r>
 80054b8:	3001      	adds	r0, #1
 80054ba:	d101      	bne.n	80054c0 <sbrk_aligned+0x38>
 80054bc:	f04f 34ff 	mov.w	r4, #4294967295
 80054c0:	4620      	mov	r0, r4
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	200003c8 	.word	0x200003c8

080054c8 <_malloc_r>:
 80054c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054cc:	1ccd      	adds	r5, r1, #3
 80054ce:	f025 0503 	bic.w	r5, r5, #3
 80054d2:	3508      	adds	r5, #8
 80054d4:	2d0c      	cmp	r5, #12
 80054d6:	bf38      	it	cc
 80054d8:	250c      	movcc	r5, #12
 80054da:	2d00      	cmp	r5, #0
 80054dc:	4607      	mov	r7, r0
 80054de:	db01      	blt.n	80054e4 <_malloc_r+0x1c>
 80054e0:	42a9      	cmp	r1, r5
 80054e2:	d905      	bls.n	80054f0 <_malloc_r+0x28>
 80054e4:	230c      	movs	r3, #12
 80054e6:	2600      	movs	r6, #0
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4630      	mov	r0, r6
 80054ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055c4 <_malloc_r+0xfc>
 80054f4:	f000 f868 	bl	80055c8 <__malloc_lock>
 80054f8:	f8d8 3000 	ldr.w	r3, [r8]
 80054fc:	461c      	mov	r4, r3
 80054fe:	bb5c      	cbnz	r4, 8005558 <_malloc_r+0x90>
 8005500:	4629      	mov	r1, r5
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ffc0 	bl	8005488 <sbrk_aligned>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	4604      	mov	r4, r0
 800550c:	d155      	bne.n	80055ba <_malloc_r+0xf2>
 800550e:	f8d8 4000 	ldr.w	r4, [r8]
 8005512:	4626      	mov	r6, r4
 8005514:	2e00      	cmp	r6, #0
 8005516:	d145      	bne.n	80055a4 <_malloc_r+0xdc>
 8005518:	2c00      	cmp	r4, #0
 800551a:	d048      	beq.n	80055ae <_malloc_r+0xe6>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	4631      	mov	r1, r6
 8005520:	4638      	mov	r0, r7
 8005522:	eb04 0903 	add.w	r9, r4, r3
 8005526:	f000 fe43 	bl	80061b0 <_sbrk_r>
 800552a:	4581      	cmp	r9, r0
 800552c:	d13f      	bne.n	80055ae <_malloc_r+0xe6>
 800552e:	6821      	ldr	r1, [r4, #0]
 8005530:	4638      	mov	r0, r7
 8005532:	1a6d      	subs	r5, r5, r1
 8005534:	4629      	mov	r1, r5
 8005536:	f7ff ffa7 	bl	8005488 <sbrk_aligned>
 800553a:	3001      	adds	r0, #1
 800553c:	d037      	beq.n	80055ae <_malloc_r+0xe6>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	442b      	add	r3, r5
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	f8d8 3000 	ldr.w	r3, [r8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d038      	beq.n	80055be <_malloc_r+0xf6>
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	42a2      	cmp	r2, r4
 8005550:	d12b      	bne.n	80055aa <_malloc_r+0xe2>
 8005552:	2200      	movs	r2, #0
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	e00f      	b.n	8005578 <_malloc_r+0xb0>
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	1b52      	subs	r2, r2, r5
 800555c:	d41f      	bmi.n	800559e <_malloc_r+0xd6>
 800555e:	2a0b      	cmp	r2, #11
 8005560:	d917      	bls.n	8005592 <_malloc_r+0xca>
 8005562:	1961      	adds	r1, r4, r5
 8005564:	42a3      	cmp	r3, r4
 8005566:	6025      	str	r5, [r4, #0]
 8005568:	bf18      	it	ne
 800556a:	6059      	strne	r1, [r3, #4]
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	bf08      	it	eq
 8005570:	f8c8 1000 	streq.w	r1, [r8]
 8005574:	5162      	str	r2, [r4, r5]
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	4638      	mov	r0, r7
 800557a:	f104 060b 	add.w	r6, r4, #11
 800557e:	f000 f829 	bl	80055d4 <__malloc_unlock>
 8005582:	f026 0607 	bic.w	r6, r6, #7
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	1af2      	subs	r2, r6, r3
 800558a:	d0ae      	beq.n	80054ea <_malloc_r+0x22>
 800558c:	1b9b      	subs	r3, r3, r6
 800558e:	50a3      	str	r3, [r4, r2]
 8005590:	e7ab      	b.n	80054ea <_malloc_r+0x22>
 8005592:	42a3      	cmp	r3, r4
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	d1dd      	bne.n	8005554 <_malloc_r+0x8c>
 8005598:	f8c8 2000 	str.w	r2, [r8]
 800559c:	e7ec      	b.n	8005578 <_malloc_r+0xb0>
 800559e:	4623      	mov	r3, r4
 80055a0:	6864      	ldr	r4, [r4, #4]
 80055a2:	e7ac      	b.n	80054fe <_malloc_r+0x36>
 80055a4:	4634      	mov	r4, r6
 80055a6:	6876      	ldr	r6, [r6, #4]
 80055a8:	e7b4      	b.n	8005514 <_malloc_r+0x4c>
 80055aa:	4613      	mov	r3, r2
 80055ac:	e7cc      	b.n	8005548 <_malloc_r+0x80>
 80055ae:	230c      	movs	r3, #12
 80055b0:	4638      	mov	r0, r7
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	f000 f80e 	bl	80055d4 <__malloc_unlock>
 80055b8:	e797      	b.n	80054ea <_malloc_r+0x22>
 80055ba:	6025      	str	r5, [r4, #0]
 80055bc:	e7dc      	b.n	8005578 <_malloc_r+0xb0>
 80055be:	605b      	str	r3, [r3, #4]
 80055c0:	deff      	udf	#255	; 0xff
 80055c2:	bf00      	nop
 80055c4:	200003c4 	.word	0x200003c4

080055c8 <__malloc_lock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__malloc_lock+0x8>)
 80055ca:	f7ff b88f 	b.w	80046ec <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	200003c0 	.word	0x200003c0

080055d4 <__malloc_unlock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__malloc_unlock+0x8>)
 80055d6:	f7ff b88a 	b.w	80046ee <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	200003c0 	.word	0x200003c0

080055e0 <_Balloc>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	69c6      	ldr	r6, [r0, #28]
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	b976      	cbnz	r6, 8005608 <_Balloc+0x28>
 80055ea:	2010      	movs	r0, #16
 80055ec:	f7ff ff44 	bl	8005478 <malloc>
 80055f0:	4602      	mov	r2, r0
 80055f2:	61e0      	str	r0, [r4, #28]
 80055f4:	b920      	cbnz	r0, 8005600 <_Balloc+0x20>
 80055f6:	216b      	movs	r1, #107	; 0x6b
 80055f8:	4b17      	ldr	r3, [pc, #92]	; (8005658 <_Balloc+0x78>)
 80055fa:	4818      	ldr	r0, [pc, #96]	; (800565c <_Balloc+0x7c>)
 80055fc:	f000 fdf6 	bl	80061ec <__assert_func>
 8005600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005604:	6006      	str	r6, [r0, #0]
 8005606:	60c6      	str	r6, [r0, #12]
 8005608:	69e6      	ldr	r6, [r4, #28]
 800560a:	68f3      	ldr	r3, [r6, #12]
 800560c:	b183      	cbz	r3, 8005630 <_Balloc+0x50>
 800560e:	69e3      	ldr	r3, [r4, #28]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005616:	b9b8      	cbnz	r0, 8005648 <_Balloc+0x68>
 8005618:	2101      	movs	r1, #1
 800561a:	fa01 f605 	lsl.w	r6, r1, r5
 800561e:	1d72      	adds	r2, r6, #5
 8005620:	4620      	mov	r0, r4
 8005622:	0092      	lsls	r2, r2, #2
 8005624:	f000 fe00 	bl	8006228 <_calloc_r>
 8005628:	b160      	cbz	r0, 8005644 <_Balloc+0x64>
 800562a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800562e:	e00e      	b.n	800564e <_Balloc+0x6e>
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	2104      	movs	r1, #4
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fdf7 	bl	8006228 <_calloc_r>
 800563a:	69e3      	ldr	r3, [r4, #28]
 800563c:	60f0      	str	r0, [r6, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e4      	bne.n	800560e <_Balloc+0x2e>
 8005644:	2000      	movs	r0, #0
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	6802      	ldr	r2, [r0, #0]
 800564a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800564e:	2300      	movs	r3, #0
 8005650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005654:	e7f7      	b.n	8005646 <_Balloc+0x66>
 8005656:	bf00      	nop
 8005658:	080072a3 	.word	0x080072a3
 800565c:	08007323 	.word	0x08007323

08005660 <_Bfree>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	69c6      	ldr	r6, [r0, #28]
 8005664:	4605      	mov	r5, r0
 8005666:	460c      	mov	r4, r1
 8005668:	b976      	cbnz	r6, 8005688 <_Bfree+0x28>
 800566a:	2010      	movs	r0, #16
 800566c:	f7ff ff04 	bl	8005478 <malloc>
 8005670:	4602      	mov	r2, r0
 8005672:	61e8      	str	r0, [r5, #28]
 8005674:	b920      	cbnz	r0, 8005680 <_Bfree+0x20>
 8005676:	218f      	movs	r1, #143	; 0x8f
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <_Bfree+0x3c>)
 800567a:	4809      	ldr	r0, [pc, #36]	; (80056a0 <_Bfree+0x40>)
 800567c:	f000 fdb6 	bl	80061ec <__assert_func>
 8005680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005684:	6006      	str	r6, [r0, #0]
 8005686:	60c6      	str	r6, [r0, #12]
 8005688:	b13c      	cbz	r4, 800569a <_Bfree+0x3a>
 800568a:	69eb      	ldr	r3, [r5, #28]
 800568c:	6862      	ldr	r2, [r4, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005694:	6021      	str	r1, [r4, #0]
 8005696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	080072a3 	.word	0x080072a3
 80056a0:	08007323 	.word	0x08007323

080056a4 <__multadd>:
 80056a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	4607      	mov	r7, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	461e      	mov	r6, r3
 80056ae:	2000      	movs	r0, #0
 80056b0:	690d      	ldr	r5, [r1, #16]
 80056b2:	f101 0c14 	add.w	ip, r1, #20
 80056b6:	f8dc 3000 	ldr.w	r3, [ip]
 80056ba:	3001      	adds	r0, #1
 80056bc:	b299      	uxth	r1, r3
 80056be:	fb02 6101 	mla	r1, r2, r1, r6
 80056c2:	0c1e      	lsrs	r6, r3, #16
 80056c4:	0c0b      	lsrs	r3, r1, #16
 80056c6:	fb02 3306 	mla	r3, r2, r6, r3
 80056ca:	b289      	uxth	r1, r1
 80056cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056d0:	4285      	cmp	r5, r0
 80056d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056d6:	f84c 1b04 	str.w	r1, [ip], #4
 80056da:	dcec      	bgt.n	80056b6 <__multadd+0x12>
 80056dc:	b30e      	cbz	r6, 8005722 <__multadd+0x7e>
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc19      	bgt.n	8005718 <__multadd+0x74>
 80056e4:	6861      	ldr	r1, [r4, #4]
 80056e6:	4638      	mov	r0, r7
 80056e8:	3101      	adds	r1, #1
 80056ea:	f7ff ff79 	bl	80055e0 <_Balloc>
 80056ee:	4680      	mov	r8, r0
 80056f0:	b928      	cbnz	r0, 80056fe <__multadd+0x5a>
 80056f2:	4602      	mov	r2, r0
 80056f4:	21ba      	movs	r1, #186	; 0xba
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <__multadd+0x84>)
 80056f8:	480c      	ldr	r0, [pc, #48]	; (800572c <__multadd+0x88>)
 80056fa:	f000 fd77 	bl	80061ec <__assert_func>
 80056fe:	6922      	ldr	r2, [r4, #16]
 8005700:	f104 010c 	add.w	r1, r4, #12
 8005704:	3202      	adds	r2, #2
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	300c      	adds	r0, #12
 800570a:	f000 fd61 	bl	80061d0 <memcpy>
 800570e:	4621      	mov	r1, r4
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ffa5 	bl	8005660 <_Bfree>
 8005716:	4644      	mov	r4, r8
 8005718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800571c:	3501      	adds	r5, #1
 800571e:	615e      	str	r6, [r3, #20]
 8005720:	6125      	str	r5, [r4, #16]
 8005722:	4620      	mov	r0, r4
 8005724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005728:	08007312 	.word	0x08007312
 800572c:	08007323 	.word	0x08007323

08005730 <__hi0bits>:
 8005730:	0c02      	lsrs	r2, r0, #16
 8005732:	0412      	lsls	r2, r2, #16
 8005734:	4603      	mov	r3, r0
 8005736:	b9ca      	cbnz	r2, 800576c <__hi0bits+0x3c>
 8005738:	0403      	lsls	r3, r0, #16
 800573a:	2010      	movs	r0, #16
 800573c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005740:	bf04      	itt	eq
 8005742:	021b      	lsleq	r3, r3, #8
 8005744:	3008      	addeq	r0, #8
 8005746:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800574a:	bf04      	itt	eq
 800574c:	011b      	lsleq	r3, r3, #4
 800574e:	3004      	addeq	r0, #4
 8005750:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005754:	bf04      	itt	eq
 8005756:	009b      	lsleq	r3, r3, #2
 8005758:	3002      	addeq	r0, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	db05      	blt.n	800576a <__hi0bits+0x3a>
 800575e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005762:	f100 0001 	add.w	r0, r0, #1
 8005766:	bf08      	it	eq
 8005768:	2020      	moveq	r0, #32
 800576a:	4770      	bx	lr
 800576c:	2000      	movs	r0, #0
 800576e:	e7e5      	b.n	800573c <__hi0bits+0xc>

08005770 <__lo0bits>:
 8005770:	6803      	ldr	r3, [r0, #0]
 8005772:	4602      	mov	r2, r0
 8005774:	f013 0007 	ands.w	r0, r3, #7
 8005778:	d00b      	beq.n	8005792 <__lo0bits+0x22>
 800577a:	07d9      	lsls	r1, r3, #31
 800577c:	d421      	bmi.n	80057c2 <__lo0bits+0x52>
 800577e:	0798      	lsls	r0, r3, #30
 8005780:	bf49      	itett	mi
 8005782:	085b      	lsrmi	r3, r3, #1
 8005784:	089b      	lsrpl	r3, r3, #2
 8005786:	2001      	movmi	r0, #1
 8005788:	6013      	strmi	r3, [r2, #0]
 800578a:	bf5c      	itt	pl
 800578c:	2002      	movpl	r0, #2
 800578e:	6013      	strpl	r3, [r2, #0]
 8005790:	4770      	bx	lr
 8005792:	b299      	uxth	r1, r3
 8005794:	b909      	cbnz	r1, 800579a <__lo0bits+0x2a>
 8005796:	2010      	movs	r0, #16
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	b2d9      	uxtb	r1, r3
 800579c:	b909      	cbnz	r1, 80057a2 <__lo0bits+0x32>
 800579e:	3008      	adds	r0, #8
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	0719      	lsls	r1, r3, #28
 80057a4:	bf04      	itt	eq
 80057a6:	091b      	lsreq	r3, r3, #4
 80057a8:	3004      	addeq	r0, #4
 80057aa:	0799      	lsls	r1, r3, #30
 80057ac:	bf04      	itt	eq
 80057ae:	089b      	lsreq	r3, r3, #2
 80057b0:	3002      	addeq	r0, #2
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	d403      	bmi.n	80057be <__lo0bits+0x4e>
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	f100 0001 	add.w	r0, r0, #1
 80057bc:	d003      	beq.n	80057c6 <__lo0bits+0x56>
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4770      	bx	lr
 80057c2:	2000      	movs	r0, #0
 80057c4:	4770      	bx	lr
 80057c6:	2020      	movs	r0, #32
 80057c8:	4770      	bx	lr
	...

080057cc <__i2b>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	460c      	mov	r4, r1
 80057d0:	2101      	movs	r1, #1
 80057d2:	f7ff ff05 	bl	80055e0 <_Balloc>
 80057d6:	4602      	mov	r2, r0
 80057d8:	b928      	cbnz	r0, 80057e6 <__i2b+0x1a>
 80057da:	f240 1145 	movw	r1, #325	; 0x145
 80057de:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <__i2b+0x24>)
 80057e0:	4804      	ldr	r0, [pc, #16]	; (80057f4 <__i2b+0x28>)
 80057e2:	f000 fd03 	bl	80061ec <__assert_func>
 80057e6:	2301      	movs	r3, #1
 80057e8:	6144      	str	r4, [r0, #20]
 80057ea:	6103      	str	r3, [r0, #16]
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	bf00      	nop
 80057f0:	08007312 	.word	0x08007312
 80057f4:	08007323 	.word	0x08007323

080057f8 <__multiply>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	4691      	mov	r9, r2
 80057fe:	690a      	ldr	r2, [r1, #16]
 8005800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005804:	460c      	mov	r4, r1
 8005806:	429a      	cmp	r2, r3
 8005808:	bfbe      	ittt	lt
 800580a:	460b      	movlt	r3, r1
 800580c:	464c      	movlt	r4, r9
 800580e:	4699      	movlt	r9, r3
 8005810:	6927      	ldr	r7, [r4, #16]
 8005812:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005816:	68a3      	ldr	r3, [r4, #8]
 8005818:	6861      	ldr	r1, [r4, #4]
 800581a:	eb07 060a 	add.w	r6, r7, sl
 800581e:	42b3      	cmp	r3, r6
 8005820:	b085      	sub	sp, #20
 8005822:	bfb8      	it	lt
 8005824:	3101      	addlt	r1, #1
 8005826:	f7ff fedb 	bl	80055e0 <_Balloc>
 800582a:	b930      	cbnz	r0, 800583a <__multiply+0x42>
 800582c:	4602      	mov	r2, r0
 800582e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005832:	4b43      	ldr	r3, [pc, #268]	; (8005940 <__multiply+0x148>)
 8005834:	4843      	ldr	r0, [pc, #268]	; (8005944 <__multiply+0x14c>)
 8005836:	f000 fcd9 	bl	80061ec <__assert_func>
 800583a:	f100 0514 	add.w	r5, r0, #20
 800583e:	462b      	mov	r3, r5
 8005840:	2200      	movs	r2, #0
 8005842:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005846:	4543      	cmp	r3, r8
 8005848:	d321      	bcc.n	800588e <__multiply+0x96>
 800584a:	f104 0314 	add.w	r3, r4, #20
 800584e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005852:	f109 0314 	add.w	r3, r9, #20
 8005856:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800585a:	9202      	str	r2, [sp, #8]
 800585c:	1b3a      	subs	r2, r7, r4
 800585e:	3a15      	subs	r2, #21
 8005860:	f022 0203 	bic.w	r2, r2, #3
 8005864:	3204      	adds	r2, #4
 8005866:	f104 0115 	add.w	r1, r4, #21
 800586a:	428f      	cmp	r7, r1
 800586c:	bf38      	it	cc
 800586e:	2204      	movcc	r2, #4
 8005870:	9201      	str	r2, [sp, #4]
 8005872:	9a02      	ldr	r2, [sp, #8]
 8005874:	9303      	str	r3, [sp, #12]
 8005876:	429a      	cmp	r2, r3
 8005878:	d80c      	bhi.n	8005894 <__multiply+0x9c>
 800587a:	2e00      	cmp	r6, #0
 800587c:	dd03      	ble.n	8005886 <__multiply+0x8e>
 800587e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005882:	2b00      	cmp	r3, #0
 8005884:	d05a      	beq.n	800593c <__multiply+0x144>
 8005886:	6106      	str	r6, [r0, #16]
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588e:	f843 2b04 	str.w	r2, [r3], #4
 8005892:	e7d8      	b.n	8005846 <__multiply+0x4e>
 8005894:	f8b3 a000 	ldrh.w	sl, [r3]
 8005898:	f1ba 0f00 	cmp.w	sl, #0
 800589c:	d023      	beq.n	80058e6 <__multiply+0xee>
 800589e:	46a9      	mov	r9, r5
 80058a0:	f04f 0c00 	mov.w	ip, #0
 80058a4:	f104 0e14 	add.w	lr, r4, #20
 80058a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80058ac:	f8d9 1000 	ldr.w	r1, [r9]
 80058b0:	fa1f fb82 	uxth.w	fp, r2
 80058b4:	b289      	uxth	r1, r1
 80058b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80058ba:	4461      	add	r1, ip
 80058bc:	f8d9 c000 	ldr.w	ip, [r9]
 80058c0:	0c12      	lsrs	r2, r2, #16
 80058c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80058c6:	fb0a c202 	mla	r2, sl, r2, ip
 80058ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058ce:	b289      	uxth	r1, r1
 80058d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058d4:	4577      	cmp	r7, lr
 80058d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058da:	f849 1b04 	str.w	r1, [r9], #4
 80058de:	d8e3      	bhi.n	80058a8 <__multiply+0xb0>
 80058e0:	9a01      	ldr	r2, [sp, #4]
 80058e2:	f845 c002 	str.w	ip, [r5, r2]
 80058e6:	9a03      	ldr	r2, [sp, #12]
 80058e8:	3304      	adds	r3, #4
 80058ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058ee:	f1b9 0f00 	cmp.w	r9, #0
 80058f2:	d021      	beq.n	8005938 <__multiply+0x140>
 80058f4:	46ae      	mov	lr, r5
 80058f6:	f04f 0a00 	mov.w	sl, #0
 80058fa:	6829      	ldr	r1, [r5, #0]
 80058fc:	f104 0c14 	add.w	ip, r4, #20
 8005900:	f8bc b000 	ldrh.w	fp, [ip]
 8005904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005908:	b289      	uxth	r1, r1
 800590a:	fb09 220b 	mla	r2, r9, fp, r2
 800590e:	4452      	add	r2, sl
 8005910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005914:	f84e 1b04 	str.w	r1, [lr], #4
 8005918:	f85c 1b04 	ldr.w	r1, [ip], #4
 800591c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005920:	f8be 1000 	ldrh.w	r1, [lr]
 8005924:	4567      	cmp	r7, ip
 8005926:	fb09 110a 	mla	r1, r9, sl, r1
 800592a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800592e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005932:	d8e5      	bhi.n	8005900 <__multiply+0x108>
 8005934:	9a01      	ldr	r2, [sp, #4]
 8005936:	50a9      	str	r1, [r5, r2]
 8005938:	3504      	adds	r5, #4
 800593a:	e79a      	b.n	8005872 <__multiply+0x7a>
 800593c:	3e01      	subs	r6, #1
 800593e:	e79c      	b.n	800587a <__multiply+0x82>
 8005940:	08007312 	.word	0x08007312
 8005944:	08007323 	.word	0x08007323

08005948 <__pow5mult>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4615      	mov	r5, r2
 800594e:	f012 0203 	ands.w	r2, r2, #3
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	d007      	beq.n	8005968 <__pow5mult+0x20>
 8005958:	4c25      	ldr	r4, [pc, #148]	; (80059f0 <__pow5mult+0xa8>)
 800595a:	3a01      	subs	r2, #1
 800595c:	2300      	movs	r3, #0
 800595e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005962:	f7ff fe9f 	bl	80056a4 <__multadd>
 8005966:	4607      	mov	r7, r0
 8005968:	10ad      	asrs	r5, r5, #2
 800596a:	d03d      	beq.n	80059e8 <__pow5mult+0xa0>
 800596c:	69f4      	ldr	r4, [r6, #28]
 800596e:	b97c      	cbnz	r4, 8005990 <__pow5mult+0x48>
 8005970:	2010      	movs	r0, #16
 8005972:	f7ff fd81 	bl	8005478 <malloc>
 8005976:	4602      	mov	r2, r0
 8005978:	61f0      	str	r0, [r6, #28]
 800597a:	b928      	cbnz	r0, 8005988 <__pow5mult+0x40>
 800597c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005980:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <__pow5mult+0xac>)
 8005982:	481d      	ldr	r0, [pc, #116]	; (80059f8 <__pow5mult+0xb0>)
 8005984:	f000 fc32 	bl	80061ec <__assert_func>
 8005988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800598c:	6004      	str	r4, [r0, #0]
 800598e:	60c4      	str	r4, [r0, #12]
 8005990:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005998:	b94c      	cbnz	r4, 80059ae <__pow5mult+0x66>
 800599a:	f240 2171 	movw	r1, #625	; 0x271
 800599e:	4630      	mov	r0, r6
 80059a0:	f7ff ff14 	bl	80057cc <__i2b>
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80059ac:	6003      	str	r3, [r0, #0]
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	07eb      	lsls	r3, r5, #31
 80059b4:	d50a      	bpl.n	80059cc <__pow5mult+0x84>
 80059b6:	4639      	mov	r1, r7
 80059b8:	4622      	mov	r2, r4
 80059ba:	4630      	mov	r0, r6
 80059bc:	f7ff ff1c 	bl	80057f8 <__multiply>
 80059c0:	4680      	mov	r8, r0
 80059c2:	4639      	mov	r1, r7
 80059c4:	4630      	mov	r0, r6
 80059c6:	f7ff fe4b 	bl	8005660 <_Bfree>
 80059ca:	4647      	mov	r7, r8
 80059cc:	106d      	asrs	r5, r5, #1
 80059ce:	d00b      	beq.n	80059e8 <__pow5mult+0xa0>
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	b938      	cbnz	r0, 80059e4 <__pow5mult+0x9c>
 80059d4:	4622      	mov	r2, r4
 80059d6:	4621      	mov	r1, r4
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff ff0d 	bl	80057f8 <__multiply>
 80059de:	6020      	str	r0, [r4, #0]
 80059e0:	f8c0 9000 	str.w	r9, [r0]
 80059e4:	4604      	mov	r4, r0
 80059e6:	e7e4      	b.n	80059b2 <__pow5mult+0x6a>
 80059e8:	4638      	mov	r0, r7
 80059ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ee:	bf00      	nop
 80059f0:	08007470 	.word	0x08007470
 80059f4:	080072a3 	.word	0x080072a3
 80059f8:	08007323 	.word	0x08007323

080059fc <__lshift>:
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	460c      	mov	r4, r1
 8005a02:	4607      	mov	r7, r0
 8005a04:	4691      	mov	r9, r2
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	6849      	ldr	r1, [r1, #4]
 8005a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a14:	f108 0601 	add.w	r6, r8, #1
 8005a18:	42b3      	cmp	r3, r6
 8005a1a:	db0b      	blt.n	8005a34 <__lshift+0x38>
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff fddf 	bl	80055e0 <_Balloc>
 8005a22:	4605      	mov	r5, r0
 8005a24:	b948      	cbnz	r0, 8005a3a <__lshift+0x3e>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005a2c:	4b27      	ldr	r3, [pc, #156]	; (8005acc <__lshift+0xd0>)
 8005a2e:	4828      	ldr	r0, [pc, #160]	; (8005ad0 <__lshift+0xd4>)
 8005a30:	f000 fbdc 	bl	80061ec <__assert_func>
 8005a34:	3101      	adds	r1, #1
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	e7ee      	b.n	8005a18 <__lshift+0x1c>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f100 0114 	add.w	r1, r0, #20
 8005a40:	f100 0210 	add.w	r2, r0, #16
 8005a44:	4618      	mov	r0, r3
 8005a46:	4553      	cmp	r3, sl
 8005a48:	db33      	blt.n	8005ab2 <__lshift+0xb6>
 8005a4a:	6920      	ldr	r0, [r4, #16]
 8005a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a50:	f104 0314 	add.w	r3, r4, #20
 8005a54:	f019 091f 	ands.w	r9, r9, #31
 8005a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a60:	d02b      	beq.n	8005aba <__lshift+0xbe>
 8005a62:	468a      	mov	sl, r1
 8005a64:	2200      	movs	r2, #0
 8005a66:	f1c9 0e20 	rsb	lr, r9, #32
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	fa00 f009 	lsl.w	r0, r0, r9
 8005a70:	4310      	orrs	r0, r2
 8005a72:	f84a 0b04 	str.w	r0, [sl], #4
 8005a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a7a:	459c      	cmp	ip, r3
 8005a7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a80:	d8f3      	bhi.n	8005a6a <__lshift+0x6e>
 8005a82:	ebac 0304 	sub.w	r3, ip, r4
 8005a86:	3b15      	subs	r3, #21
 8005a88:	f023 0303 	bic.w	r3, r3, #3
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	f104 0015 	add.w	r0, r4, #21
 8005a92:	4584      	cmp	ip, r0
 8005a94:	bf38      	it	cc
 8005a96:	2304      	movcc	r3, #4
 8005a98:	50ca      	str	r2, [r1, r3]
 8005a9a:	b10a      	cbz	r2, 8005aa0 <__lshift+0xa4>
 8005a9c:	f108 0602 	add.w	r6, r8, #2
 8005aa0:	3e01      	subs	r6, #1
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	612e      	str	r6, [r5, #16]
 8005aa8:	f7ff fdda 	bl	8005660 <_Bfree>
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	e7c5      	b.n	8005a46 <__lshift+0x4a>
 8005aba:	3904      	subs	r1, #4
 8005abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac0:	459c      	cmp	ip, r3
 8005ac2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ac6:	d8f9      	bhi.n	8005abc <__lshift+0xc0>
 8005ac8:	e7ea      	b.n	8005aa0 <__lshift+0xa4>
 8005aca:	bf00      	nop
 8005acc:	08007312 	.word	0x08007312
 8005ad0:	08007323 	.word	0x08007323

08005ad4 <__mcmp>:
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	690a      	ldr	r2, [r1, #16]
 8005ad8:	6900      	ldr	r0, [r0, #16]
 8005ada:	b530      	push	{r4, r5, lr}
 8005adc:	1a80      	subs	r0, r0, r2
 8005ade:	d10d      	bne.n	8005afc <__mcmp+0x28>
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	3114      	adds	r1, #20
 8005ae4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005aec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005af0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005af4:	4295      	cmp	r5, r2
 8005af6:	d002      	beq.n	8005afe <__mcmp+0x2a>
 8005af8:	d304      	bcc.n	8005b04 <__mcmp+0x30>
 8005afa:	2001      	movs	r0, #1
 8005afc:	bd30      	pop	{r4, r5, pc}
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	d3f4      	bcc.n	8005aec <__mcmp+0x18>
 8005b02:	e7fb      	b.n	8005afc <__mcmp+0x28>
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	e7f8      	b.n	8005afc <__mcmp+0x28>
	...

08005b0c <__mdiff>:
 8005b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460d      	mov	r5, r1
 8005b12:	4607      	mov	r7, r0
 8005b14:	4611      	mov	r1, r2
 8005b16:	4628      	mov	r0, r5
 8005b18:	4614      	mov	r4, r2
 8005b1a:	f7ff ffdb 	bl	8005ad4 <__mcmp>
 8005b1e:	1e06      	subs	r6, r0, #0
 8005b20:	d111      	bne.n	8005b46 <__mdiff+0x3a>
 8005b22:	4631      	mov	r1, r6
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff fd5b 	bl	80055e0 <_Balloc>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	b928      	cbnz	r0, 8005b3a <__mdiff+0x2e>
 8005b2e:	f240 2137 	movw	r1, #567	; 0x237
 8005b32:	4b3a      	ldr	r3, [pc, #232]	; (8005c1c <__mdiff+0x110>)
 8005b34:	483a      	ldr	r0, [pc, #232]	; (8005c20 <__mdiff+0x114>)
 8005b36:	f000 fb59 	bl	80061ec <__assert_func>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b40:	4610      	mov	r0, r2
 8005b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b46:	bfa4      	itt	ge
 8005b48:	4623      	movge	r3, r4
 8005b4a:	462c      	movge	r4, r5
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	6861      	ldr	r1, [r4, #4]
 8005b50:	bfa6      	itte	ge
 8005b52:	461d      	movge	r5, r3
 8005b54:	2600      	movge	r6, #0
 8005b56:	2601      	movlt	r6, #1
 8005b58:	f7ff fd42 	bl	80055e0 <_Balloc>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	b918      	cbnz	r0, 8005b68 <__mdiff+0x5c>
 8005b60:	f240 2145 	movw	r1, #581	; 0x245
 8005b64:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <__mdiff+0x110>)
 8005b66:	e7e5      	b.n	8005b34 <__mdiff+0x28>
 8005b68:	f102 0814 	add.w	r8, r2, #20
 8005b6c:	46c2      	mov	sl, r8
 8005b6e:	f04f 0c00 	mov.w	ip, #0
 8005b72:	6927      	ldr	r7, [r4, #16]
 8005b74:	60c6      	str	r6, [r0, #12]
 8005b76:	692e      	ldr	r6, [r5, #16]
 8005b78:	f104 0014 	add.w	r0, r4, #20
 8005b7c:	f105 0914 	add.w	r9, r5, #20
 8005b80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005b84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b88:	3410      	adds	r4, #16
 8005b8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005b8e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b92:	fa1f f18b 	uxth.w	r1, fp
 8005b96:	4461      	add	r1, ip
 8005b98:	fa1f fc83 	uxth.w	ip, r3
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	eba1 010c 	sub.w	r1, r1, ip
 8005ba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ba6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005baa:	b289      	uxth	r1, r1
 8005bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005bb0:	454e      	cmp	r6, r9
 8005bb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005bb6:	f84a 1b04 	str.w	r1, [sl], #4
 8005bba:	d8e6      	bhi.n	8005b8a <__mdiff+0x7e>
 8005bbc:	1b73      	subs	r3, r6, r5
 8005bbe:	3b15      	subs	r3, #21
 8005bc0:	f023 0303 	bic.w	r3, r3, #3
 8005bc4:	3515      	adds	r5, #21
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	42ae      	cmp	r6, r5
 8005bca:	bf38      	it	cc
 8005bcc:	2304      	movcc	r3, #4
 8005bce:	4418      	add	r0, r3
 8005bd0:	4443      	add	r3, r8
 8005bd2:	461e      	mov	r6, r3
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	4575      	cmp	r5, lr
 8005bd8:	d30e      	bcc.n	8005bf8 <__mdiff+0xec>
 8005bda:	f10e 0103 	add.w	r1, lr, #3
 8005bde:	1a09      	subs	r1, r1, r0
 8005be0:	f021 0103 	bic.w	r1, r1, #3
 8005be4:	3803      	subs	r0, #3
 8005be6:	4586      	cmp	lr, r0
 8005be8:	bf38      	it	cc
 8005bea:	2100      	movcc	r1, #0
 8005bec:	440b      	add	r3, r1
 8005bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bf2:	b189      	cbz	r1, 8005c18 <__mdiff+0x10c>
 8005bf4:	6117      	str	r7, [r2, #16]
 8005bf6:	e7a3      	b.n	8005b40 <__mdiff+0x34>
 8005bf8:	f855 8b04 	ldr.w	r8, [r5], #4
 8005bfc:	fa1f f188 	uxth.w	r1, r8
 8005c00:	4461      	add	r1, ip
 8005c02:	140c      	asrs	r4, r1, #16
 8005c04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005c08:	b289      	uxth	r1, r1
 8005c0a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c0e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005c12:	f846 1b04 	str.w	r1, [r6], #4
 8005c16:	e7de      	b.n	8005bd6 <__mdiff+0xca>
 8005c18:	3f01      	subs	r7, #1
 8005c1a:	e7e8      	b.n	8005bee <__mdiff+0xe2>
 8005c1c:	08007312 	.word	0x08007312
 8005c20:	08007323 	.word	0x08007323

08005c24 <__d2b>:
 8005c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c26:	2101      	movs	r1, #1
 8005c28:	4617      	mov	r7, r2
 8005c2a:	461c      	mov	r4, r3
 8005c2c:	9e08      	ldr	r6, [sp, #32]
 8005c2e:	f7ff fcd7 	bl	80055e0 <_Balloc>
 8005c32:	4605      	mov	r5, r0
 8005c34:	b930      	cbnz	r0, 8005c44 <__d2b+0x20>
 8005c36:	4602      	mov	r2, r0
 8005c38:	f240 310f 	movw	r1, #783	; 0x30f
 8005c3c:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <__d2b+0xa4>)
 8005c3e:	4823      	ldr	r0, [pc, #140]	; (8005ccc <__d2b+0xa8>)
 8005c40:	f000 fad4 	bl	80061ec <__assert_func>
 8005c44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005c48:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c4c:	bb24      	cbnz	r4, 8005c98 <__d2b+0x74>
 8005c4e:	2f00      	cmp	r7, #0
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	d026      	beq.n	8005ca2 <__d2b+0x7e>
 8005c54:	4668      	mov	r0, sp
 8005c56:	9700      	str	r7, [sp, #0]
 8005c58:	f7ff fd8a 	bl	8005770 <__lo0bits>
 8005c5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c60:	b1e8      	cbz	r0, 8005c9e <__d2b+0x7a>
 8005c62:	f1c0 0320 	rsb	r3, r0, #32
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	40c2      	lsrs	r2, r0
 8005c6e:	616b      	str	r3, [r5, #20]
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf14      	ite	ne
 8005c78:	2102      	movne	r1, #2
 8005c7a:	2101      	moveq	r1, #1
 8005c7c:	61ab      	str	r3, [r5, #24]
 8005c7e:	6129      	str	r1, [r5, #16]
 8005c80:	b1bc      	cbz	r4, 8005cb2 <__d2b+0x8e>
 8005c82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c86:	4404      	add	r4, r0
 8005c88:	6034      	str	r4, [r6, #0]
 8005c8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c90:	6018      	str	r0, [r3, #0]
 8005c92:	4628      	mov	r0, r5
 8005c94:	b003      	add	sp, #12
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c9c:	e7d7      	b.n	8005c4e <__d2b+0x2a>
 8005c9e:	6169      	str	r1, [r5, #20]
 8005ca0:	e7e7      	b.n	8005c72 <__d2b+0x4e>
 8005ca2:	a801      	add	r0, sp, #4
 8005ca4:	f7ff fd64 	bl	8005770 <__lo0bits>
 8005ca8:	9b01      	ldr	r3, [sp, #4]
 8005caa:	2101      	movs	r1, #1
 8005cac:	616b      	str	r3, [r5, #20]
 8005cae:	3020      	adds	r0, #32
 8005cb0:	e7e5      	b.n	8005c7e <__d2b+0x5a>
 8005cb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cb6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005cba:	6030      	str	r0, [r6, #0]
 8005cbc:	6918      	ldr	r0, [r3, #16]
 8005cbe:	f7ff fd37 	bl	8005730 <__hi0bits>
 8005cc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005cc6:	e7e2      	b.n	8005c8e <__d2b+0x6a>
 8005cc8:	08007312 	.word	0x08007312
 8005ccc:	08007323 	.word	0x08007323

08005cd0 <__sfputc_r>:
 8005cd0:	6893      	ldr	r3, [r2, #8]
 8005cd2:	b410      	push	{r4}
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	6093      	str	r3, [r2, #8]
 8005cda:	da07      	bge.n	8005cec <__sfputc_r+0x1c>
 8005cdc:	6994      	ldr	r4, [r2, #24]
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	db01      	blt.n	8005ce6 <__sfputc_r+0x16>
 8005ce2:	290a      	cmp	r1, #10
 8005ce4:	d102      	bne.n	8005cec <__sfputc_r+0x1c>
 8005ce6:	bc10      	pop	{r4}
 8005ce8:	f7fe bbef 	b.w	80044ca <__swbuf_r>
 8005cec:	6813      	ldr	r3, [r2, #0]
 8005cee:	1c58      	adds	r0, r3, #1
 8005cf0:	6010      	str	r0, [r2, #0]
 8005cf2:	7019      	strb	r1, [r3, #0]
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	bc10      	pop	{r4}
 8005cf8:	4770      	bx	lr

08005cfa <__sfputs_r>:
 8005cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	460f      	mov	r7, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	18d5      	adds	r5, r2, r3
 8005d04:	42ac      	cmp	r4, r5
 8005d06:	d101      	bne.n	8005d0c <__sfputs_r+0x12>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e007      	b.n	8005d1c <__sfputs_r+0x22>
 8005d0c:	463a      	mov	r2, r7
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d14:	f7ff ffdc 	bl	8005cd0 <__sfputc_r>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d1f3      	bne.n	8005d04 <__sfputs_r+0xa>
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d20 <_vfiprintf_r>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	460d      	mov	r5, r1
 8005d26:	4614      	mov	r4, r2
 8005d28:	4698      	mov	r8, r3
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	b09d      	sub	sp, #116	; 0x74
 8005d2e:	b118      	cbz	r0, 8005d38 <_vfiprintf_r+0x18>
 8005d30:	6a03      	ldr	r3, [r0, #32]
 8005d32:	b90b      	cbnz	r3, 8005d38 <_vfiprintf_r+0x18>
 8005d34:	f7fe fae2 	bl	80042fc <__sinit>
 8005d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x2a>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x2a>
 8005d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d46:	f7fe fcd1 	bl	80046ec <__retarget_lock_acquire_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	d501      	bpl.n	8005d54 <_vfiprintf_r+0x34>
 8005d50:	692b      	ldr	r3, [r5, #16]
 8005d52:	b99b      	cbnz	r3, 8005d7c <_vfiprintf_r+0x5c>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7fe fbf4 	bl	8004544 <__swsetup_r>
 8005d5c:	b170      	cbz	r0, 8005d7c <_vfiprintf_r+0x5c>
 8005d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d60:	07dc      	lsls	r4, r3, #31
 8005d62:	d504      	bpl.n	8005d6e <_vfiprintf_r+0x4e>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	b01d      	add	sp, #116	; 0x74
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	0598      	lsls	r0, r3, #22
 8005d72:	d4f7      	bmi.n	8005d64 <_vfiprintf_r+0x44>
 8005d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d76:	f7fe fcba 	bl	80046ee <__retarget_lock_release_recursive>
 8005d7a:	e7f3      	b.n	8005d64 <_vfiprintf_r+0x44>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	2320      	movs	r3, #32
 8005d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d86:	2330      	movs	r3, #48	; 0x30
 8005d88:	f04f 0901 	mov.w	r9, #1
 8005d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d90:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005f40 <_vfiprintf_r+0x220>
 8005d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d98:	4623      	mov	r3, r4
 8005d9a:	469a      	mov	sl, r3
 8005d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da0:	b10a      	cbz	r2, 8005da6 <_vfiprintf_r+0x86>
 8005da2:	2a25      	cmp	r2, #37	; 0x25
 8005da4:	d1f9      	bne.n	8005d9a <_vfiprintf_r+0x7a>
 8005da6:	ebba 0b04 	subs.w	fp, sl, r4
 8005daa:	d00b      	beq.n	8005dc4 <_vfiprintf_r+0xa4>
 8005dac:	465b      	mov	r3, fp
 8005dae:	4622      	mov	r2, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff ffa1 	bl	8005cfa <__sfputs_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	f000 80a9 	beq.w	8005f10 <_vfiprintf_r+0x1f0>
 8005dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc0:	445a      	add	r2, fp
 8005dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80a1 	beq.w	8005f10 <_vfiprintf_r+0x1f0>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd8:	f10a 0a01 	add.w	sl, sl, #1
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de4:	931a      	str	r3, [sp, #104]	; 0x68
 8005de6:	4654      	mov	r4, sl
 8005de8:	2205      	movs	r2, #5
 8005dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dee:	4854      	ldr	r0, [pc, #336]	; (8005f40 <_vfiprintf_r+0x220>)
 8005df0:	f7fe fc7e 	bl	80046f0 <memchr>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	b9d8      	cbnz	r0, 8005e30 <_vfiprintf_r+0x110>
 8005df8:	06d1      	lsls	r1, r2, #27
 8005dfa:	bf44      	itt	mi
 8005dfc:	2320      	movmi	r3, #32
 8005dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e02:	0713      	lsls	r3, r2, #28
 8005e04:	bf44      	itt	mi
 8005e06:	232b      	movmi	r3, #43	; 0x2b
 8005e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e10:	2b2a      	cmp	r3, #42	; 0x2a
 8005e12:	d015      	beq.n	8005e40 <_vfiprintf_r+0x120>
 8005e14:	4654      	mov	r4, sl
 8005e16:	2000      	movs	r0, #0
 8005e18:	f04f 0c0a 	mov.w	ip, #10
 8005e1c:	9a07      	ldr	r2, [sp, #28]
 8005e1e:	4621      	mov	r1, r4
 8005e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e24:	3b30      	subs	r3, #48	; 0x30
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d94d      	bls.n	8005ec6 <_vfiprintf_r+0x1a6>
 8005e2a:	b1b0      	cbz	r0, 8005e5a <_vfiprintf_r+0x13a>
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	e014      	b.n	8005e5a <_vfiprintf_r+0x13a>
 8005e30:	eba0 0308 	sub.w	r3, r0, r8
 8005e34:	fa09 f303 	lsl.w	r3, r9, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	46a2      	mov	sl, r4
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	e7d2      	b.n	8005de6 <_vfiprintf_r+0xc6>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	1d19      	adds	r1, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	9103      	str	r1, [sp, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bfbb      	ittet	lt
 8005e4c:	425b      	neglt	r3, r3
 8005e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e52:	9307      	strge	r3, [sp, #28]
 8005e54:	9307      	strlt	r3, [sp, #28]
 8005e56:	bfb8      	it	lt
 8005e58:	9204      	strlt	r2, [sp, #16]
 8005e5a:	7823      	ldrb	r3, [r4, #0]
 8005e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e5e:	d10c      	bne.n	8005e7a <_vfiprintf_r+0x15a>
 8005e60:	7863      	ldrb	r3, [r4, #1]
 8005e62:	2b2a      	cmp	r3, #42	; 0x2a
 8005e64:	d134      	bne.n	8005ed0 <_vfiprintf_r+0x1b0>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	3402      	adds	r4, #2
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	9203      	str	r2, [sp, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bfb8      	it	lt
 8005e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e78:	9305      	str	r3, [sp, #20]
 8005e7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f44 <_vfiprintf_r+0x224>
 8005e7e:	2203      	movs	r2, #3
 8005e80:	4650      	mov	r0, sl
 8005e82:	7821      	ldrb	r1, [r4, #0]
 8005e84:	f7fe fc34 	bl	80046f0 <memchr>
 8005e88:	b138      	cbz	r0, 8005e9a <_vfiprintf_r+0x17a>
 8005e8a:	2240      	movs	r2, #64	; 0x40
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	eba0 000a 	sub.w	r0, r0, sl
 8005e92:	4082      	lsls	r2, r0
 8005e94:	4313      	orrs	r3, r2
 8005e96:	3401      	adds	r4, #1
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9e:	2206      	movs	r2, #6
 8005ea0:	4829      	ldr	r0, [pc, #164]	; (8005f48 <_vfiprintf_r+0x228>)
 8005ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ea6:	f7fe fc23 	bl	80046f0 <memchr>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d03f      	beq.n	8005f2e <_vfiprintf_r+0x20e>
 8005eae:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <_vfiprintf_r+0x22c>)
 8005eb0:	bb1b      	cbnz	r3, 8005efa <_vfiprintf_r+0x1da>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	3308      	adds	r3, #8
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	443b      	add	r3, r7
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	e768      	b.n	8005d98 <_vfiprintf_r+0x78>
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	2001      	movs	r0, #1
 8005eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ece:	e7a6      	b.n	8005e1e <_vfiprintf_r+0xfe>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f04f 0c0a 	mov.w	ip, #10
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	3401      	adds	r4, #1
 8005eda:	9305      	str	r3, [sp, #20]
 8005edc:	4620      	mov	r0, r4
 8005ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee2:	3a30      	subs	r2, #48	; 0x30
 8005ee4:	2a09      	cmp	r2, #9
 8005ee6:	d903      	bls.n	8005ef0 <_vfiprintf_r+0x1d0>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0c6      	beq.n	8005e7a <_vfiprintf_r+0x15a>
 8005eec:	9105      	str	r1, [sp, #20]
 8005eee:	e7c4      	b.n	8005e7a <_vfiprintf_r+0x15a>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef8:	e7f0      	b.n	8005edc <_vfiprintf_r+0x1bc>
 8005efa:	ab03      	add	r3, sp, #12
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	462a      	mov	r2, r5
 8005f00:	4630      	mov	r0, r6
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <_vfiprintf_r+0x230>)
 8005f04:	a904      	add	r1, sp, #16
 8005f06:	f7fd fdbd 	bl	8003a84 <_printf_float>
 8005f0a:	4607      	mov	r7, r0
 8005f0c:	1c78      	adds	r0, r7, #1
 8005f0e:	d1d6      	bne.n	8005ebe <_vfiprintf_r+0x19e>
 8005f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f12:	07d9      	lsls	r1, r3, #31
 8005f14:	d405      	bmi.n	8005f22 <_vfiprintf_r+0x202>
 8005f16:	89ab      	ldrh	r3, [r5, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <_vfiprintf_r+0x202>
 8005f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f1e:	f7fe fbe6 	bl	80046ee <__retarget_lock_release_recursive>
 8005f22:	89ab      	ldrh	r3, [r5, #12]
 8005f24:	065b      	lsls	r3, r3, #25
 8005f26:	f53f af1d 	bmi.w	8005d64 <_vfiprintf_r+0x44>
 8005f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f2c:	e71c      	b.n	8005d68 <_vfiprintf_r+0x48>
 8005f2e:	ab03      	add	r3, sp, #12
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	462a      	mov	r2, r5
 8005f34:	4630      	mov	r0, r6
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <_vfiprintf_r+0x230>)
 8005f38:	a904      	add	r1, sp, #16
 8005f3a:	f7fe f843 	bl	8003fc4 <_printf_i>
 8005f3e:	e7e4      	b.n	8005f0a <_vfiprintf_r+0x1ea>
 8005f40:	0800747c 	.word	0x0800747c
 8005f44:	08007482 	.word	0x08007482
 8005f48:	08007486 	.word	0x08007486
 8005f4c:	08003a85 	.word	0x08003a85
 8005f50:	08005cfb 	.word	0x08005cfb

08005f54 <__sflush_r>:
 8005f54:	898a      	ldrh	r2, [r1, #12]
 8005f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f58:	4605      	mov	r5, r0
 8005f5a:	0710      	lsls	r0, r2, #28
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	d457      	bmi.n	8006010 <__sflush_r+0xbc>
 8005f60:	684b      	ldr	r3, [r1, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dc04      	bgt.n	8005f70 <__sflush_r+0x1c>
 8005f66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc01      	bgt.n	8005f70 <__sflush_r+0x1c>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f72:	2e00      	cmp	r6, #0
 8005f74:	d0fa      	beq.n	8005f6c <__sflush_r+0x18>
 8005f76:	2300      	movs	r3, #0
 8005f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f7c:	682f      	ldr	r7, [r5, #0]
 8005f7e:	6a21      	ldr	r1, [r4, #32]
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	d032      	beq.n	8005fea <__sflush_r+0x96>
 8005f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	075a      	lsls	r2, r3, #29
 8005f8a:	d505      	bpl.n	8005f98 <__sflush_r+0x44>
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	1ac0      	subs	r0, r0, r3
 8005f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f92:	b10b      	cbz	r3, 8005f98 <__sflush_r+0x44>
 8005f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f96:	1ac0      	subs	r0, r0, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	6a21      	ldr	r1, [r4, #32]
 8005fa2:	47b0      	blx	r6
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	d106      	bne.n	8005fb8 <__sflush_r+0x64>
 8005faa:	6829      	ldr	r1, [r5, #0]
 8005fac:	291d      	cmp	r1, #29
 8005fae:	d82b      	bhi.n	8006008 <__sflush_r+0xb4>
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <__sflush_r+0x100>)
 8005fb2:	410a      	asrs	r2, r1
 8005fb4:	07d6      	lsls	r6, r2, #31
 8005fb6:	d427      	bmi.n	8006008 <__sflush_r+0xb4>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	6062      	str	r2, [r4, #4]
 8005fbc:	6922      	ldr	r2, [r4, #16]
 8005fbe:	04d9      	lsls	r1, r3, #19
 8005fc0:	6022      	str	r2, [r4, #0]
 8005fc2:	d504      	bpl.n	8005fce <__sflush_r+0x7a>
 8005fc4:	1c42      	adds	r2, r0, #1
 8005fc6:	d101      	bne.n	8005fcc <__sflush_r+0x78>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b903      	cbnz	r3, 8005fce <__sflush_r+0x7a>
 8005fcc:	6560      	str	r0, [r4, #84]	; 0x54
 8005fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fd0:	602f      	str	r7, [r5, #0]
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	d0ca      	beq.n	8005f6c <__sflush_r+0x18>
 8005fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	d002      	beq.n	8005fe4 <__sflush_r+0x90>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7ff fa02 	bl	80053e8 <_free_r>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	6360      	str	r0, [r4, #52]	; 0x34
 8005fe8:	e7c1      	b.n	8005f6e <__sflush_r+0x1a>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b0      	blx	r6
 8005ff0:	1c41      	adds	r1, r0, #1
 8005ff2:	d1c8      	bne.n	8005f86 <__sflush_r+0x32>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0c5      	beq.n	8005f86 <__sflush_r+0x32>
 8005ffa:	2b1d      	cmp	r3, #29
 8005ffc:	d001      	beq.n	8006002 <__sflush_r+0xae>
 8005ffe:	2b16      	cmp	r3, #22
 8006000:	d101      	bne.n	8006006 <__sflush_r+0xb2>
 8006002:	602f      	str	r7, [r5, #0]
 8006004:	e7b2      	b.n	8005f6c <__sflush_r+0x18>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600c:	81a3      	strh	r3, [r4, #12]
 800600e:	e7ae      	b.n	8005f6e <__sflush_r+0x1a>
 8006010:	690f      	ldr	r7, [r1, #16]
 8006012:	2f00      	cmp	r7, #0
 8006014:	d0aa      	beq.n	8005f6c <__sflush_r+0x18>
 8006016:	0793      	lsls	r3, r2, #30
 8006018:	bf18      	it	ne
 800601a:	2300      	movne	r3, #0
 800601c:	680e      	ldr	r6, [r1, #0]
 800601e:	bf08      	it	eq
 8006020:	694b      	ldreq	r3, [r1, #20]
 8006022:	1bf6      	subs	r6, r6, r7
 8006024:	600f      	str	r7, [r1, #0]
 8006026:	608b      	str	r3, [r1, #8]
 8006028:	2e00      	cmp	r6, #0
 800602a:	dd9f      	ble.n	8005f6c <__sflush_r+0x18>
 800602c:	4633      	mov	r3, r6
 800602e:	463a      	mov	r2, r7
 8006030:	4628      	mov	r0, r5
 8006032:	6a21      	ldr	r1, [r4, #32]
 8006034:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006038:	47e0      	blx	ip
 800603a:	2800      	cmp	r0, #0
 800603c:	dc06      	bgt.n	800604c <__sflush_r+0xf8>
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006048:	81a3      	strh	r3, [r4, #12]
 800604a:	e790      	b.n	8005f6e <__sflush_r+0x1a>
 800604c:	4407      	add	r7, r0
 800604e:	1a36      	subs	r6, r6, r0
 8006050:	e7ea      	b.n	8006028 <__sflush_r+0xd4>
 8006052:	bf00      	nop
 8006054:	dfbffffe 	.word	0xdfbffffe

08006058 <_fflush_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	4605      	mov	r5, r0
 800605e:	460c      	mov	r4, r1
 8006060:	b913      	cbnz	r3, 8006068 <_fflush_r+0x10>
 8006062:	2500      	movs	r5, #0
 8006064:	4628      	mov	r0, r5
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	b118      	cbz	r0, 8006072 <_fflush_r+0x1a>
 800606a:	6a03      	ldr	r3, [r0, #32]
 800606c:	b90b      	cbnz	r3, 8006072 <_fflush_r+0x1a>
 800606e:	f7fe f945 	bl	80042fc <__sinit>
 8006072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f3      	beq.n	8006062 <_fflush_r+0xa>
 800607a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800607c:	07d0      	lsls	r0, r2, #31
 800607e:	d404      	bmi.n	800608a <_fflush_r+0x32>
 8006080:	0599      	lsls	r1, r3, #22
 8006082:	d402      	bmi.n	800608a <_fflush_r+0x32>
 8006084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006086:	f7fe fb31 	bl	80046ec <__retarget_lock_acquire_recursive>
 800608a:	4628      	mov	r0, r5
 800608c:	4621      	mov	r1, r4
 800608e:	f7ff ff61 	bl	8005f54 <__sflush_r>
 8006092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006094:	4605      	mov	r5, r0
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d4e4      	bmi.n	8006064 <_fflush_r+0xc>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	059b      	lsls	r3, r3, #22
 800609e:	d4e1      	bmi.n	8006064 <_fflush_r+0xc>
 80060a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a2:	f7fe fb24 	bl	80046ee <__retarget_lock_release_recursive>
 80060a6:	e7dd      	b.n	8006064 <_fflush_r+0xc>

080060a8 <__swhatbuf_r>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	460c      	mov	r4, r1
 80060ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b0:	4615      	mov	r5, r2
 80060b2:	2900      	cmp	r1, #0
 80060b4:	461e      	mov	r6, r3
 80060b6:	b096      	sub	sp, #88	; 0x58
 80060b8:	da0c      	bge.n	80060d4 <__swhatbuf_r+0x2c>
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	2100      	movs	r1, #0
 80060be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060c2:	bf0c      	ite	eq
 80060c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060c8:	2340      	movne	r3, #64	; 0x40
 80060ca:	2000      	movs	r0, #0
 80060cc:	6031      	str	r1, [r6, #0]
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	b016      	add	sp, #88	; 0x58
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	466a      	mov	r2, sp
 80060d6:	f000 f849 	bl	800616c <_fstat_r>
 80060da:	2800      	cmp	r0, #0
 80060dc:	dbed      	blt.n	80060ba <__swhatbuf_r+0x12>
 80060de:	9901      	ldr	r1, [sp, #4]
 80060e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80060e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060e8:	4259      	negs	r1, r3
 80060ea:	4159      	adcs	r1, r3
 80060ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f0:	e7eb      	b.n	80060ca <__swhatbuf_r+0x22>

080060f2 <__smakebuf_r>:
 80060f2:	898b      	ldrh	r3, [r1, #12]
 80060f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060f6:	079d      	lsls	r5, r3, #30
 80060f8:	4606      	mov	r6, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	d507      	bpl.n	800610e <__smakebuf_r+0x1c>
 80060fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	2301      	movs	r3, #1
 8006108:	6163      	str	r3, [r4, #20]
 800610a:	b002      	add	sp, #8
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	466a      	mov	r2, sp
 8006110:	ab01      	add	r3, sp, #4
 8006112:	f7ff ffc9 	bl	80060a8 <__swhatbuf_r>
 8006116:	9900      	ldr	r1, [sp, #0]
 8006118:	4605      	mov	r5, r0
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff f9d4 	bl	80054c8 <_malloc_r>
 8006120:	b948      	cbnz	r0, 8006136 <__smakebuf_r+0x44>
 8006122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006126:	059a      	lsls	r2, r3, #22
 8006128:	d4ef      	bmi.n	800610a <__smakebuf_r+0x18>
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	f043 0302 	orr.w	r3, r3, #2
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	e7e3      	b.n	80060fe <__smakebuf_r+0xc>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	6020      	str	r0, [r4, #0]
 800613a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	9b00      	ldr	r3, [sp, #0]
 8006142:	6120      	str	r0, [r4, #16]
 8006144:	6163      	str	r3, [r4, #20]
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	b15b      	cbz	r3, 8006162 <__smakebuf_r+0x70>
 800614a:	4630      	mov	r0, r6
 800614c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006150:	f000 f81e 	bl	8006190 <_isatty_r>
 8006154:	b128      	cbz	r0, 8006162 <__smakebuf_r+0x70>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	431d      	orrs	r5, r3
 8006166:	81a5      	strh	r5, [r4, #12]
 8006168:	e7cf      	b.n	800610a <__smakebuf_r+0x18>
	...

0800616c <_fstat_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	2300      	movs	r3, #0
 8006170:	4d06      	ldr	r5, [pc, #24]	; (800618c <_fstat_r+0x20>)
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	f7fb fa78 	bl	800166e <_fstat>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d102      	bne.n	8006188 <_fstat_r+0x1c>
 8006182:	682b      	ldr	r3, [r5, #0]
 8006184:	b103      	cbz	r3, 8006188 <_fstat_r+0x1c>
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	bd38      	pop	{r3, r4, r5, pc}
 800618a:	bf00      	nop
 800618c:	200003bc 	.word	0x200003bc

08006190 <_isatty_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	2300      	movs	r3, #0
 8006194:	4d05      	ldr	r5, [pc, #20]	; (80061ac <_isatty_r+0x1c>)
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f7fb fa76 	bl	800168c <_isatty>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_isatty_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_isatty_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	200003bc 	.word	0x200003bc

080061b0 <_sbrk_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	2300      	movs	r3, #0
 80061b4:	4d05      	ldr	r5, [pc, #20]	; (80061cc <_sbrk_r+0x1c>)
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fb fa7c 	bl	80016b8 <_sbrk>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_sbrk_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_sbrk_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200003bc 	.word	0x200003bc

080061d0 <memcpy>:
 80061d0:	440a      	add	r2, r1
 80061d2:	4291      	cmp	r1, r2
 80061d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061d8:	d100      	bne.n	80061dc <memcpy+0xc>
 80061da:	4770      	bx	lr
 80061dc:	b510      	push	{r4, lr}
 80061de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061e2:	4291      	cmp	r1, r2
 80061e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e8:	d1f9      	bne.n	80061de <memcpy+0xe>
 80061ea:	bd10      	pop	{r4, pc}

080061ec <__assert_func>:
 80061ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ee:	4614      	mov	r4, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <__assert_func+0x2c>)
 80061f4:	4605      	mov	r5, r0
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68d8      	ldr	r0, [r3, #12]
 80061fa:	b14c      	cbz	r4, 8006210 <__assert_func+0x24>
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <__assert_func+0x30>)
 80061fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006202:	9100      	str	r1, [sp, #0]
 8006204:	462b      	mov	r3, r5
 8006206:	4906      	ldr	r1, [pc, #24]	; (8006220 <__assert_func+0x34>)
 8006208:	f000 f842 	bl	8006290 <fiprintf>
 800620c:	f000 f852 	bl	80062b4 <abort>
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <__assert_func+0x38>)
 8006212:	461c      	mov	r4, r3
 8006214:	e7f3      	b.n	80061fe <__assert_func+0x12>
 8006216:	bf00      	nop
 8006218:	20000064 	.word	0x20000064
 800621c:	08007497 	.word	0x08007497
 8006220:	080074a4 	.word	0x080074a4
 8006224:	080074d2 	.word	0x080074d2

08006228 <_calloc_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	fba1 5402 	umull	r5, r4, r1, r2
 800622e:	b934      	cbnz	r4, 800623e <_calloc_r+0x16>
 8006230:	4629      	mov	r1, r5
 8006232:	f7ff f949 	bl	80054c8 <_malloc_r>
 8006236:	4606      	mov	r6, r0
 8006238:	b928      	cbnz	r0, 8006246 <_calloc_r+0x1e>
 800623a:	4630      	mov	r0, r6
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	220c      	movs	r2, #12
 8006240:	2600      	movs	r6, #0
 8006242:	6002      	str	r2, [r0, #0]
 8006244:	e7f9      	b.n	800623a <_calloc_r+0x12>
 8006246:	462a      	mov	r2, r5
 8006248:	4621      	mov	r1, r4
 800624a:	f7fe f9d3 	bl	80045f4 <memset>
 800624e:	e7f4      	b.n	800623a <_calloc_r+0x12>

08006250 <__ascii_mbtowc>:
 8006250:	b082      	sub	sp, #8
 8006252:	b901      	cbnz	r1, 8006256 <__ascii_mbtowc+0x6>
 8006254:	a901      	add	r1, sp, #4
 8006256:	b142      	cbz	r2, 800626a <__ascii_mbtowc+0x1a>
 8006258:	b14b      	cbz	r3, 800626e <__ascii_mbtowc+0x1e>
 800625a:	7813      	ldrb	r3, [r2, #0]
 800625c:	600b      	str	r3, [r1, #0]
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	1e10      	subs	r0, r2, #0
 8006262:	bf18      	it	ne
 8006264:	2001      	movne	r0, #1
 8006266:	b002      	add	sp, #8
 8006268:	4770      	bx	lr
 800626a:	4610      	mov	r0, r2
 800626c:	e7fb      	b.n	8006266 <__ascii_mbtowc+0x16>
 800626e:	f06f 0001 	mvn.w	r0, #1
 8006272:	e7f8      	b.n	8006266 <__ascii_mbtowc+0x16>

08006274 <__ascii_wctomb>:
 8006274:	4603      	mov	r3, r0
 8006276:	4608      	mov	r0, r1
 8006278:	b141      	cbz	r1, 800628c <__ascii_wctomb+0x18>
 800627a:	2aff      	cmp	r2, #255	; 0xff
 800627c:	d904      	bls.n	8006288 <__ascii_wctomb+0x14>
 800627e:	228a      	movs	r2, #138	; 0x8a
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	4770      	bx	lr
 8006288:	2001      	movs	r0, #1
 800628a:	700a      	strb	r2, [r1, #0]
 800628c:	4770      	bx	lr
	...

08006290 <fiprintf>:
 8006290:	b40e      	push	{r1, r2, r3}
 8006292:	b503      	push	{r0, r1, lr}
 8006294:	4601      	mov	r1, r0
 8006296:	ab03      	add	r3, sp, #12
 8006298:	4805      	ldr	r0, [pc, #20]	; (80062b0 <fiprintf+0x20>)
 800629a:	f853 2b04 	ldr.w	r2, [r3], #4
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	f7ff fd3d 	bl	8005d20 <_vfiprintf_r>
 80062a6:	b002      	add	sp, #8
 80062a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062ac:	b003      	add	sp, #12
 80062ae:	4770      	bx	lr
 80062b0:	20000064 	.word	0x20000064

080062b4 <abort>:
 80062b4:	2006      	movs	r0, #6
 80062b6:	b508      	push	{r3, lr}
 80062b8:	f000 f82c 	bl	8006314 <raise>
 80062bc:	2001      	movs	r0, #1
 80062be:	f7fb f9a4 	bl	800160a <_exit>

080062c2 <_raise_r>:
 80062c2:	291f      	cmp	r1, #31
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4604      	mov	r4, r0
 80062c8:	460d      	mov	r5, r1
 80062ca:	d904      	bls.n	80062d6 <_raise_r+0x14>
 80062cc:	2316      	movs	r3, #22
 80062ce:	6003      	str	r3, [r0, #0]
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	bd38      	pop	{r3, r4, r5, pc}
 80062d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80062d8:	b112      	cbz	r2, 80062e0 <_raise_r+0x1e>
 80062da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062de:	b94b      	cbnz	r3, 80062f4 <_raise_r+0x32>
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f831 	bl	8006348 <_getpid_r>
 80062e6:	462a      	mov	r2, r5
 80062e8:	4601      	mov	r1, r0
 80062ea:	4620      	mov	r0, r4
 80062ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f0:	f000 b818 	b.w	8006324 <_kill_r>
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d00a      	beq.n	800630e <_raise_r+0x4c>
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	d103      	bne.n	8006304 <_raise_r+0x42>
 80062fc:	2316      	movs	r3, #22
 80062fe:	6003      	str	r3, [r0, #0]
 8006300:	2001      	movs	r0, #1
 8006302:	e7e7      	b.n	80062d4 <_raise_r+0x12>
 8006304:	2400      	movs	r4, #0
 8006306:	4628      	mov	r0, r5
 8006308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800630c:	4798      	blx	r3
 800630e:	2000      	movs	r0, #0
 8006310:	e7e0      	b.n	80062d4 <_raise_r+0x12>
	...

08006314 <raise>:
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <raise+0xc>)
 8006316:	4601      	mov	r1, r0
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	f7ff bfd2 	b.w	80062c2 <_raise_r>
 800631e:	bf00      	nop
 8006320:	20000064 	.word	0x20000064

08006324 <_kill_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	2300      	movs	r3, #0
 8006328:	4d06      	ldr	r5, [pc, #24]	; (8006344 <_kill_r+0x20>)
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	602b      	str	r3, [r5, #0]
 8006332:	f7fb f95a 	bl	80015ea <_kill>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d102      	bne.n	8006340 <_kill_r+0x1c>
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	b103      	cbz	r3, 8006340 <_kill_r+0x1c>
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	bd38      	pop	{r3, r4, r5, pc}
 8006342:	bf00      	nop
 8006344:	200003bc 	.word	0x200003bc

08006348 <_getpid_r>:
 8006348:	f7fb b948 	b.w	80015dc <_getpid>

0800634c <pow>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	4614      	mov	r4, r2
 8006352:	461d      	mov	r5, r3
 8006354:	4680      	mov	r8, r0
 8006356:	4689      	mov	r9, r1
 8006358:	f000 f866 	bl	8006428 <__ieee754_pow>
 800635c:	4622      	mov	r2, r4
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	462b      	mov	r3, r5
 8006364:	4620      	mov	r0, r4
 8006366:	4629      	mov	r1, r5
 8006368:	f7fa fb50 	bl	8000a0c <__aeabi_dcmpun>
 800636c:	bbc8      	cbnz	r0, 80063e2 <pow+0x96>
 800636e:	2200      	movs	r2, #0
 8006370:	2300      	movs	r3, #0
 8006372:	4640      	mov	r0, r8
 8006374:	4649      	mov	r1, r9
 8006376:	f7fa fb17 	bl	80009a8 <__aeabi_dcmpeq>
 800637a:	b1b8      	cbz	r0, 80063ac <pow+0x60>
 800637c:	2200      	movs	r2, #0
 800637e:	2300      	movs	r3, #0
 8006380:	4620      	mov	r0, r4
 8006382:	4629      	mov	r1, r5
 8006384:	f7fa fb10 	bl	80009a8 <__aeabi_dcmpeq>
 8006388:	2800      	cmp	r0, #0
 800638a:	d141      	bne.n	8006410 <pow+0xc4>
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f000 f844 	bl	800641c <finite>
 8006394:	b328      	cbz	r0, 80063e2 <pow+0x96>
 8006396:	2200      	movs	r2, #0
 8006398:	2300      	movs	r3, #0
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7fa fb0d 	bl	80009bc <__aeabi_dcmplt>
 80063a2:	b1f0      	cbz	r0, 80063e2 <pow+0x96>
 80063a4:	f7fe f978 	bl	8004698 <__errno>
 80063a8:	2322      	movs	r3, #34	; 0x22
 80063aa:	e019      	b.n	80063e0 <pow+0x94>
 80063ac:	4630      	mov	r0, r6
 80063ae:	4639      	mov	r1, r7
 80063b0:	f000 f834 	bl	800641c <finite>
 80063b4:	b9c8      	cbnz	r0, 80063ea <pow+0x9e>
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f000 f82f 	bl	800641c <finite>
 80063be:	b1a0      	cbz	r0, 80063ea <pow+0x9e>
 80063c0:	4620      	mov	r0, r4
 80063c2:	4629      	mov	r1, r5
 80063c4:	f000 f82a 	bl	800641c <finite>
 80063c8:	b178      	cbz	r0, 80063ea <pow+0x9e>
 80063ca:	4632      	mov	r2, r6
 80063cc:	463b      	mov	r3, r7
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa fb1b 	bl	8000a0c <__aeabi_dcmpun>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0e4      	beq.n	80063a4 <pow+0x58>
 80063da:	f7fe f95d 	bl	8004698 <__errno>
 80063de:	2321      	movs	r3, #33	; 0x21
 80063e0:	6003      	str	r3, [r0, #0]
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ea:	2200      	movs	r2, #0
 80063ec:	2300      	movs	r3, #0
 80063ee:	4630      	mov	r0, r6
 80063f0:	4639      	mov	r1, r7
 80063f2:	f7fa fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d0f3      	beq.n	80063e2 <pow+0x96>
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f000 f80d 	bl	800641c <finite>
 8006402:	2800      	cmp	r0, #0
 8006404:	d0ed      	beq.n	80063e2 <pow+0x96>
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	f000 f807 	bl	800641c <finite>
 800640e:	e7c8      	b.n	80063a2 <pow+0x56>
 8006410:	2600      	movs	r6, #0
 8006412:	4f01      	ldr	r7, [pc, #4]	; (8006418 <pow+0xcc>)
 8006414:	e7e5      	b.n	80063e2 <pow+0x96>
 8006416:	bf00      	nop
 8006418:	3ff00000 	.word	0x3ff00000

0800641c <finite>:
 800641c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006420:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006424:	0fc0      	lsrs	r0, r0, #31
 8006426:	4770      	bx	lr

08006428 <__ieee754_pow>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	b093      	sub	sp, #76	; 0x4c
 800642e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006432:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006436:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800643a:	4689      	mov	r9, r1
 800643c:	ea56 0102 	orrs.w	r1, r6, r2
 8006440:	4680      	mov	r8, r0
 8006442:	d111      	bne.n	8006468 <__ieee754_pow+0x40>
 8006444:	1803      	adds	r3, r0, r0
 8006446:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800644a:	4152      	adcs	r2, r2
 800644c:	4299      	cmp	r1, r3
 800644e:	4b82      	ldr	r3, [pc, #520]	; (8006658 <__ieee754_pow+0x230>)
 8006450:	4193      	sbcs	r3, r2
 8006452:	f080 84ba 	bcs.w	8006dca <__ieee754_pow+0x9a2>
 8006456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f7f9 fe85 	bl	800016c <__adddf3>
 8006462:	4683      	mov	fp, r0
 8006464:	468c      	mov	ip, r1
 8006466:	e06f      	b.n	8006548 <__ieee754_pow+0x120>
 8006468:	4b7c      	ldr	r3, [pc, #496]	; (800665c <__ieee754_pow+0x234>)
 800646a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800646e:	429c      	cmp	r4, r3
 8006470:	464d      	mov	r5, r9
 8006472:	4682      	mov	sl, r0
 8006474:	dc06      	bgt.n	8006484 <__ieee754_pow+0x5c>
 8006476:	d101      	bne.n	800647c <__ieee754_pow+0x54>
 8006478:	2800      	cmp	r0, #0
 800647a:	d1ec      	bne.n	8006456 <__ieee754_pow+0x2e>
 800647c:	429e      	cmp	r6, r3
 800647e:	dc01      	bgt.n	8006484 <__ieee754_pow+0x5c>
 8006480:	d10f      	bne.n	80064a2 <__ieee754_pow+0x7a>
 8006482:	b172      	cbz	r2, 80064a2 <__ieee754_pow+0x7a>
 8006484:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006488:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800648c:	ea55 050a 	orrs.w	r5, r5, sl
 8006490:	d1e1      	bne.n	8006456 <__ieee754_pow+0x2e>
 8006492:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006496:	18db      	adds	r3, r3, r3
 8006498:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800649c:	4152      	adcs	r2, r2
 800649e:	429d      	cmp	r5, r3
 80064a0:	e7d5      	b.n	800644e <__ieee754_pow+0x26>
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	da39      	bge.n	800651a <__ieee754_pow+0xf2>
 80064a6:	4b6e      	ldr	r3, [pc, #440]	; (8006660 <__ieee754_pow+0x238>)
 80064a8:	429e      	cmp	r6, r3
 80064aa:	dc52      	bgt.n	8006552 <__ieee754_pow+0x12a>
 80064ac:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80064b0:	429e      	cmp	r6, r3
 80064b2:	f340 849d 	ble.w	8006df0 <__ieee754_pow+0x9c8>
 80064b6:	1533      	asrs	r3, r6, #20
 80064b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80064bc:	2b14      	cmp	r3, #20
 80064be:	dd0f      	ble.n	80064e0 <__ieee754_pow+0xb8>
 80064c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80064c4:	fa22 f103 	lsr.w	r1, r2, r3
 80064c8:	fa01 f303 	lsl.w	r3, r1, r3
 80064cc:	4293      	cmp	r3, r2
 80064ce:	f040 848f 	bne.w	8006df0 <__ieee754_pow+0x9c8>
 80064d2:	f001 0101 	and.w	r1, r1, #1
 80064d6:	f1c1 0302 	rsb	r3, r1, #2
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	b182      	cbz	r2, 8006500 <__ieee754_pow+0xd8>
 80064de:	e05d      	b.n	800659c <__ieee754_pow+0x174>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d159      	bne.n	8006598 <__ieee754_pow+0x170>
 80064e4:	f1c3 0314 	rsb	r3, r3, #20
 80064e8:	fa46 f103 	asr.w	r1, r6, r3
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	42b3      	cmp	r3, r6
 80064f2:	f040 847a 	bne.w	8006dea <__ieee754_pow+0x9c2>
 80064f6:	f001 0101 	and.w	r1, r1, #1
 80064fa:	f1c1 0302 	rsb	r3, r1, #2
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4b58      	ldr	r3, [pc, #352]	; (8006664 <__ieee754_pow+0x23c>)
 8006502:	429e      	cmp	r6, r3
 8006504:	d132      	bne.n	800656c <__ieee754_pow+0x144>
 8006506:	2f00      	cmp	r7, #0
 8006508:	f280 846b 	bge.w	8006de2 <__ieee754_pow+0x9ba>
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	2000      	movs	r0, #0
 8006512:	4954      	ldr	r1, [pc, #336]	; (8006664 <__ieee754_pow+0x23c>)
 8006514:	f7fa f90a 	bl	800072c <__aeabi_ddiv>
 8006518:	e7a3      	b.n	8006462 <__ieee754_pow+0x3a>
 800651a:	2300      	movs	r3, #0
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2a00      	cmp	r2, #0
 8006520:	d13c      	bne.n	800659c <__ieee754_pow+0x174>
 8006522:	4b4e      	ldr	r3, [pc, #312]	; (800665c <__ieee754_pow+0x234>)
 8006524:	429e      	cmp	r6, r3
 8006526:	d1eb      	bne.n	8006500 <__ieee754_pow+0xd8>
 8006528:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800652c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006530:	ea53 030a 	orrs.w	r3, r3, sl
 8006534:	f000 8449 	beq.w	8006dca <__ieee754_pow+0x9a2>
 8006538:	4b4b      	ldr	r3, [pc, #300]	; (8006668 <__ieee754_pow+0x240>)
 800653a:	429c      	cmp	r4, r3
 800653c:	dd0b      	ble.n	8006556 <__ieee754_pow+0x12e>
 800653e:	2f00      	cmp	r7, #0
 8006540:	f2c0 8449 	blt.w	8006dd6 <__ieee754_pow+0x9ae>
 8006544:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006548:	4658      	mov	r0, fp
 800654a:	4661      	mov	r1, ip
 800654c:	b013      	add	sp, #76	; 0x4c
 800654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006552:	2302      	movs	r3, #2
 8006554:	e7e2      	b.n	800651c <__ieee754_pow+0xf4>
 8006556:	2f00      	cmp	r7, #0
 8006558:	f04f 0b00 	mov.w	fp, #0
 800655c:	f04f 0c00 	mov.w	ip, #0
 8006560:	daf2      	bge.n	8006548 <__ieee754_pow+0x120>
 8006562:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006566:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800656a:	e7ed      	b.n	8006548 <__ieee754_pow+0x120>
 800656c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006570:	d106      	bne.n	8006580 <__ieee754_pow+0x158>
 8006572:	4642      	mov	r2, r8
 8006574:	464b      	mov	r3, r9
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7f9 ffad 	bl	80004d8 <__aeabi_dmul>
 800657e:	e770      	b.n	8006462 <__ieee754_pow+0x3a>
 8006580:	4b3a      	ldr	r3, [pc, #232]	; (800666c <__ieee754_pow+0x244>)
 8006582:	429f      	cmp	r7, r3
 8006584:	d10a      	bne.n	800659c <__ieee754_pow+0x174>
 8006586:	2d00      	cmp	r5, #0
 8006588:	db08      	blt.n	800659c <__ieee754_pow+0x174>
 800658a:	4640      	mov	r0, r8
 800658c:	4649      	mov	r1, r9
 800658e:	b013      	add	sp, #76	; 0x4c
 8006590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	f000 bd0a 	b.w	8006fac <__ieee754_sqrt>
 8006598:	2300      	movs	r3, #0
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	f000 fc58 	bl	8006e54 <fabs>
 80065a4:	4683      	mov	fp, r0
 80065a6:	468c      	mov	ip, r1
 80065a8:	f1ba 0f00 	cmp.w	sl, #0
 80065ac:	d128      	bne.n	8006600 <__ieee754_pow+0x1d8>
 80065ae:	b124      	cbz	r4, 80065ba <__ieee754_pow+0x192>
 80065b0:	4b2c      	ldr	r3, [pc, #176]	; (8006664 <__ieee754_pow+0x23c>)
 80065b2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d122      	bne.n	8006600 <__ieee754_pow+0x1d8>
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	da07      	bge.n	80065ce <__ieee754_pow+0x1a6>
 80065be:	465a      	mov	r2, fp
 80065c0:	4663      	mov	r3, ip
 80065c2:	2000      	movs	r0, #0
 80065c4:	4927      	ldr	r1, [pc, #156]	; (8006664 <__ieee754_pow+0x23c>)
 80065c6:	f7fa f8b1 	bl	800072c <__aeabi_ddiv>
 80065ca:	4683      	mov	fp, r0
 80065cc:	468c      	mov	ip, r1
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	daba      	bge.n	8006548 <__ieee754_pow+0x120>
 80065d2:	9b00      	ldr	r3, [sp, #0]
 80065d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065dc:	431c      	orrs	r4, r3
 80065de:	d108      	bne.n	80065f2 <__ieee754_pow+0x1ca>
 80065e0:	465a      	mov	r2, fp
 80065e2:	4663      	mov	r3, ip
 80065e4:	4658      	mov	r0, fp
 80065e6:	4661      	mov	r1, ip
 80065e8:	f7f9 fdbe 	bl	8000168 <__aeabi_dsub>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	e790      	b.n	8006514 <__ieee754_pow+0xec>
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d1a7      	bne.n	8006548 <__ieee754_pow+0x120>
 80065f8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80065fc:	469c      	mov	ip, r3
 80065fe:	e7a3      	b.n	8006548 <__ieee754_pow+0x120>
 8006600:	0feb      	lsrs	r3, r5, #31
 8006602:	3b01      	subs	r3, #1
 8006604:	930c      	str	r3, [sp, #48]	; 0x30
 8006606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006608:	9b00      	ldr	r3, [sp, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	d104      	bne.n	8006618 <__ieee754_pow+0x1f0>
 800660e:	4642      	mov	r2, r8
 8006610:	464b      	mov	r3, r9
 8006612:	4640      	mov	r0, r8
 8006614:	4649      	mov	r1, r9
 8006616:	e7e7      	b.n	80065e8 <__ieee754_pow+0x1c0>
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <__ieee754_pow+0x248>)
 800661a:	429e      	cmp	r6, r3
 800661c:	f340 80f6 	ble.w	800680c <__ieee754_pow+0x3e4>
 8006620:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006624:	429e      	cmp	r6, r3
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <__ieee754_pow+0x240>)
 8006628:	dd09      	ble.n	800663e <__ieee754_pow+0x216>
 800662a:	429c      	cmp	r4, r3
 800662c:	dc0c      	bgt.n	8006648 <__ieee754_pow+0x220>
 800662e:	2f00      	cmp	r7, #0
 8006630:	da0c      	bge.n	800664c <__ieee754_pow+0x224>
 8006632:	2000      	movs	r0, #0
 8006634:	b013      	add	sp, #76	; 0x4c
 8006636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	f000 bcb2 	b.w	8006fa2 <__math_oflow>
 800663e:	429c      	cmp	r4, r3
 8006640:	dbf5      	blt.n	800662e <__ieee754_pow+0x206>
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <__ieee754_pow+0x23c>)
 8006644:	429c      	cmp	r4, r3
 8006646:	dd15      	ble.n	8006674 <__ieee754_pow+0x24c>
 8006648:	2f00      	cmp	r7, #0
 800664a:	dcf2      	bgt.n	8006632 <__ieee754_pow+0x20a>
 800664c:	2000      	movs	r0, #0
 800664e:	b013      	add	sp, #76	; 0x4c
 8006650:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	f000 bca0 	b.w	8006f98 <__math_uflow>
 8006658:	fff00000 	.word	0xfff00000
 800665c:	7ff00000 	.word	0x7ff00000
 8006660:	433fffff 	.word	0x433fffff
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	3fefffff 	.word	0x3fefffff
 800666c:	3fe00000 	.word	0x3fe00000
 8006670:	41e00000 	.word	0x41e00000
 8006674:	4661      	mov	r1, ip
 8006676:	2200      	movs	r2, #0
 8006678:	4658      	mov	r0, fp
 800667a:	4b5f      	ldr	r3, [pc, #380]	; (80067f8 <__ieee754_pow+0x3d0>)
 800667c:	f7f9 fd74 	bl	8000168 <__aeabi_dsub>
 8006680:	a355      	add	r3, pc, #340	; (adr r3, 80067d8 <__ieee754_pow+0x3b0>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	f7f9 ff25 	bl	80004d8 <__aeabi_dmul>
 800668e:	a354      	add	r3, pc, #336	; (adr r3, 80067e0 <__ieee754_pow+0x3b8>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	4606      	mov	r6, r0
 8006696:	460f      	mov	r7, r1
 8006698:	4620      	mov	r0, r4
 800669a:	4629      	mov	r1, r5
 800669c:	f7f9 ff1c 	bl	80004d8 <__aeabi_dmul>
 80066a0:	2200      	movs	r2, #0
 80066a2:	4682      	mov	sl, r0
 80066a4:	468b      	mov	fp, r1
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	4b54      	ldr	r3, [pc, #336]	; (80067fc <__ieee754_pow+0x3d4>)
 80066ac:	f7f9 ff14 	bl	80004d8 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	a14c      	add	r1, pc, #304	; (adr r1, 80067e8 <__ieee754_pow+0x3c0>)
 80066b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ba:	f7f9 fd55 	bl	8000168 <__aeabi_dsub>
 80066be:	4622      	mov	r2, r4
 80066c0:	462b      	mov	r3, r5
 80066c2:	f7f9 ff09 	bl	80004d8 <__aeabi_dmul>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	2000      	movs	r0, #0
 80066cc:	494c      	ldr	r1, [pc, #304]	; (8006800 <__ieee754_pow+0x3d8>)
 80066ce:	f7f9 fd4b 	bl	8000168 <__aeabi_dsub>
 80066d2:	4622      	mov	r2, r4
 80066d4:	462b      	mov	r3, r5
 80066d6:	4680      	mov	r8, r0
 80066d8:	4689      	mov	r9, r1
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	f7f9 fefb 	bl	80004d8 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7f9 fef5 	bl	80004d8 <__aeabi_dmul>
 80066ee:	a340      	add	r3, pc, #256	; (adr r3, 80067f0 <__ieee754_pow+0x3c8>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 fef0 	bl	80004d8 <__aeabi_dmul>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4650      	mov	r0, sl
 80066fe:	4659      	mov	r1, fp
 8006700:	f7f9 fd32 	bl	8000168 <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	4630      	mov	r0, r6
 800670e:	4639      	mov	r1, r7
 8006710:	f7f9 fd2c 	bl	800016c <__adddf3>
 8006714:	2000      	movs	r0, #0
 8006716:	4632      	mov	r2, r6
 8006718:	463b      	mov	r3, r7
 800671a:	4682      	mov	sl, r0
 800671c:	468b      	mov	fp, r1
 800671e:	f7f9 fd23 	bl	8000168 <__aeabi_dsub>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4620      	mov	r0, r4
 8006728:	4629      	mov	r1, r5
 800672a:	f7f9 fd1d 	bl	8000168 <__aeabi_dsub>
 800672e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006736:	3b01      	subs	r3, #1
 8006738:	4313      	orrs	r3, r2
 800673a:	f04f 0600 	mov.w	r6, #0
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	bf0c      	ite	eq
 8006744:	4b2f      	ldreq	r3, [pc, #188]	; (8006804 <__ieee754_pow+0x3dc>)
 8006746:	4b2c      	ldrne	r3, [pc, #176]	; (80067f8 <__ieee754_pow+0x3d0>)
 8006748:	4604      	mov	r4, r0
 800674a:	460d      	mov	r5, r1
 800674c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006750:	e9cd 2300 	strd	r2, r3, [sp]
 8006754:	4632      	mov	r2, r6
 8006756:	463b      	mov	r3, r7
 8006758:	f7f9 fd06 	bl	8000168 <__aeabi_dsub>
 800675c:	4652      	mov	r2, sl
 800675e:	465b      	mov	r3, fp
 8006760:	f7f9 feba 	bl	80004d8 <__aeabi_dmul>
 8006764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006768:	4680      	mov	r8, r0
 800676a:	4689      	mov	r9, r1
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7f9 feb2 	bl	80004d8 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7f9 fcf6 	bl	800016c <__adddf3>
 8006780:	4632      	mov	r2, r6
 8006782:	463b      	mov	r3, r7
 8006784:	4680      	mov	r8, r0
 8006786:	4689      	mov	r9, r1
 8006788:	4650      	mov	r0, sl
 800678a:	4659      	mov	r1, fp
 800678c:	f7f9 fea4 	bl	80004d8 <__aeabi_dmul>
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	460b      	mov	r3, r1
 8006796:	4602      	mov	r2, r0
 8006798:	4649      	mov	r1, r9
 800679a:	4640      	mov	r0, r8
 800679c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80067a0:	f7f9 fce4 	bl	800016c <__adddf3>
 80067a4:	4b18      	ldr	r3, [pc, #96]	; (8006808 <__ieee754_pow+0x3e0>)
 80067a6:	4682      	mov	sl, r0
 80067a8:	4299      	cmp	r1, r3
 80067aa:	460f      	mov	r7, r1
 80067ac:	460e      	mov	r6, r1
 80067ae:	f340 82e7 	ble.w	8006d80 <__ieee754_pow+0x958>
 80067b2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80067b6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80067ba:	4303      	orrs	r3, r0
 80067bc:	f000 81e2 	beq.w	8006b84 <__ieee754_pow+0x75c>
 80067c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067c4:	2200      	movs	r2, #0
 80067c6:	2300      	movs	r3, #0
 80067c8:	f7fa f8f8 	bl	80009bc <__aeabi_dcmplt>
 80067cc:	3800      	subs	r0, #0
 80067ce:	bf18      	it	ne
 80067d0:	2001      	movne	r0, #1
 80067d2:	e72f      	b.n	8006634 <__ieee754_pow+0x20c>
 80067d4:	f3af 8000 	nop.w
 80067d8:	60000000 	.word	0x60000000
 80067dc:	3ff71547 	.word	0x3ff71547
 80067e0:	f85ddf44 	.word	0xf85ddf44
 80067e4:	3e54ae0b 	.word	0x3e54ae0b
 80067e8:	55555555 	.word	0x55555555
 80067ec:	3fd55555 	.word	0x3fd55555
 80067f0:	652b82fe 	.word	0x652b82fe
 80067f4:	3ff71547 	.word	0x3ff71547
 80067f8:	3ff00000 	.word	0x3ff00000
 80067fc:	3fd00000 	.word	0x3fd00000
 8006800:	3fe00000 	.word	0x3fe00000
 8006804:	bff00000 	.word	0xbff00000
 8006808:	408fffff 	.word	0x408fffff
 800680c:	4bd4      	ldr	r3, [pc, #848]	; (8006b60 <__ieee754_pow+0x738>)
 800680e:	2200      	movs	r2, #0
 8006810:	402b      	ands	r3, r5
 8006812:	b943      	cbnz	r3, 8006826 <__ieee754_pow+0x3fe>
 8006814:	4658      	mov	r0, fp
 8006816:	4661      	mov	r1, ip
 8006818:	4bd2      	ldr	r3, [pc, #840]	; (8006b64 <__ieee754_pow+0x73c>)
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006822:	4683      	mov	fp, r0
 8006824:	460c      	mov	r4, r1
 8006826:	1523      	asrs	r3, r4, #20
 8006828:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800682c:	4413      	add	r3, r2
 800682e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006830:	4bcd      	ldr	r3, [pc, #820]	; (8006b68 <__ieee754_pow+0x740>)
 8006832:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006836:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800683a:	429c      	cmp	r4, r3
 800683c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006840:	dd08      	ble.n	8006854 <__ieee754_pow+0x42c>
 8006842:	4bca      	ldr	r3, [pc, #808]	; (8006b6c <__ieee754_pow+0x744>)
 8006844:	429c      	cmp	r4, r3
 8006846:	f340 8164 	ble.w	8006b12 <__ieee754_pow+0x6ea>
 800684a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006850:	3301      	adds	r3, #1
 8006852:	930b      	str	r3, [sp, #44]	; 0x2c
 8006854:	2600      	movs	r6, #0
 8006856:	00f3      	lsls	r3, r6, #3
 8006858:	930d      	str	r3, [sp, #52]	; 0x34
 800685a:	4bc5      	ldr	r3, [pc, #788]	; (8006b70 <__ieee754_pow+0x748>)
 800685c:	4658      	mov	r0, fp
 800685e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006862:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006866:	4629      	mov	r1, r5
 8006868:	461a      	mov	r2, r3
 800686a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800686e:	4623      	mov	r3, r4
 8006870:	f7f9 fc7a 	bl	8000168 <__aeabi_dsub>
 8006874:	46da      	mov	sl, fp
 8006876:	462b      	mov	r3, r5
 8006878:	4652      	mov	r2, sl
 800687a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800687e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006882:	f7f9 fc73 	bl	800016c <__adddf3>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	2000      	movs	r0, #0
 800688c:	49b9      	ldr	r1, [pc, #740]	; (8006b74 <__ieee754_pow+0x74c>)
 800688e:	f7f9 ff4d 	bl	800072c <__aeabi_ddiv>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800689a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800689e:	f7f9 fe1b 	bl	80004d8 <__aeabi_dmul>
 80068a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80068aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068ae:	2300      	movs	r3, #0
 80068b0:	2200      	movs	r2, #0
 80068b2:	46ab      	mov	fp, r5
 80068b4:	106d      	asrs	r5, r5, #1
 80068b6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80068c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80068c4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	4614      	mov	r4, r2
 80068ce:	461d      	mov	r5, r3
 80068d0:	f7f9 fe02 	bl	80004d8 <__aeabi_dmul>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80068dc:	f7f9 fc44 	bl	8000168 <__aeabi_dsub>
 80068e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068e4:	4606      	mov	r6, r0
 80068e6:	460f      	mov	r7, r1
 80068e8:	4620      	mov	r0, r4
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7f9 fc3c 	bl	8000168 <__aeabi_dsub>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4650      	mov	r0, sl
 80068f6:	4659      	mov	r1, fp
 80068f8:	f7f9 fc36 	bl	8000168 <__aeabi_dsub>
 80068fc:	4642      	mov	r2, r8
 80068fe:	464b      	mov	r3, r9
 8006900:	f7f9 fdea 	bl	80004d8 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f7f9 fc2c 	bl	8000168 <__aeabi_dsub>
 8006910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006914:	f7f9 fde0 	bl	80004d8 <__aeabi_dmul>
 8006918:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800691c:	4682      	mov	sl, r0
 800691e:	468b      	mov	fp, r1
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	f7f9 fdd8 	bl	80004d8 <__aeabi_dmul>
 8006928:	a37b      	add	r3, pc, #492	; (adr r3, 8006b18 <__ieee754_pow+0x6f0>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	4604      	mov	r4, r0
 8006930:	460d      	mov	r5, r1
 8006932:	f7f9 fdd1 	bl	80004d8 <__aeabi_dmul>
 8006936:	a37a      	add	r3, pc, #488	; (adr r3, 8006b20 <__ieee754_pow+0x6f8>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fc16 	bl	800016c <__adddf3>
 8006940:	4622      	mov	r2, r4
 8006942:	462b      	mov	r3, r5
 8006944:	f7f9 fdc8 	bl	80004d8 <__aeabi_dmul>
 8006948:	a377      	add	r3, pc, #476	; (adr r3, 8006b28 <__ieee754_pow+0x700>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f7f9 fc0d 	bl	800016c <__adddf3>
 8006952:	4622      	mov	r2, r4
 8006954:	462b      	mov	r3, r5
 8006956:	f7f9 fdbf 	bl	80004d8 <__aeabi_dmul>
 800695a:	a375      	add	r3, pc, #468	; (adr r3, 8006b30 <__ieee754_pow+0x708>)
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f7f9 fc04 	bl	800016c <__adddf3>
 8006964:	4622      	mov	r2, r4
 8006966:	462b      	mov	r3, r5
 8006968:	f7f9 fdb6 	bl	80004d8 <__aeabi_dmul>
 800696c:	a372      	add	r3, pc, #456	; (adr r3, 8006b38 <__ieee754_pow+0x710>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f7f9 fbfb 	bl	800016c <__adddf3>
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	f7f9 fdad 	bl	80004d8 <__aeabi_dmul>
 800697e:	a370      	add	r3, pc, #448	; (adr r3, 8006b40 <__ieee754_pow+0x718>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7f9 fbf2 	bl	800016c <__adddf3>
 8006988:	4622      	mov	r2, r4
 800698a:	4606      	mov	r6, r0
 800698c:	460f      	mov	r7, r1
 800698e:	462b      	mov	r3, r5
 8006990:	4620      	mov	r0, r4
 8006992:	4629      	mov	r1, r5
 8006994:	f7f9 fda0 	bl	80004d8 <__aeabi_dmul>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4630      	mov	r0, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	f7f9 fd9a 	bl	80004d8 <__aeabi_dmul>
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	f7f9 fbdc 	bl	800016c <__adddf3>
 80069b4:	4652      	mov	r2, sl
 80069b6:	465b      	mov	r3, fp
 80069b8:	f7f9 fd8e 	bl	80004d8 <__aeabi_dmul>
 80069bc:	4622      	mov	r2, r4
 80069be:	462b      	mov	r3, r5
 80069c0:	f7f9 fbd4 	bl	800016c <__adddf3>
 80069c4:	4642      	mov	r2, r8
 80069c6:	4606      	mov	r6, r0
 80069c8:	460f      	mov	r7, r1
 80069ca:	464b      	mov	r3, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	4649      	mov	r1, r9
 80069d0:	f7f9 fd82 	bl	80004d8 <__aeabi_dmul>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069dc:	2200      	movs	r2, #0
 80069de:	4b66      	ldr	r3, [pc, #408]	; (8006b78 <__ieee754_pow+0x750>)
 80069e0:	f7f9 fbc4 	bl	800016c <__adddf3>
 80069e4:	4632      	mov	r2, r6
 80069e6:	463b      	mov	r3, r7
 80069e8:	f7f9 fbc0 	bl	800016c <__adddf3>
 80069ec:	2400      	movs	r4, #0
 80069ee:	460d      	mov	r5, r1
 80069f0:	4622      	mov	r2, r4
 80069f2:	460b      	mov	r3, r1
 80069f4:	4640      	mov	r0, r8
 80069f6:	4649      	mov	r1, r9
 80069f8:	f7f9 fd6e 	bl	80004d8 <__aeabi_dmul>
 80069fc:	2200      	movs	r2, #0
 80069fe:	4680      	mov	r8, r0
 8006a00:	4689      	mov	r9, r1
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	4b5c      	ldr	r3, [pc, #368]	; (8006b78 <__ieee754_pow+0x750>)
 8006a08:	f7f9 fbae 	bl	8000168 <__aeabi_dsub>
 8006a0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a10:	f7f9 fbaa 	bl	8000168 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7f9 fba4 	bl	8000168 <__aeabi_dsub>
 8006a20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a24:	f7f9 fd58 	bl	80004d8 <__aeabi_dmul>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	460f      	mov	r7, r1
 8006a2e:	462b      	mov	r3, r5
 8006a30:	4650      	mov	r0, sl
 8006a32:	4659      	mov	r1, fp
 8006a34:	f7f9 fd50 	bl	80004d8 <__aeabi_dmul>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	4639      	mov	r1, r7
 8006a40:	f7f9 fb94 	bl	800016c <__adddf3>
 8006a44:	2400      	movs	r4, #0
 8006a46:	4606      	mov	r6, r0
 8006a48:	460f      	mov	r7, r1
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f7f9 fb8b 	bl	800016c <__adddf3>
 8006a56:	a33c      	add	r3, pc, #240	; (adr r3, 8006b48 <__ieee754_pow+0x720>)
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	460d      	mov	r5, r1
 8006a60:	f7f9 fd3a 	bl	80004d8 <__aeabi_dmul>
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fb7a 	bl	8000168 <__aeabi_dsub>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fb74 	bl	8000168 <__aeabi_dsub>
 8006a80:	a333      	add	r3, pc, #204	; (adr r3, 8006b50 <__ieee754_pow+0x728>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fd27 	bl	80004d8 <__aeabi_dmul>
 8006a8a:	a333      	add	r3, pc, #204	; (adr r3, 8006b58 <__ieee754_pow+0x730>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	4606      	mov	r6, r0
 8006a92:	460f      	mov	r7, r1
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7f9 fd1e 	bl	80004d8 <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	f7f9 fb62 	bl	800016c <__adddf3>
 8006aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aaa:	4b34      	ldr	r3, [pc, #208]	; (8006b7c <__ieee754_pow+0x754>)
 8006aac:	4413      	add	r3, r2
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fb5b 	bl	800016c <__adddf3>
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006aba:	4689      	mov	r9, r1
 8006abc:	f7f9 fca2 	bl	8000404 <__aeabi_i2d>
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aca:	4b2d      	ldr	r3, [pc, #180]	; (8006b80 <__ieee754_pow+0x758>)
 8006acc:	4413      	add	r3, r2
 8006ace:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	f7f9 fb49 	bl	800016c <__adddf3>
 8006ada:	4632      	mov	r2, r6
 8006adc:	463b      	mov	r3, r7
 8006ade:	f7f9 fb45 	bl	800016c <__adddf3>
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	f7f9 fb41 	bl	800016c <__adddf3>
 8006aea:	2000      	movs	r0, #0
 8006aec:	4622      	mov	r2, r4
 8006aee:	462b      	mov	r3, r5
 8006af0:	4682      	mov	sl, r0
 8006af2:	468b      	mov	fp, r1
 8006af4:	f7f9 fb38 	bl	8000168 <__aeabi_dsub>
 8006af8:	4632      	mov	r2, r6
 8006afa:	463b      	mov	r3, r7
 8006afc:	f7f9 fb34 	bl	8000168 <__aeabi_dsub>
 8006b00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b04:	f7f9 fb30 	bl	8000168 <__aeabi_dsub>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	e60b      	b.n	800672a <__ieee754_pow+0x302>
 8006b12:	2601      	movs	r6, #1
 8006b14:	e69f      	b.n	8006856 <__ieee754_pow+0x42e>
 8006b16:	bf00      	nop
 8006b18:	4a454eef 	.word	0x4a454eef
 8006b1c:	3fca7e28 	.word	0x3fca7e28
 8006b20:	93c9db65 	.word	0x93c9db65
 8006b24:	3fcd864a 	.word	0x3fcd864a
 8006b28:	a91d4101 	.word	0xa91d4101
 8006b2c:	3fd17460 	.word	0x3fd17460
 8006b30:	518f264d 	.word	0x518f264d
 8006b34:	3fd55555 	.word	0x3fd55555
 8006b38:	db6fabff 	.word	0xdb6fabff
 8006b3c:	3fdb6db6 	.word	0x3fdb6db6
 8006b40:	33333303 	.word	0x33333303
 8006b44:	3fe33333 	.word	0x3fe33333
 8006b48:	e0000000 	.word	0xe0000000
 8006b4c:	3feec709 	.word	0x3feec709
 8006b50:	dc3a03fd 	.word	0xdc3a03fd
 8006b54:	3feec709 	.word	0x3feec709
 8006b58:	145b01f5 	.word	0x145b01f5
 8006b5c:	be3e2fe0 	.word	0xbe3e2fe0
 8006b60:	7ff00000 	.word	0x7ff00000
 8006b64:	43400000 	.word	0x43400000
 8006b68:	0003988e 	.word	0x0003988e
 8006b6c:	000bb679 	.word	0x000bb679
 8006b70:	080075d8 	.word	0x080075d8
 8006b74:	3ff00000 	.word	0x3ff00000
 8006b78:	40080000 	.word	0x40080000
 8006b7c:	080075f8 	.word	0x080075f8
 8006b80:	080075e8 	.word	0x080075e8
 8006b84:	a39c      	add	r3, pc, #624	; (adr r3, 8006df8 <__ieee754_pow+0x9d0>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	f7f9 faed 	bl	800016c <__adddf3>
 8006b92:	4622      	mov	r2, r4
 8006b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b98:	462b      	mov	r3, r5
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	f7f9 fae3 	bl	8000168 <__aeabi_dsub>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006baa:	f7f9 ff25 	bl	80009f8 <__aeabi_dcmpgt>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f47f ae06 	bne.w	80067c0 <__ieee754_pow+0x398>
 8006bb4:	4aa2      	ldr	r2, [pc, #648]	; (8006e40 <__ieee754_pow+0xa18>)
 8006bb6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	f340 8100 	ble.w	8006dc0 <__ieee754_pow+0x998>
 8006bc0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006bc4:	151b      	asrs	r3, r3, #20
 8006bc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006bca:	fa4a fa03 	asr.w	sl, sl, r3
 8006bce:	44b2      	add	sl, r6
 8006bd0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006bd4:	489b      	ldr	r0, [pc, #620]	; (8006e44 <__ieee754_pow+0xa1c>)
 8006bd6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006bda:	4108      	asrs	r0, r1
 8006bdc:	ea00 030a 	and.w	r3, r0, sl
 8006be0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006be4:	f1c1 0114 	rsb	r1, r1, #20
 8006be8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006bec:	fa4a fa01 	asr.w	sl, sl, r1
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	bfb8      	it	lt
 8006bfc:	f1ca 0a00 	rsblt	sl, sl, #0
 8006c00:	f7f9 fab2 	bl	8000168 <__aeabi_dsub>
 8006c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	f7f9 faab 	bl	800016c <__adddf3>
 8006c16:	a37a      	add	r3, pc, #488	; (adr r3, 8006e00 <__ieee754_pow+0x9d8>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	460d      	mov	r5, r1
 8006c20:	f7f9 fc5a 	bl	80004d8 <__aeabi_dmul>
 8006c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	f7f9 fa9a 	bl	8000168 <__aeabi_dsub>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 fa94 	bl	8000168 <__aeabi_dsub>
 8006c40:	a371      	add	r3, pc, #452	; (adr r3, 8006e08 <__ieee754_pow+0x9e0>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 fc47 	bl	80004d8 <__aeabi_dmul>
 8006c4a:	a371      	add	r3, pc, #452	; (adr r3, 8006e10 <__ieee754_pow+0x9e8>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 fc3e 	bl	80004d8 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7f9 fa82 	bl	800016c <__adddf3>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	460d      	mov	r5, r1
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 fa7a 	bl	800016c <__adddf3>
 8006c78:	4632      	mov	r2, r6
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4689      	mov	r9, r1
 8006c80:	f7f9 fa72 	bl	8000168 <__aeabi_dsub>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4620      	mov	r0, r4
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7f9 fa6c 	bl	8000168 <__aeabi_dsub>
 8006c90:	4642      	mov	r2, r8
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	464b      	mov	r3, r9
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	f7f9 fc1c 	bl	80004d8 <__aeabi_dmul>
 8006ca0:	a35d      	add	r3, pc, #372	; (adr r3, 8006e18 <__ieee754_pow+0x9f0>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	460d      	mov	r5, r1
 8006caa:	f7f9 fc15 	bl	80004d8 <__aeabi_dmul>
 8006cae:	a35c      	add	r3, pc, #368	; (adr r3, 8006e20 <__ieee754_pow+0x9f8>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f7f9 fa58 	bl	8000168 <__aeabi_dsub>
 8006cb8:	4622      	mov	r2, r4
 8006cba:	462b      	mov	r3, r5
 8006cbc:	f7f9 fc0c 	bl	80004d8 <__aeabi_dmul>
 8006cc0:	a359      	add	r3, pc, #356	; (adr r3, 8006e28 <__ieee754_pow+0xa00>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fa51 	bl	800016c <__adddf3>
 8006cca:	4622      	mov	r2, r4
 8006ccc:	462b      	mov	r3, r5
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	a357      	add	r3, pc, #348	; (adr r3, 8006e30 <__ieee754_pow+0xa08>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fa46 	bl	8000168 <__aeabi_dsub>
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	a354      	add	r3, pc, #336	; (adr r3, 8006e38 <__ieee754_pow+0xa10>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 fa3f 	bl	800016c <__adddf3>
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	f7f9 fbf1 	bl	80004d8 <__aeabi_dmul>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	f7f9 fa33 	bl	8000168 <__aeabi_dsub>
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 fbe3 	bl	80004d8 <__aeabi_dmul>
 8006d12:	2200      	movs	r2, #0
 8006d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4629      	mov	r1, r5
 8006d20:	f7f9 fa22 	bl	8000168 <__aeabi_dsub>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2c:	f7f9 fcfe 	bl	800072c <__aeabi_ddiv>
 8006d30:	4632      	mov	r2, r6
 8006d32:	4604      	mov	r4, r0
 8006d34:	460d      	mov	r5, r1
 8006d36:	463b      	mov	r3, r7
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 fbcc 	bl	80004d8 <__aeabi_dmul>
 8006d40:	4632      	mov	r2, r6
 8006d42:	463b      	mov	r3, r7
 8006d44:	f7f9 fa12 	bl	800016c <__adddf3>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fa0a 	bl	8000168 <__aeabi_dsub>
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	f7f9 fa06 	bl	8000168 <__aeabi_dsub>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	2000      	movs	r0, #0
 8006d62:	4939      	ldr	r1, [pc, #228]	; (8006e48 <__ieee754_pow+0xa20>)
 8006d64:	f7f9 fa00 	bl	8000168 <__aeabi_dsub>
 8006d68:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006d6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006d70:	da29      	bge.n	8006dc6 <__ieee754_pow+0x99e>
 8006d72:	4652      	mov	r2, sl
 8006d74:	f000 f874 	bl	8006e60 <scalbn>
 8006d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d7c:	f7ff bbfd 	b.w	800657a <__ieee754_pow+0x152>
 8006d80:	4b32      	ldr	r3, [pc, #200]	; (8006e4c <__ieee754_pow+0xa24>)
 8006d82:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006d86:	429f      	cmp	r7, r3
 8006d88:	f77f af14 	ble.w	8006bb4 <__ieee754_pow+0x78c>
 8006d8c:	4b30      	ldr	r3, [pc, #192]	; (8006e50 <__ieee754_pow+0xa28>)
 8006d8e:	440b      	add	r3, r1
 8006d90:	4303      	orrs	r3, r0
 8006d92:	d009      	beq.n	8006da8 <__ieee754_pow+0x980>
 8006d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f7f9 fe0e 	bl	80009bc <__aeabi_dcmplt>
 8006da0:	3800      	subs	r0, #0
 8006da2:	bf18      	it	ne
 8006da4:	2001      	movne	r0, #1
 8006da6:	e452      	b.n	800664e <__ieee754_pow+0x226>
 8006da8:	4622      	mov	r2, r4
 8006daa:	462b      	mov	r3, r5
 8006dac:	f7f9 f9dc 	bl	8000168 <__aeabi_dsub>
 8006db0:	4642      	mov	r2, r8
 8006db2:	464b      	mov	r3, r9
 8006db4:	f7f9 fe16 	bl	80009e4 <__aeabi_dcmpge>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f aefb 	beq.w	8006bb4 <__ieee754_pow+0x78c>
 8006dbe:	e7e9      	b.n	8006d94 <__ieee754_pow+0x96c>
 8006dc0:	f04f 0a00 	mov.w	sl, #0
 8006dc4:	e720      	b.n	8006c08 <__ieee754_pow+0x7e0>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	e7d6      	b.n	8006d78 <__ieee754_pow+0x950>
 8006dca:	f04f 0b00 	mov.w	fp, #0
 8006dce:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006e48 <__ieee754_pow+0xa20>
 8006dd2:	f7ff bbb9 	b.w	8006548 <__ieee754_pow+0x120>
 8006dd6:	f04f 0b00 	mov.w	fp, #0
 8006dda:	f04f 0c00 	mov.w	ip, #0
 8006dde:	f7ff bbb3 	b.w	8006548 <__ieee754_pow+0x120>
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7ff bb3c 	b.w	8006462 <__ieee754_pow+0x3a>
 8006dea:	9200      	str	r2, [sp, #0]
 8006dec:	f7ff bb88 	b.w	8006500 <__ieee754_pow+0xd8>
 8006df0:	2300      	movs	r3, #0
 8006df2:	f7ff bb72 	b.w	80064da <__ieee754_pow+0xb2>
 8006df6:	bf00      	nop
 8006df8:	652b82fe 	.word	0x652b82fe
 8006dfc:	3c971547 	.word	0x3c971547
 8006e00:	00000000 	.word	0x00000000
 8006e04:	3fe62e43 	.word	0x3fe62e43
 8006e08:	fefa39ef 	.word	0xfefa39ef
 8006e0c:	3fe62e42 	.word	0x3fe62e42
 8006e10:	0ca86c39 	.word	0x0ca86c39
 8006e14:	be205c61 	.word	0xbe205c61
 8006e18:	72bea4d0 	.word	0x72bea4d0
 8006e1c:	3e663769 	.word	0x3e663769
 8006e20:	c5d26bf1 	.word	0xc5d26bf1
 8006e24:	3ebbbd41 	.word	0x3ebbbd41
 8006e28:	af25de2c 	.word	0xaf25de2c
 8006e2c:	3f11566a 	.word	0x3f11566a
 8006e30:	16bebd93 	.word	0x16bebd93
 8006e34:	3f66c16c 	.word	0x3f66c16c
 8006e38:	5555553e 	.word	0x5555553e
 8006e3c:	3fc55555 	.word	0x3fc55555
 8006e40:	3fe00000 	.word	0x3fe00000
 8006e44:	fff00000 	.word	0xfff00000
 8006e48:	3ff00000 	.word	0x3ff00000
 8006e4c:	4090cbff 	.word	0x4090cbff
 8006e50:	3f6f3400 	.word	0x3f6f3400

08006e54 <fabs>:
 8006e54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4770      	bx	lr
 8006e5c:	0000      	movs	r0, r0
	...

08006e60 <scalbn>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	4616      	mov	r6, r2
 8006e64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	b992      	cbnz	r2, 8006e96 <scalbn+0x36>
 8006e70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e74:	4303      	orrs	r3, r0
 8006e76:	d03c      	beq.n	8006ef2 <scalbn+0x92>
 8006e78:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <scalbn+0xe0>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f7f9 fb2c 	bl	80004d8 <__aeabi_dmul>
 8006e80:	4b30      	ldr	r3, [pc, #192]	; (8006f44 <scalbn+0xe4>)
 8006e82:	4604      	mov	r4, r0
 8006e84:	429e      	cmp	r6, r3
 8006e86:	460d      	mov	r5, r1
 8006e88:	da0f      	bge.n	8006eaa <scalbn+0x4a>
 8006e8a:	a329      	add	r3, pc, #164	; (adr r3, 8006f30 <scalbn+0xd0>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 fb22 	bl	80004d8 <__aeabi_dmul>
 8006e94:	e006      	b.n	8006ea4 <scalbn+0x44>
 8006e96:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006e9a:	42ba      	cmp	r2, r7
 8006e9c:	d109      	bne.n	8006eb2 <scalbn+0x52>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	f7f9 f964 	bl	800016c <__adddf3>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	e023      	b.n	8006ef2 <scalbn+0x92>
 8006eaa:	460b      	mov	r3, r1
 8006eac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006eb0:	3a36      	subs	r2, #54	; 0x36
 8006eb2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006eb6:	428e      	cmp	r6, r1
 8006eb8:	dd0e      	ble.n	8006ed8 <scalbn+0x78>
 8006eba:	a31f      	add	r3, pc, #124	; (adr r3, 8006f38 <scalbn+0xd8>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006ec4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006ec8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006ecc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006ed0:	481d      	ldr	r0, [pc, #116]	; (8006f48 <scalbn+0xe8>)
 8006ed2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006ed6:	e7db      	b.n	8006e90 <scalbn+0x30>
 8006ed8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006edc:	4432      	add	r2, r6
 8006ede:	428a      	cmp	r2, r1
 8006ee0:	dceb      	bgt.n	8006eba <scalbn+0x5a>
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	dd08      	ble.n	8006ef8 <scalbn+0x98>
 8006ee6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006eea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006eee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006efc:	da0c      	bge.n	8006f18 <scalbn+0xb8>
 8006efe:	a30c      	add	r3, pc, #48	; (adr r3, 8006f30 <scalbn+0xd0>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006f08:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006f0c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006f10:	480e      	ldr	r0, [pc, #56]	; (8006f4c <scalbn+0xec>)
 8006f12:	f041 011f 	orr.w	r1, r1, #31
 8006f16:	e7bb      	b.n	8006e90 <scalbn+0x30>
 8006f18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f1c:	3236      	adds	r2, #54	; 0x36
 8006f1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <scalbn+0xf0>)
 8006f2e:	e7af      	b.n	8006e90 <scalbn+0x30>
 8006f30:	c2f8f359 	.word	0xc2f8f359
 8006f34:	01a56e1f 	.word	0x01a56e1f
 8006f38:	8800759c 	.word	0x8800759c
 8006f3c:	7e37e43c 	.word	0x7e37e43c
 8006f40:	43500000 	.word	0x43500000
 8006f44:	ffff3cb0 	.word	0xffff3cb0
 8006f48:	8800759c 	.word	0x8800759c
 8006f4c:	c2f8f359 	.word	0xc2f8f359
 8006f50:	3c900000 	.word	0x3c900000

08006f54 <with_errno>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	4616      	mov	r6, r2
 8006f5c:	f7fd fb9c 	bl	8004698 <__errno>
 8006f60:	4629      	mov	r1, r5
 8006f62:	6006      	str	r6, [r0, #0]
 8006f64:	4620      	mov	r0, r4
 8006f66:	bd70      	pop	{r4, r5, r6, pc}

08006f68 <xflow>:
 8006f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f6a:	4615      	mov	r5, r2
 8006f6c:	461c      	mov	r4, r3
 8006f6e:	b180      	cbz	r0, 8006f92 <xflow+0x2a>
 8006f70:	4610      	mov	r0, r2
 8006f72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f76:	e9cd 0100 	strd	r0, r1, [sp]
 8006f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f7e:	4628      	mov	r0, r5
 8006f80:	4621      	mov	r1, r4
 8006f82:	f7f9 faa9 	bl	80004d8 <__aeabi_dmul>
 8006f86:	2222      	movs	r2, #34	; 0x22
 8006f88:	b003      	add	sp, #12
 8006f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f8e:	f7ff bfe1 	b.w	8006f54 <with_errno>
 8006f92:	4610      	mov	r0, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	e7ee      	b.n	8006f76 <xflow+0xe>

08006f98 <__math_uflow>:
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f9e:	f7ff bfe3 	b.w	8006f68 <xflow>

08006fa2 <__math_oflow>:
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006fa8:	f7ff bfde 	b.w	8006f68 <xflow>

08006fac <__ieee754_sqrt>:
 8006fac:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007150 <__ieee754_sqrt+0x1a4>
 8006fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	ea3c 0c01 	bics.w	ip, ip, r1
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	d10e      	bne.n	8006fe2 <__ieee754_sqrt+0x36>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	f7f9 fa87 	bl	80004d8 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7f9 f8cb 	bl	800016c <__adddf3>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460d      	mov	r5, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4629      	mov	r1, r5
 8006fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	2900      	cmp	r1, #0
 8006fe4:	dc0d      	bgt.n	8007002 <__ieee754_sqrt+0x56>
 8006fe6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006fea:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006fee:	d0f4      	beq.n	8006fda <__ieee754_sqrt+0x2e>
 8006ff0:	b139      	cbz	r1, 8007002 <__ieee754_sqrt+0x56>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f7f9 f8b8 	bl	8000168 <__aeabi_dsub>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	f7f9 fb96 	bl	800072c <__aeabi_ddiv>
 8007000:	e7e9      	b.n	8006fd6 <__ieee754_sqrt+0x2a>
 8007002:	1512      	asrs	r2, r2, #20
 8007004:	f000 8089 	beq.w	800711a <__ieee754_sqrt+0x16e>
 8007008:	2500      	movs	r5, #0
 800700a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800700e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007016:	07d2      	lsls	r2, r2, #31
 8007018:	bf5c      	itt	pl
 800701a:	005b      	lslpl	r3, r3, #1
 800701c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007020:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007024:	bf58      	it	pl
 8007026:	0064      	lslpl	r4, r4, #1
 8007028:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800702c:	0062      	lsls	r2, r4, #1
 800702e:	2016      	movs	r0, #22
 8007030:	4629      	mov	r1, r5
 8007032:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007036:	1076      	asrs	r6, r6, #1
 8007038:	190f      	adds	r7, r1, r4
 800703a:	429f      	cmp	r7, r3
 800703c:	bfde      	ittt	le
 800703e:	1bdb      	suble	r3, r3, r7
 8007040:	1939      	addle	r1, r7, r4
 8007042:	192d      	addle	r5, r5, r4
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	3801      	subs	r0, #1
 8007048:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800704c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007050:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007054:	d1f0      	bne.n	8007038 <__ieee754_sqrt+0x8c>
 8007056:	4604      	mov	r4, r0
 8007058:	2720      	movs	r7, #32
 800705a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800705e:	428b      	cmp	r3, r1
 8007060:	eb0c 0e00 	add.w	lr, ip, r0
 8007064:	dc02      	bgt.n	800706c <__ieee754_sqrt+0xc0>
 8007066:	d113      	bne.n	8007090 <__ieee754_sqrt+0xe4>
 8007068:	4596      	cmp	lr, r2
 800706a:	d811      	bhi.n	8007090 <__ieee754_sqrt+0xe4>
 800706c:	f1be 0f00 	cmp.w	lr, #0
 8007070:	eb0e 000c 	add.w	r0, lr, ip
 8007074:	da56      	bge.n	8007124 <__ieee754_sqrt+0x178>
 8007076:	2800      	cmp	r0, #0
 8007078:	db54      	blt.n	8007124 <__ieee754_sqrt+0x178>
 800707a:	f101 0801 	add.w	r8, r1, #1
 800707e:	1a5b      	subs	r3, r3, r1
 8007080:	4641      	mov	r1, r8
 8007082:	4596      	cmp	lr, r2
 8007084:	bf88      	it	hi
 8007086:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800708a:	eba2 020e 	sub.w	r2, r2, lr
 800708e:	4464      	add	r4, ip
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	3f01      	subs	r7, #1
 8007094:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007098:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800709c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80070a0:	d1dd      	bne.n	800705e <__ieee754_sqrt+0xb2>
 80070a2:	4313      	orrs	r3, r2
 80070a4:	d01b      	beq.n	80070de <__ieee754_sqrt+0x132>
 80070a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007154 <__ieee754_sqrt+0x1a8>
 80070aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007158 <__ieee754_sqrt+0x1ac>
 80070ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80070b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80070b6:	f7f9 f857 	bl	8000168 <__aeabi_dsub>
 80070ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	f7f9 fc83 	bl	80009d0 <__aeabi_dcmple>
 80070ca:	b140      	cbz	r0, 80070de <__ieee754_sqrt+0x132>
 80070cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80070d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80070d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80070d8:	d126      	bne.n	8007128 <__ieee754_sqrt+0x17c>
 80070da:	463c      	mov	r4, r7
 80070dc:	3501      	adds	r5, #1
 80070de:	106b      	asrs	r3, r5, #1
 80070e0:	0864      	lsrs	r4, r4, #1
 80070e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80070e6:	07ea      	lsls	r2, r5, #31
 80070e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80070ec:	bf48      	it	mi
 80070ee:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80070f2:	4620      	mov	r0, r4
 80070f4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80070f8:	e76d      	b.n	8006fd6 <__ieee754_sqrt+0x2a>
 80070fa:	0ae3      	lsrs	r3, r4, #11
 80070fc:	3915      	subs	r1, #21
 80070fe:	0564      	lsls	r4, r4, #21
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0fa      	beq.n	80070fa <__ieee754_sqrt+0x14e>
 8007104:	02d8      	lsls	r0, r3, #11
 8007106:	d50a      	bpl.n	800711e <__ieee754_sqrt+0x172>
 8007108:	f1c2 0020 	rsb	r0, r2, #32
 800710c:	fa24 f000 	lsr.w	r0, r4, r0
 8007110:	1e55      	subs	r5, r2, #1
 8007112:	4094      	lsls	r4, r2
 8007114:	4303      	orrs	r3, r0
 8007116:	1b4a      	subs	r2, r1, r5
 8007118:	e776      	b.n	8007008 <__ieee754_sqrt+0x5c>
 800711a:	4611      	mov	r1, r2
 800711c:	e7f0      	b.n	8007100 <__ieee754_sqrt+0x154>
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	3201      	adds	r2, #1
 8007122:	e7ef      	b.n	8007104 <__ieee754_sqrt+0x158>
 8007124:	4688      	mov	r8, r1
 8007126:	e7aa      	b.n	800707e <__ieee754_sqrt+0xd2>
 8007128:	f7f9 f820 	bl	800016c <__adddf3>
 800712c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 fc40 	bl	80009bc <__aeabi_dcmplt>
 800713c:	b120      	cbz	r0, 8007148 <__ieee754_sqrt+0x19c>
 800713e:	1ca1      	adds	r1, r4, #2
 8007140:	bf08      	it	eq
 8007142:	3501      	addeq	r5, #1
 8007144:	3402      	adds	r4, #2
 8007146:	e7ca      	b.n	80070de <__ieee754_sqrt+0x132>
 8007148:	3401      	adds	r4, #1
 800714a:	f024 0401 	bic.w	r4, r4, #1
 800714e:	e7c6      	b.n	80070de <__ieee754_sqrt+0x132>
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	200001d8 	.word	0x200001d8
 8007158:	200001e0 	.word	0x200001e0

0800715c <_init>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	bf00      	nop
 8007160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007162:	bc08      	pop	{r3}
 8007164:	469e      	mov	lr, r3
 8007166:	4770      	bx	lr

08007168 <_fini>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr
