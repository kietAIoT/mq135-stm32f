
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080035ec  080035ec  000135ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003690  08003690  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003690  08003690  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003690  08003690  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000068  08003700  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003700  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006d22  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5c  00000000  00000000  00026df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00028b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000557  00000000  00000000  000292a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186ca  00000000  00000000  000297f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cd6  00000000  00000000  00041ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000873e1  00000000  00000000  0004bb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002384  00000000  00000000  000d2f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d52fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080035d4 	.word	0x080035d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080035d4 	.word	0x080035d4

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00b      	beq.n	8000278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	e000      	b.n	8000264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	b2d2      	uxtb	r2, r2
 8000276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000278:	687b      	ldr	r3, [r7, #4]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc_value = 0;
int _write(int file, char *ptr, int len)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	e009      	b.n	80002aa <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	60ba      	str	r2, [r7, #8]
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ffca 	bl	8000238 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dbf1      	blt.n	8000296 <_write+0x12>
	}
	return len;
 80002b2:	687b      	ldr	r3, [r7, #4]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fabb 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f827 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//xin cahas
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 f8dd 	bl	8000488 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ce:	f000 f8bd 	bl	800044c <MX_DMA_Init>
  MX_ADC1_Init();
 80002d2:	f000 f87d 	bl	80003d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Arc begin\n");
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <main+0x48>)
 80002d8:	f002 fb0c 	bl	80028f4 <puts>

//  HAL_ADCEx_Calibration_Start(&hadc1);
//  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_value,1);
  struct MQ135 mq135;
//  printf("Begin");
  Init(&mq135, &hadc1, &hdma_adc1, -1, -1);
 80002dc:	4638      	mov	r0, r7
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <main+0x4c>)
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <main+0x4c>)
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <main+0x50>)
 80002e6:	490a      	ldr	r1, [pc, #40]	; (8000310 <main+0x54>)
 80002e8:	f002 f9a8 	bl	800263c <Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Value of add is %lu and ppm is %lu\n",mq135.adc_value, mq135.ppm);
 80002ec:	693b      	ldr	r3, [r7, #16]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	4619      	mov	r1, r3
 80002f2:	4808      	ldr	r0, [pc, #32]	; (8000314 <main+0x58>)
 80002f4:	f002 fa98 	bl	8002828 <iprintf>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f000 fb00 	bl	8000900 <HAL_Delay>
	  printf("Value of add is %lu and ppm is %lu\n",mq135.adc_value, mq135.ppm);
 8000300:	e7f4      	b.n	80002ec <main+0x30>
 8000302:	bf00      	nop
 8000304:	080035ec 	.word	0x080035ec
 8000308:	bf800000 	.word	0xbf800000
 800030c:	200000b4 	.word	0x200000b4
 8000310:	20000084 	.word	0x20000084
 8000314:	080035f8 	.word	0x080035f8

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b094      	sub	sp, #80	; 0x50
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fbc4 	bl	8002ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000348:	2301      	movs	r3, #1
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000364:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fbfc 	bl	8001b6c <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800037a:	f000 f8dd 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fe68 	bl	8002070 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003a6:	f000 f8c7 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003aa:	2302      	movs	r3, #2
 80003ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 ffd4 	bl	8002364 <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003c2:	f000 f8b9 	bl	8000538 <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3750      	adds	r7, #80	; 0x50
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_ADC1_Init+0x74>)
 80003e2:	4a19      	ldr	r2, [pc, #100]	; (8000448 <MX_ADC1_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_ADC1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_ADC1_Init+0x74>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_ADC1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_ADC1_Init+0x74>)
 80003fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_ADC1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_ADC1_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <MX_ADC1_Init+0x74>)
 800040e:	f000 fa9b 	bl	8000948 <HAL_ADC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000418:	f000 f88e 	bl	8000538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000420:	2301      	movs	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000424:	2306      	movs	r3, #6
 8000426:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_ADC1_Init+0x74>)
 800042e:	f000 fc5d 	bl	8000cec <HAL_ADC_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000438:	f000 f87e 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000084 	.word	0x20000084
 8000448:	40012400 	.word	0x40012400

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_DMA_Init+0x38>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <MX_DMA_Init+0x38>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_DMA_Init+0x38>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200b      	movs	r0, #11
 8000470:	f000 ffbb 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000474:	200b      	movs	r0, #11
 8000476:	f000 ffd4 	bl	8001422 <HAL_NVIC_EnableIRQ>

}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_GPIO_Init+0xa8>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b21      	ldr	r3, [pc, #132]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0310 	and.w	r3, r3, #16
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0308 	and.w	r3, r3, #8
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_GPIO_Init+0xac>)
 8000504:	f001 fb1a 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2302      	movs	r3, #2
 8000518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4619      	mov	r1, r3
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_GPIO_Init+0xac>)
 8000522:	f001 f987 	bl	8001834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000526:	bf00      	nop
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40011000 	.word	0x40011000

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <HAL_MspInit+0x5c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x5c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_MspInit+0x60>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <HAL_MspInit+0x60>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010000 	.word	0x40010000

080005a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a28      	ldr	r2, [pc, #160]	; (8000664 <HAL_ADC_MspInit+0xbc>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d149      	bne.n	800065c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <HAL_ADC_MspInit+0xc0>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <HAL_ADC_MspInit+0xc0>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <HAL_ADC_MspInit+0xc0>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <HAL_ADC_MspInit+0xc0>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <HAL_ADC_MspInit+0xc0>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <HAL_ADC_MspInit+0xc0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4819      	ldr	r0, [pc, #100]	; (800066c <HAL_ADC_MspInit+0xc4>)
 8000608:	f001 f914 	bl	8001834 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 800060e:	4a19      	ldr	r2, [pc, #100]	; (8000674 <HAL_ADC_MspInit+0xcc>)
 8000610:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800062a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000636:	2220      	movs	r2, #32
 8000638:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000642:	f000 ff09 	bl	8001458 <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800064c:	f7ff ff74 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000654:	621a      	str	r2, [r3, #32]
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_ADC_MspInit+0xc8>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40012400 	.word	0x40012400
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800
 8000670:	200000b4 	.word	0x200000b4
 8000674:	40020008 	.word	0x40020008

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800067c:	e7fe      	b.n	800067c <NMI_Handler+0x4>

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler+0x4>

0800068a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <UsageFault_Handler+0x4>

08000696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006be:	f000 f903 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <DMA1_Channel1_IRQHandler+0x10>)
 80006ce:	f000 ff7d 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000b4 	.word	0x200000b4

080006dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e00a      	b.n	8000704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ee:	f3af 8000 	nop.w
 80006f2:	4601      	mov	r1, r0
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	60ba      	str	r2, [r7, #8]
 80006fa:	b2ca      	uxtb	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf0      	blt.n	80006ee <_read+0x12>
  }

  return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073c:	605a      	str	r2, [r3, #4]
  return 0;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <_isatty>:

int _isatty(int file)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075e:	b480      	push	{r7}
 8000760:	b085      	sub	sp, #20
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
	...

08000778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <_sbrk+0x5c>)
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <_sbrk+0x60>)
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <_sbrk+0x64>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <_sbrk+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d207      	bcs.n	80007b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a8:	f002 f9d2 	bl	8002b50 <__errno>
 80007ac:	4603      	mov	r3, r0
 80007ae:	220c      	movs	r2, #12
 80007b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	e009      	b.n	80007cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <_sbrk+0x64>)
 80007c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20005000 	.word	0x20005000
 80007d8:	00000400 	.word	0x00000400
 80007dc:	200000f8 	.word	0x200000f8
 80007e0:	20000250 	.word	0x20000250

080007e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f0:	f7ff fff8 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007f6:	490c      	ldr	r1, [pc, #48]	; (8000828 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <LoopFillZerobss+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800080c:	4c09      	ldr	r4, [pc, #36]	; (8000834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081a:	f002 f99f 	bl	8002b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081e:	f7ff fd4d 	bl	80002bc <main>
  bx lr
 8000822:	4770      	bx	lr
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800082c:	08003698 	.word	0x08003698
  ldr r2, =_sbss
 8000830:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000834:	2000024c 	.word	0x2000024c

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_Init+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_Init+0x28>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 fdc1 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	200f      	movs	r0, #15
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff fe74 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40022000 	.word	0x40022000

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fdd9 	bl	800143e <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f000 fda1 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000008 	.word	0x20000008
 80008e8:	200000fc 	.word	0x200000fc

080008ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	200000fc 	.word	0x200000fc

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff fff0 	bl	80008ec <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffe0 	bl	80008ec <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e0be      	b.n	8000ae8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	2b00      	cmp	r3, #0
 8000976:	d109      	bne.n	800098c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fe0e 	bl	80005a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 faff 	bl	8000f90 <ADC_ConversionStop_Disable>
 8000992:	4603      	mov	r3, r0
 8000994:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 8099 	bne.w	8000ad6 <HAL_ADC_Init+0x18e>
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8095 	bne.w	8000ad6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009b4:	f023 0302 	bic.w	r3, r3, #2
 80009b8:	f043 0202 	orr.w	r2, r3, #2
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7b1b      	ldrb	r3, [r3, #12]
 80009ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009e0:	d003      	beq.n	80009ea <HAL_ADC_Init+0xa2>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d102      	bne.n	80009f0 <HAL_ADC_Init+0xa8>
 80009ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ee:	e000      	b.n	80009f2 <HAL_ADC_Init+0xaa>
 80009f0:	2300      	movs	r3, #0
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7d1b      	ldrb	r3, [r3, #20]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d119      	bne.n	8000a34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7b1b      	ldrb	r3, [r3, #12]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d109      	bne.n	8000a1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	035a      	lsls	r2, r3, #13
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	e00b      	b.n	8000a34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	f043 0220 	orr.w	r2, r3, #32
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	f043 0201 	orr.w	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <HAL_ADC_Init+0x1a8>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a64:	d003      	beq.n	8000a6e <HAL_ADC_Init+0x126>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d104      	bne.n	8000a78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	051b      	lsls	r3, r3, #20
 8000a76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_ADC_Init+0x1ac>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d10b      	bne.n	8000ab4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f023 0303 	bic.w	r3, r3, #3
 8000aaa:	f043 0201 	orr.w	r2, r3, #1
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab2:	e018      	b.n	8000ae6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f023 0312 	bic.w	r3, r3, #18
 8000abc:	f043 0210 	orr.w	r2, r3, #16
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	f043 0201 	orr.w	r2, r3, #1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad4:	e007      	b.n	8000ae6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	f043 0210 	orr.w	r2, r3, #16
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	ffe1f7fd 	.word	0xffe1f7fd
 8000af4:	ff1f0efe 	.word	0xff1f0efe

08000af8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a64      	ldr	r2, [pc, #400]	; (8000ca0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d004      	beq.n	8000b1c <HAL_ADC_Start_DMA+0x24>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a63      	ldr	r2, [pc, #396]	; (8000ca4 <HAL_ADC_Start_DMA+0x1ac>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <HAL_ADC_Start_DMA+0x32>
 8000b1c:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f040 80b3 	bne.w	8000c90 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d101      	bne.n	8000b38 <HAL_ADC_Start_DMA+0x40>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e0ae      	b.n	8000c96 <HAL_ADC_Start_DMA+0x19e>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 f9cb 	bl	8000edc <ADC_Enable>
 8000b46:	4603      	mov	r3, r0
 8000b48:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f040 809a 	bne.w	8000c86 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <HAL_ADC_Start_DMA+0x1ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d105      	bne.n	8000b7c <HAL_ADC_Start_DMA+0x84>
 8000b70:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d115      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d026      	beq.n	8000be4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ba6:	e01d      	b.n	8000be4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <HAL_ADC_Start_DMA+0x1a8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d004      	beq.n	8000bc8 <HAL_ADC_Start_DMA+0xd0>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a38      	ldr	r2, [pc, #224]	; (8000ca4 <HAL_ADC_Start_DMA+0x1ac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d10d      	bne.n	8000be4 <HAL_ADC_Start_DMA+0xec>
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <HAL_ADC_Start_DMA+0x1a8>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	f023 0206 	bic.w	r2, r3, #6
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bfc:	e002      	b.n	8000c04 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <HAL_ADC_Start_DMA+0x1b0>)
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4a24      	ldr	r2, [pc, #144]	; (8000cac <HAL_ADC_Start_DMA+0x1b4>)
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	4a23      	ldr	r2, [pc, #140]	; (8000cb0 <HAL_ADC_Start_DMA+0x1b8>)
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f06f 0202 	mvn.w	r2, #2
 8000c2c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c3c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6a18      	ldr	r0, [r3, #32]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	334c      	adds	r3, #76	; 0x4c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f000 fc5d 	bl	800150c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c5c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c60:	d108      	bne.n	8000c74 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c70:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c72:	e00f      	b.n	8000c94 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c82:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c84:	e006      	b.n	8000c94 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000c8e:	e001      	b.n	8000c94 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012400 	.word	0x40012400
 8000ca4:	40012800 	.word	0x40012800
 8000ca8:	08001013 	.word	0x08001013
 8000cac:	0800108f 	.word	0x0800108f
 8000cb0:	080010ab 	.word	0x080010ab

08000cb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x20>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e0dc      	b.n	8000ec6 <HAL_ADC_ConfigChannel+0x1da>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b06      	cmp	r3, #6
 8000d1a:	d81c      	bhi.n	8000d56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b05      	subs	r3, #5
 8000d2e:	221f      	movs	r2, #31
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4019      	ands	r1, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	3b05      	subs	r3, #5
 8000d48:	fa00 f203 	lsl.w	r2, r0, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
 8000d54:	e03c      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b0c      	cmp	r3, #12
 8000d5c:	d81c      	bhi.n	8000d98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b23      	subs	r3, #35	; 0x23
 8000d70:	221f      	movs	r2, #31
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4019      	ands	r1, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	3b23      	subs	r3, #35	; 0x23
 8000d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
 8000d96:	e01b      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	3b41      	subs	r3, #65	; 0x41
 8000daa:	221f      	movs	r2, #31
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4019      	ands	r1, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b41      	subs	r3, #65	; 0x41
 8000dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d91c      	bls.n	8000e12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68d9      	ldr	r1, [r3, #12]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	3b1e      	subs	r3, #30
 8000dea:	2207      	movs	r2, #7
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4019      	ands	r1, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	6898      	ldr	r0, [r3, #8]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	3b1e      	subs	r3, #30
 8000e04:	fa00 f203 	lsl.w	r2, r0, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	e019      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6919      	ldr	r1, [r3, #16]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	2207      	movs	r2, #7
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4019      	ands	r1, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	6898      	ldr	r0, [r3, #8]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	d003      	beq.n	8000e56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e52:	2b11      	cmp	r3, #17
 8000e54:	d132      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d125      	bne.n	8000eac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d126      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b10      	cmp	r3, #16
 8000e84:	d11a      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	0c9a      	lsrs	r2, r3, #18
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e9c:	e002      	b.n	8000ea4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f9      	bne.n	8000e9e <HAL_ADC_ConfigChannel+0x1b2>
 8000eaa:	e007      	b.n	8000ebc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	f043 0220 	orr.w	r2, r3, #32
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40012400 	.word	0x40012400
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	431bde83 	.word	0x431bde83

08000edc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d040      	beq.n	8000f7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0201 	orr.w	r2, r2, #1
 8000f08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <ADC_Enable+0xac>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <ADC_Enable+0xb0>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	0c9b      	lsrs	r3, r3, #18
 8000f16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f18:	e002      	b.n	8000f20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f26:	f7ff fce1 	bl	80008ec <HAL_GetTick>
 8000f2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f2c:	e01f      	b.n	8000f6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f2e:	f7ff fcdd 	bl	80008ec <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d918      	bls.n	8000f6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d011      	beq.n	8000f6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	f043 0210 	orr.w	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e007      	b.n	8000f7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d1d8      	bne.n	8000f2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	431bde83 	.word	0x431bde83

08000f90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d12e      	bne.n	8001008 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fba:	f7ff fc97 	bl	80008ec <HAL_GetTick>
 8000fbe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fc0:	e01b      	b.n	8000ffa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fc2:	f7ff fc93 	bl	80008ec <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d914      	bls.n	8000ffa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10d      	bne.n	8000ffa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f043 0210 	orr.w	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e007      	b.n	800100a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b01      	cmp	r3, #1
 8001006:	d0dc      	beq.n	8000fc2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001028:	2b00      	cmp	r3, #0
 800102a:	d127      	bne.n	800107c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001042:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001046:	d115      	bne.n	8001074 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800104c:	2b00      	cmp	r3, #0
 800104e:	d111      	bne.n	8001074 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff fe1d 	bl	8000cb4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800107a:	e004      	b.n	8001086 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	4798      	blx	r3
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fe12 	bl	8000cc6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	f043 0204 	orr.w	r2, r3, #4
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fe01 	bl	8000cd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_ADCEx_Calibration_Start+0x1e>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e097      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x14e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff42 	bl	8000f90 <ADC_ConversionStop_Disable>
 800110c:	4603      	mov	r3, r0
 800110e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fee3 	bl	8000edc <ADC_Enable>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 8081 	bne.w	8001224 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112a:	f023 0302 	bic.w	r3, r3, #2
 800112e:	f043 0202 	orr.w	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <HAL_ADCEx_Calibration_Start+0x158>)
 8001138:	681c      	ldr	r4, [r3, #0]
 800113a:	2002      	movs	r0, #2
 800113c:	f001 f9c8 	bl	80024d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001140:	4603      	mov	r3, r0
 8001142:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001146:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001148:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800114a:	e002      	b.n	8001152 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3b01      	subs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f9      	bne.n	800114c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0208 	orr.w	r2, r2, #8
 8001166:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001168:	f7ff fbc0 	bl	80008ec <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800116e:	e01b      	b.n	80011a8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001170:	f7ff fbbc 	bl	80008ec <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d914      	bls.n	80011a8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00d      	beq.n	80011a8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f023 0312 	bic.w	r3, r3, #18
 8001194:	f043 0210 	orr.w	r2, r3, #16
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e042      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1dc      	bne.n	8001170 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0204 	orr.w	r2, r2, #4
 80011c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80011c6:	f7ff fb91 	bl	80008ec <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011cc:	e01b      	b.n	8001206 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80011ce:	f7ff fb8d 	bl	80008ec <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	d914      	bls.n	8001206 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00d      	beq.n	8001206 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f023 0312 	bic.w	r3, r3, #18
 80011f2:	f043 0210 	orr.w	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e013      	b.n	800122e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1dc      	bne.n	80011ce <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f023 0303 	bic.w	r3, r3, #3
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000

0800123c <__NVIC_SetPriorityGrouping>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4906      	ldr	r1, [pc, #24]	; (80012d4 <__NVIC_EnableIRQ+0x34>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Config>:
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff90 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff2d 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff42 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff90 	bl	800132c <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5f 	bl	80012d8 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff35 	bl	80012a0 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e043      	b.n	80014f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_DMA_Init+0xa8>)
 8001476:	4413      	add	r3, r2
 8001478:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_DMA_Init+0xac>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	009a      	lsls	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <HAL_DMA_Init+0xb0>)
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	bffdfff8 	.word	0xbffdfff8
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	40020000 	.word	0x40020000

0800150c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_DMA_Start_IT+0x20>
 8001528:	2302      	movs	r3, #2
 800152a:	e04b      	b.n	80015c4 <HAL_DMA_Start_IT+0xb8>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d13a      	bne.n	80015b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f937 	bl	80017d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 020e 	orr.w	r2, r2, #14
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e00f      	b.n	80015a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 020a 	orr.w	r2, r2, #10
 80015a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e005      	b.n	80015c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015be:	2302      	movs	r3, #2
 80015c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	2204      	movs	r2, #4
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d04f      	beq.n	8001694 <HAL_DMA_IRQHandler+0xc8>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d04a      	beq.n	8001694 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	2b00      	cmp	r3, #0
 800160a:	d107      	bne.n	800161c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0204 	bic.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a66      	ldr	r2, [pc, #408]	; (80017bc <HAL_DMA_IRQHandler+0x1f0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d029      	beq.n	800167a <HAL_DMA_IRQHandler+0xae>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_DMA_IRQHandler+0x1f4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d022      	beq.n	8001676 <HAL_DMA_IRQHandler+0xaa>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a63      	ldr	r2, [pc, #396]	; (80017c4 <HAL_DMA_IRQHandler+0x1f8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01a      	beq.n	8001670 <HAL_DMA_IRQHandler+0xa4>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a62      	ldr	r2, [pc, #392]	; (80017c8 <HAL_DMA_IRQHandler+0x1fc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d012      	beq.n	800166a <HAL_DMA_IRQHandler+0x9e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a60      	ldr	r2, [pc, #384]	; (80017cc <HAL_DMA_IRQHandler+0x200>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00a      	beq.n	8001664 <HAL_DMA_IRQHandler+0x98>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <HAL_DMA_IRQHandler+0x204>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d102      	bne.n	800165e <HAL_DMA_IRQHandler+0x92>
 8001658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165c:	e00e      	b.n	800167c <HAL_DMA_IRQHandler+0xb0>
 800165e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001662:	e00b      	b.n	800167c <HAL_DMA_IRQHandler+0xb0>
 8001664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001668:	e008      	b.n	800167c <HAL_DMA_IRQHandler+0xb0>
 800166a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800166e:	e005      	b.n	800167c <HAL_DMA_IRQHandler+0xb0>
 8001670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001674:	e002      	b.n	800167c <HAL_DMA_IRQHandler+0xb0>
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	e000      	b.n	800167c <HAL_DMA_IRQHandler+0xb0>
 800167a:	2304      	movs	r3, #4
 800167c:	4a55      	ldr	r2, [pc, #340]	; (80017d4 <HAL_DMA_IRQHandler+0x208>)
 800167e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8094 	beq.w	80017b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001692:	e08e      	b.n	80017b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2202      	movs	r2, #2
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d056      	beq.n	8001752 <HAL_DMA_IRQHandler+0x186>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d051      	beq.n	8001752 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10b      	bne.n	80016d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 020a 	bic.w	r2, r2, #10
 80016ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_DMA_IRQHandler+0x1f0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d029      	beq.n	8001732 <HAL_DMA_IRQHandler+0x166>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a37      	ldr	r2, [pc, #220]	; (80017c0 <HAL_DMA_IRQHandler+0x1f4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d022      	beq.n	800172e <HAL_DMA_IRQHandler+0x162>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a35      	ldr	r2, [pc, #212]	; (80017c4 <HAL_DMA_IRQHandler+0x1f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01a      	beq.n	8001728 <HAL_DMA_IRQHandler+0x15c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a34      	ldr	r2, [pc, #208]	; (80017c8 <HAL_DMA_IRQHandler+0x1fc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d012      	beq.n	8001722 <HAL_DMA_IRQHandler+0x156>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_DMA_IRQHandler+0x200>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00a      	beq.n	800171c <HAL_DMA_IRQHandler+0x150>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a31      	ldr	r2, [pc, #196]	; (80017d0 <HAL_DMA_IRQHandler+0x204>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d102      	bne.n	8001716 <HAL_DMA_IRQHandler+0x14a>
 8001710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001714:	e00e      	b.n	8001734 <HAL_DMA_IRQHandler+0x168>
 8001716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171a:	e00b      	b.n	8001734 <HAL_DMA_IRQHandler+0x168>
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	e008      	b.n	8001734 <HAL_DMA_IRQHandler+0x168>
 8001722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001726:	e005      	b.n	8001734 <HAL_DMA_IRQHandler+0x168>
 8001728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172c:	e002      	b.n	8001734 <HAL_DMA_IRQHandler+0x168>
 800172e:	2320      	movs	r3, #32
 8001730:	e000      	b.n	8001734 <HAL_DMA_IRQHandler+0x168>
 8001732:	2302      	movs	r3, #2
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_DMA_IRQHandler+0x208>)
 8001736:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d034      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001750:	e02f      	b.n	80017b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	2208      	movs	r2, #8
 8001758:	409a      	lsls	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d028      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x1e8>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 020e 	bic.w	r2, r2, #14
 800177a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
    }
  }
  return;
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
}
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40020008 	.word	0x40020008
 80017c0:	4002001c 	.word	0x4002001c
 80017c4:	40020030 	.word	0x40020030
 80017c8:	40020044 	.word	0x40020044
 80017cc:	40020058 	.word	0x40020058
 80017d0:	4002006c 	.word	0x4002006c
 80017d4:	40020000 	.word	0x40020000

080017d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d108      	bne.n	8001818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001816:	e007      	b.n	8001828 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	60da      	str	r2, [r3, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e169      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8158 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a90      	ldr	r2, [pc, #576]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b1 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1e0>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4928      	ldr	r1, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x2e2>
 8001ad2:	bf00      	nop
 8001ad4:	10320000 	.word	0x10320000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae8e 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e272      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8087 	beq.w	8001c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8c:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d00c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b98:	4b8f      	ldr	r3, [pc, #572]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d112      	bne.n	8001bca <HAL_RCC_OscConfig+0x5e>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d10b      	bne.n	8001bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d06c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x12c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d168      	bne.n	8001c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e24c      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x76>
 8001bd4:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a7f      	ldr	r2, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e02e      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x98>
 8001bea:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a77      	ldr	r2, [pc, #476]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xbc>
 8001c0e:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a71      	ldr	r2, [pc, #452]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6e      	ldr	r2, [pc, #440]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6a      	ldr	r2, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a67      	ldr	r2, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe fe50 	bl	80008ec <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7fe fe4c 	bl	80008ec <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e200      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe4>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fe3c 	bl	80008ec <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe fe38 	bl	80008ec <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1ec      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x10c>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x18c>
 8001cbe:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1c0      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4939      	ldr	r1, [pc, #228]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fdf1 	bl	80008ec <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7fe fded 	bl	80008ec <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1a1      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4927      	ldr	r1, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe fdd0 	bl	80008ec <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7fe fdcc 	bl	80008ec <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e180      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03a      	beq.n	8001df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d019      	beq.n	8001db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7fe fdb0 	bl	80008ec <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7fe fdac 	bl	80008ec <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e160      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 faba 	bl	8002328 <RCC_Delay>
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7fe fd96 	bl	80008ec <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7fe fd92 	bl	80008ec <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d908      	bls.n	8001de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e146      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	42420000 	.word	0x42420000
 8001de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b92      	ldr	r3, [pc, #584]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e9      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80a6 	beq.w	8001f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a87      	ldr	r2, [pc, #540]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b82      	ldr	r3, [pc, #520]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d118      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e42:	f7fe fd53 	bl	80008ec <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4a:	f7fe fd4f 	bl	80008ec <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	; 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e103      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x312>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	e02d      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x334>
 8001e86:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a66      	ldr	r2, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	e01c      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x356>
 8001ea8:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a60      	ldr	r2, [pc, #384]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d015      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fd03 	bl	80008ec <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fcff 	bl	80008ec <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0b1      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ee      	beq.n	8001eea <HAL_RCC_OscConfig+0x37e>
 8001f0c:	e014      	b.n	8001f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fced 	bl	80008ec <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe fce9 	bl	80008ec <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e09b      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d061      	beq.n	8002024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d146      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fcbd 	bl	80008ec <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe fcb9 	bl	80008ec <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e06d      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d108      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4921      	ldr	r1, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a19      	ldr	r1, [r3, #32]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	491b      	ldr	r1, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fc8d 	bl	80008ec <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe fc89 	bl	80008ec <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x46a>
 8001ff4:	e035      	b.n	8002062 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fc76 	bl	80008ec <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fc72 	bl	80008ec <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e026      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x498>
 8002022:	e01e      	b.n	8002062 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e019      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x500>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0d0      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4965      	ldr	r1, [pc, #404]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	494d      	ldr	r1, [pc, #308]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d040      	beq.n	8002190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e073      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06b      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4936      	ldr	r1, [pc, #216]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7fe fbc4 	bl	80008ec <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe fbc0 	bl	80008ec <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e053      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d210      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4922      	ldr	r1, [pc, #136]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e032      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4916      	ldr	r1, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fe:	f000 f821 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002202:	4602      	mov	r2, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	490a      	ldr	r1, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	5ccb      	ldrb	r3, [r1, r3]
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1cc>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fb22 	bl	8000868 <HAL_InitTick>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	0800361c 	.word	0x0800361c
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x30>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x36>
 8002272:	e027      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	613b      	str	r3, [r7, #16]
      break;
 8002278:	e027      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0c5b      	lsrs	r3, r3, #17
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e004      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	613b      	str	r3, [r7, #16]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	693b      	ldr	r3, [r7, #16]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	08003634 	.word	0x08003634
 80022e4:	08003644 	.word	0x08003644
 80022e8:	003d0900 	.word	0x003d0900

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <HAL_RCC_GetHCLKFreq+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002304:	f7ff fff2 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	0800362c 	.word	0x0800362c

08002328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <RCC_Delay+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <RCC_Delay+0x38>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0a5b      	lsrs	r3, r3, #9
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002344:	bf00      	nop
  }
  while (Delay --);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f9      	bne.n	8002344 <RCC_Delay+0x1c>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000000 	.word	0x20000000
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d07d      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002384:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10d      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
 800239c:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d118      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a42      	ldr	r2, [pc, #264]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fa92 	bl	80008ec <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	e008      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7fe fa8e 	bl	80008ec <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e06d      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02e      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d027      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002418:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800241e:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7fe fa5d 	bl	80008ec <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fa59 	bl	80008ec <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e036      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4917      	ldr	r1, [pc, #92]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	4313      	orrs	r3, r2
 8002468:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	490b      	ldr	r1, [pc, #44]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4904      	ldr	r1, [pc, #16]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42420440 	.word	0x42420440

080024d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	f200 808a 	bhi.w	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d045      	beq.n	800258c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d075      	beq.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002506:	e082      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800250e:	4b45      	ldr	r3, [pc, #276]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d07b      	beq.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	4a41      	ldr	r2, [pc, #260]	; (8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	0c5b      	lsrs	r3, r3, #17
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800254c:	4a38      	ldr	r2, [pc, #224]	; (8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fbb2 f2f3 	udiv	r2, r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e004      	b.n	8002568 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4a34      	ldr	r2, [pc, #208]	; (8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002574:	d102      	bne.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	61bb      	str	r3, [r7, #24]
      break;
 800257a:	e04a      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	61bb      	str	r3, [r7, #24]
      break;
 800258a:	e042      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259c:	d108      	bne.n	80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	e01f      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ba:	d109      	bne.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80025c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e00f      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025da:	d11c      	bne.n	8002616 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80025e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025ec:	61bb      	str	r3, [r7, #24]
      break;
 80025ee:	e012      	b.n	8002616 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025f0:	e011      	b.n	8002616 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025f2:	f7ff fe85 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	0b9b      	lsrs	r3, r3, #14
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	61bb      	str	r3, [r7, #24]
      break;
 800260c:	e004      	b.n	8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800260e:	bf00      	nop
 8002610:	e002      	b.n	8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002612:	bf00      	nop
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002616:	bf00      	nop
    }
  }
  return (frequency);
 8002618:	69bb      	ldr	r3, [r7, #24]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	08003648 	.word	0x08003648
 800262c:	08003658 	.word	0x08003658
 8002630:	007a1200 	.word	0x007a1200
 8002634:	003d0900 	.word	0x003d0900
 8002638:	aaaaaaab 	.word	0xaaaaaaab

0800263c <Init>:
#include "mq135.h"

//extern uint32_t adc_valuel;

void  Init(struct MQ135 *mq135, ADC_HandleTypeDef *hadc, DMA_HandleTypeDef *hdma_adc, float _rload, float _rzero) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
    if (_rload==-1) mq135->_rload = 10.0; else mq135->_rload =_rload;
 800264a:	491c      	ldr	r1, [pc, #112]	; (80026bc <Init+0x80>)
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7fd fdc1 	bl	80001d4 <__aeabi_fcmpeq>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <Init+0x24>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <Init+0x84>)
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	e002      	b.n	8002666 <Init+0x2a>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]
    if (_rzero==-1) mq135->_rzero =76.63; else mq135->_rzero =_rzero;
 8002666:	4915      	ldr	r1, [pc, #84]	; (80026bc <Init+0x80>)
 8002668:	69b8      	ldr	r0, [r7, #24]
 800266a:	f7fd fdb3 	bl	80001d4 <__aeabi_fcmpeq>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <Init+0x40>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <Init+0x88>)
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	e002      	b.n	8002682 <Init+0x46>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	60da      	str	r2, [r3, #12]
    mq135->hadc =hadc;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	601a      	str	r2, [r3, #0]
    mq135->hdma_adc =hdma_adc;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]
    mq135->adc_value = 0;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
    mq135->ppm = 0;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	615a      	str	r2, [r3, #20]
    HAL_ADCEx_Calibration_Start(mq135->hadc);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd1e 	bl	80010e0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(mq135->hadc,(uint32_t*)&mq135->adc_value,1);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3310      	adds	r3, #16
 80026ac:	2201      	movs	r2, #1
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7fe fa22 	bl	8000af8 <HAL_ADC_Start_DMA>
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	bf800000 	.word	0xbf800000
 80026c0:	41200000 	.word	0x41200000
 80026c4:	4299428f 	.word	0x4299428f

080026c8 <std>:
 80026c8:	2300      	movs	r3, #0
 80026ca:	b510      	push	{r4, lr}
 80026cc:	4604      	mov	r4, r0
 80026ce:	e9c0 3300 	strd	r3, r3, [r0]
 80026d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026d6:	6083      	str	r3, [r0, #8]
 80026d8:	8181      	strh	r1, [r0, #12]
 80026da:	6643      	str	r3, [r0, #100]	; 0x64
 80026dc:	81c2      	strh	r2, [r0, #14]
 80026de:	6183      	str	r3, [r0, #24]
 80026e0:	4619      	mov	r1, r3
 80026e2:	2208      	movs	r2, #8
 80026e4:	305c      	adds	r0, #92	; 0x5c
 80026e6:	f000 f9e5 	bl	8002ab4 <memset>
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <std+0x38>)
 80026ec:	6224      	str	r4, [r4, #32]
 80026ee:	6263      	str	r3, [r4, #36]	; 0x24
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <std+0x3c>)
 80026f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <std+0x40>)
 80026f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <std+0x44>)
 80026fa:	6323      	str	r3, [r4, #48]	; 0x30
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	bf00      	nop
 8002700:	08002905 	.word	0x08002905
 8002704:	08002927 	.word	0x08002927
 8002708:	0800295f 	.word	0x0800295f
 800270c:	08002983 	.word	0x08002983

08002710 <stdio_exit_handler>:
 8002710:	4a02      	ldr	r2, [pc, #8]	; (800271c <stdio_exit_handler+0xc>)
 8002712:	4903      	ldr	r1, [pc, #12]	; (8002720 <stdio_exit_handler+0x10>)
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <stdio_exit_handler+0x14>)
 8002716:	f000 b869 	b.w	80027ec <_fwalk_sglue>
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c
 8002720:	08003441 	.word	0x08003441
 8002724:	20000018 	.word	0x20000018

08002728 <cleanup_stdio>:
 8002728:	6841      	ldr	r1, [r0, #4]
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <cleanup_stdio+0x34>)
 800272c:	b510      	push	{r4, lr}
 800272e:	4299      	cmp	r1, r3
 8002730:	4604      	mov	r4, r0
 8002732:	d001      	beq.n	8002738 <cleanup_stdio+0x10>
 8002734:	f000 fe84 	bl	8003440 <_fflush_r>
 8002738:	68a1      	ldr	r1, [r4, #8]
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <cleanup_stdio+0x38>)
 800273c:	4299      	cmp	r1, r3
 800273e:	d002      	beq.n	8002746 <cleanup_stdio+0x1e>
 8002740:	4620      	mov	r0, r4
 8002742:	f000 fe7d 	bl	8003440 <_fflush_r>
 8002746:	68e1      	ldr	r1, [r4, #12]
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <cleanup_stdio+0x3c>)
 800274a:	4299      	cmp	r1, r3
 800274c:	d004      	beq.n	8002758 <cleanup_stdio+0x30>
 800274e:	4620      	mov	r0, r4
 8002750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002754:	f000 be74 	b.w	8003440 <_fflush_r>
 8002758:	bd10      	pop	{r4, pc}
 800275a:	bf00      	nop
 800275c:	20000100 	.word	0x20000100
 8002760:	20000168 	.word	0x20000168
 8002764:	200001d0 	.word	0x200001d0

08002768 <global_stdio_init.part.0>:
 8002768:	b510      	push	{r4, lr}
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <global_stdio_init.part.0+0x30>)
 800276c:	4c0b      	ldr	r4, [pc, #44]	; (800279c <global_stdio_init.part.0+0x34>)
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <global_stdio_init.part.0+0x38>)
 8002770:	4620      	mov	r0, r4
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	2104      	movs	r1, #4
 8002776:	2200      	movs	r2, #0
 8002778:	f7ff ffa6 	bl	80026c8 <std>
 800277c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002780:	2201      	movs	r2, #1
 8002782:	2109      	movs	r1, #9
 8002784:	f7ff ffa0 	bl	80026c8 <std>
 8002788:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800278c:	2202      	movs	r2, #2
 800278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002792:	2112      	movs	r1, #18
 8002794:	f7ff bf98 	b.w	80026c8 <std>
 8002798:	20000238 	.word	0x20000238
 800279c:	20000100 	.word	0x20000100
 80027a0:	08002711 	.word	0x08002711

080027a4 <__sfp_lock_acquire>:
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <__sfp_lock_acquire+0x8>)
 80027a6:	f000 b9fd 	b.w	8002ba4 <__retarget_lock_acquire_recursive>
 80027aa:	bf00      	nop
 80027ac:	20000241 	.word	0x20000241

080027b0 <__sfp_lock_release>:
 80027b0:	4801      	ldr	r0, [pc, #4]	; (80027b8 <__sfp_lock_release+0x8>)
 80027b2:	f000 b9f8 	b.w	8002ba6 <__retarget_lock_release_recursive>
 80027b6:	bf00      	nop
 80027b8:	20000241 	.word	0x20000241

080027bc <__sinit>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
 80027c0:	f7ff fff0 	bl	80027a4 <__sfp_lock_acquire>
 80027c4:	6a23      	ldr	r3, [r4, #32]
 80027c6:	b11b      	cbz	r3, 80027d0 <__sinit+0x14>
 80027c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027cc:	f7ff bff0 	b.w	80027b0 <__sfp_lock_release>
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__sinit+0x28>)
 80027d2:	6223      	str	r3, [r4, #32]
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__sinit+0x2c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f5      	bne.n	80027c8 <__sinit+0xc>
 80027dc:	f7ff ffc4 	bl	8002768 <global_stdio_init.part.0>
 80027e0:	e7f2      	b.n	80027c8 <__sinit+0xc>
 80027e2:	bf00      	nop
 80027e4:	08002729 	.word	0x08002729
 80027e8:	20000238 	.word	0x20000238

080027ec <_fwalk_sglue>:
 80027ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027f0:	4607      	mov	r7, r0
 80027f2:	4688      	mov	r8, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	2600      	movs	r6, #0
 80027f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002800:	d505      	bpl.n	800280e <_fwalk_sglue+0x22>
 8002802:	6824      	ldr	r4, [r4, #0]
 8002804:	2c00      	cmp	r4, #0
 8002806:	d1f7      	bne.n	80027f8 <_fwalk_sglue+0xc>
 8002808:	4630      	mov	r0, r6
 800280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280e:	89ab      	ldrh	r3, [r5, #12]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d907      	bls.n	8002824 <_fwalk_sglue+0x38>
 8002814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002818:	3301      	adds	r3, #1
 800281a:	d003      	beq.n	8002824 <_fwalk_sglue+0x38>
 800281c:	4629      	mov	r1, r5
 800281e:	4638      	mov	r0, r7
 8002820:	47c0      	blx	r8
 8002822:	4306      	orrs	r6, r0
 8002824:	3568      	adds	r5, #104	; 0x68
 8002826:	e7e9      	b.n	80027fc <_fwalk_sglue+0x10>

08002828 <iprintf>:
 8002828:	b40f      	push	{r0, r1, r2, r3}
 800282a:	b507      	push	{r0, r1, r2, lr}
 800282c:	4906      	ldr	r1, [pc, #24]	; (8002848 <iprintf+0x20>)
 800282e:	ab04      	add	r3, sp, #16
 8002830:	6808      	ldr	r0, [r1, #0]
 8002832:	f853 2b04 	ldr.w	r2, [r3], #4
 8002836:	6881      	ldr	r1, [r0, #8]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	f000 fad1 	bl	8002de0 <_vfiprintf_r>
 800283e:	b003      	add	sp, #12
 8002840:	f85d eb04 	ldr.w	lr, [sp], #4
 8002844:	b004      	add	sp, #16
 8002846:	4770      	bx	lr
 8002848:	20000064 	.word	0x20000064

0800284c <_puts_r>:
 800284c:	6a03      	ldr	r3, [r0, #32]
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	4605      	mov	r5, r0
 8002852:	460e      	mov	r6, r1
 8002854:	6884      	ldr	r4, [r0, #8]
 8002856:	b90b      	cbnz	r3, 800285c <_puts_r+0x10>
 8002858:	f7ff ffb0 	bl	80027bc <__sinit>
 800285c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800285e:	07db      	lsls	r3, r3, #31
 8002860:	d405      	bmi.n	800286e <_puts_r+0x22>
 8002862:	89a3      	ldrh	r3, [r4, #12]
 8002864:	0598      	lsls	r0, r3, #22
 8002866:	d402      	bmi.n	800286e <_puts_r+0x22>
 8002868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800286a:	f000 f99b 	bl	8002ba4 <__retarget_lock_acquire_recursive>
 800286e:	89a3      	ldrh	r3, [r4, #12]
 8002870:	0719      	lsls	r1, r3, #28
 8002872:	d513      	bpl.n	800289c <_puts_r+0x50>
 8002874:	6923      	ldr	r3, [r4, #16]
 8002876:	b18b      	cbz	r3, 800289c <_puts_r+0x50>
 8002878:	3e01      	subs	r6, #1
 800287a:	68a3      	ldr	r3, [r4, #8]
 800287c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002880:	3b01      	subs	r3, #1
 8002882:	60a3      	str	r3, [r4, #8]
 8002884:	b9e9      	cbnz	r1, 80028c2 <_puts_r+0x76>
 8002886:	2b00      	cmp	r3, #0
 8002888:	da2e      	bge.n	80028e8 <_puts_r+0x9c>
 800288a:	4622      	mov	r2, r4
 800288c:	210a      	movs	r1, #10
 800288e:	4628      	mov	r0, r5
 8002890:	f000 f87b 	bl	800298a <__swbuf_r>
 8002894:	3001      	adds	r0, #1
 8002896:	d007      	beq.n	80028a8 <_puts_r+0x5c>
 8002898:	250a      	movs	r5, #10
 800289a:	e007      	b.n	80028ac <_puts_r+0x60>
 800289c:	4621      	mov	r1, r4
 800289e:	4628      	mov	r0, r5
 80028a0:	f000 f8b0 	bl	8002a04 <__swsetup_r>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d0e7      	beq.n	8002878 <_puts_r+0x2c>
 80028a8:	f04f 35ff 	mov.w	r5, #4294967295
 80028ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028ae:	07da      	lsls	r2, r3, #31
 80028b0:	d405      	bmi.n	80028be <_puts_r+0x72>
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	059b      	lsls	r3, r3, #22
 80028b6:	d402      	bmi.n	80028be <_puts_r+0x72>
 80028b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ba:	f000 f974 	bl	8002ba6 <__retarget_lock_release_recursive>
 80028be:	4628      	mov	r0, r5
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da04      	bge.n	80028d0 <_puts_r+0x84>
 80028c6:	69a2      	ldr	r2, [r4, #24]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dc06      	bgt.n	80028da <_puts_r+0x8e>
 80028cc:	290a      	cmp	r1, #10
 80028ce:	d004      	beq.n	80028da <_puts_r+0x8e>
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	6022      	str	r2, [r4, #0]
 80028d6:	7019      	strb	r1, [r3, #0]
 80028d8:	e7cf      	b.n	800287a <_puts_r+0x2e>
 80028da:	4622      	mov	r2, r4
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 f854 	bl	800298a <__swbuf_r>
 80028e2:	3001      	adds	r0, #1
 80028e4:	d1c9      	bne.n	800287a <_puts_r+0x2e>
 80028e6:	e7df      	b.n	80028a8 <_puts_r+0x5c>
 80028e8:	250a      	movs	r5, #10
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	6022      	str	r2, [r4, #0]
 80028f0:	701d      	strb	r5, [r3, #0]
 80028f2:	e7db      	b.n	80028ac <_puts_r+0x60>

080028f4 <puts>:
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <puts+0xc>)
 80028f6:	4601      	mov	r1, r0
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	f7ff bfa7 	b.w	800284c <_puts_r>
 80028fe:	bf00      	nop
 8002900:	20000064 	.word	0x20000064

08002904 <__sread>:
 8002904:	b510      	push	{r4, lr}
 8002906:	460c      	mov	r4, r1
 8002908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800290c:	f000 f8fc 	bl	8002b08 <_read_r>
 8002910:	2800      	cmp	r0, #0
 8002912:	bfab      	itete	ge
 8002914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002916:	89a3      	ldrhlt	r3, [r4, #12]
 8002918:	181b      	addge	r3, r3, r0
 800291a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800291e:	bfac      	ite	ge
 8002920:	6563      	strge	r3, [r4, #84]	; 0x54
 8002922:	81a3      	strhlt	r3, [r4, #12]
 8002924:	bd10      	pop	{r4, pc}

08002926 <__swrite>:
 8002926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292a:	461f      	mov	r7, r3
 800292c:	898b      	ldrh	r3, [r1, #12]
 800292e:	4605      	mov	r5, r0
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	460c      	mov	r4, r1
 8002934:	4616      	mov	r6, r2
 8002936:	d505      	bpl.n	8002944 <__swrite+0x1e>
 8002938:	2302      	movs	r3, #2
 800293a:	2200      	movs	r2, #0
 800293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002940:	f000 f8d0 	bl	8002ae4 <_lseek_r>
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	4632      	mov	r2, r6
 8002948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294c:	81a3      	strh	r3, [r4, #12]
 800294e:	4628      	mov	r0, r5
 8002950:	463b      	mov	r3, r7
 8002952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800295a:	f000 b8e7 	b.w	8002b2c <_write_r>

0800295e <__sseek>:
 800295e:	b510      	push	{r4, lr}
 8002960:	460c      	mov	r4, r1
 8002962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002966:	f000 f8bd 	bl	8002ae4 <_lseek_r>
 800296a:	1c43      	adds	r3, r0, #1
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	bf15      	itete	ne
 8002970:	6560      	strne	r0, [r4, #84]	; 0x54
 8002972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800297a:	81a3      	strheq	r3, [r4, #12]
 800297c:	bf18      	it	ne
 800297e:	81a3      	strhne	r3, [r4, #12]
 8002980:	bd10      	pop	{r4, pc}

08002982 <__sclose>:
 8002982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002986:	f000 b89d 	b.w	8002ac4 <_close_r>

0800298a <__swbuf_r>:
 800298a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298c:	460e      	mov	r6, r1
 800298e:	4614      	mov	r4, r2
 8002990:	4605      	mov	r5, r0
 8002992:	b118      	cbz	r0, 800299c <__swbuf_r+0x12>
 8002994:	6a03      	ldr	r3, [r0, #32]
 8002996:	b90b      	cbnz	r3, 800299c <__swbuf_r+0x12>
 8002998:	f7ff ff10 	bl	80027bc <__sinit>
 800299c:	69a3      	ldr	r3, [r4, #24]
 800299e:	60a3      	str	r3, [r4, #8]
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	071a      	lsls	r2, r3, #28
 80029a4:	d525      	bpl.n	80029f2 <__swbuf_r+0x68>
 80029a6:	6923      	ldr	r3, [r4, #16]
 80029a8:	b31b      	cbz	r3, 80029f2 <__swbuf_r+0x68>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	6922      	ldr	r2, [r4, #16]
 80029ae:	b2f6      	uxtb	r6, r6
 80029b0:	1a98      	subs	r0, r3, r2
 80029b2:	6963      	ldr	r3, [r4, #20]
 80029b4:	4637      	mov	r7, r6
 80029b6:	4283      	cmp	r3, r0
 80029b8:	dc04      	bgt.n	80029c4 <__swbuf_r+0x3a>
 80029ba:	4621      	mov	r1, r4
 80029bc:	4628      	mov	r0, r5
 80029be:	f000 fd3f 	bl	8003440 <_fflush_r>
 80029c2:	b9e0      	cbnz	r0, 80029fe <__swbuf_r+0x74>
 80029c4:	68a3      	ldr	r3, [r4, #8]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	6022      	str	r2, [r4, #0]
 80029d0:	701e      	strb	r6, [r3, #0]
 80029d2:	6962      	ldr	r2, [r4, #20]
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d004      	beq.n	80029e4 <__swbuf_r+0x5a>
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	07db      	lsls	r3, r3, #31
 80029de:	d506      	bpl.n	80029ee <__swbuf_r+0x64>
 80029e0:	2e0a      	cmp	r6, #10
 80029e2:	d104      	bne.n	80029ee <__swbuf_r+0x64>
 80029e4:	4621      	mov	r1, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	f000 fd2a 	bl	8003440 <_fflush_r>
 80029ec:	b938      	cbnz	r0, 80029fe <__swbuf_r+0x74>
 80029ee:	4638      	mov	r0, r7
 80029f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029f2:	4621      	mov	r1, r4
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 f805 	bl	8002a04 <__swsetup_r>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d0d5      	beq.n	80029aa <__swbuf_r+0x20>
 80029fe:	f04f 37ff 	mov.w	r7, #4294967295
 8002a02:	e7f4      	b.n	80029ee <__swbuf_r+0x64>

08002a04 <__swsetup_r>:
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <__swsetup_r+0xac>)
 8002a08:	4605      	mov	r5, r0
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	b118      	cbz	r0, 8002a18 <__swsetup_r+0x14>
 8002a10:	6a03      	ldr	r3, [r0, #32]
 8002a12:	b90b      	cbnz	r3, 8002a18 <__swsetup_r+0x14>
 8002a14:	f7ff fed2 	bl	80027bc <__sinit>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a1e:	0718      	lsls	r0, r3, #28
 8002a20:	d422      	bmi.n	8002a68 <__swsetup_r+0x64>
 8002a22:	06d9      	lsls	r1, r3, #27
 8002a24:	d407      	bmi.n	8002a36 <__swsetup_r+0x32>
 8002a26:	2309      	movs	r3, #9
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a32:	81a3      	strh	r3, [r4, #12]
 8002a34:	e034      	b.n	8002aa0 <__swsetup_r+0x9c>
 8002a36:	0758      	lsls	r0, r3, #29
 8002a38:	d512      	bpl.n	8002a60 <__swsetup_r+0x5c>
 8002a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a3c:	b141      	cbz	r1, 8002a50 <__swsetup_r+0x4c>
 8002a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a42:	4299      	cmp	r1, r3
 8002a44:	d002      	beq.n	8002a4c <__swsetup_r+0x48>
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f8ae 	bl	8002ba8 <_free_r>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a56:	81a3      	strh	r3, [r4, #12]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6063      	str	r3, [r4, #4]
 8002a5c:	6923      	ldr	r3, [r4, #16]
 8002a5e:	6023      	str	r3, [r4, #0]
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	b94b      	cbnz	r3, 8002a80 <__swsetup_r+0x7c>
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a76:	d003      	beq.n	8002a80 <__swsetup_r+0x7c>
 8002a78:	4621      	mov	r1, r4
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f000 fd2d 	bl	80034da <__smakebuf_r>
 8002a80:	89a0      	ldrh	r0, [r4, #12]
 8002a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a86:	f010 0301 	ands.w	r3, r0, #1
 8002a8a:	d00a      	beq.n	8002aa2 <__swsetup_r+0x9e>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60a3      	str	r3, [r4, #8]
 8002a90:	6963      	ldr	r3, [r4, #20]
 8002a92:	425b      	negs	r3, r3
 8002a94:	61a3      	str	r3, [r4, #24]
 8002a96:	6923      	ldr	r3, [r4, #16]
 8002a98:	b943      	cbnz	r3, 8002aac <__swsetup_r+0xa8>
 8002a9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a9e:	d1c4      	bne.n	8002a2a <__swsetup_r+0x26>
 8002aa0:	bd38      	pop	{r3, r4, r5, pc}
 8002aa2:	0781      	lsls	r1, r0, #30
 8002aa4:	bf58      	it	pl
 8002aa6:	6963      	ldrpl	r3, [r4, #20]
 8002aa8:	60a3      	str	r3, [r4, #8]
 8002aaa:	e7f4      	b.n	8002a96 <__swsetup_r+0x92>
 8002aac:	2000      	movs	r0, #0
 8002aae:	e7f7      	b.n	8002aa0 <__swsetup_r+0x9c>
 8002ab0:	20000064 	.word	0x20000064

08002ab4 <memset>:
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4402      	add	r2, r0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d100      	bne.n	8002abe <memset+0xa>
 8002abc:	4770      	bx	lr
 8002abe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac2:	e7f9      	b.n	8002ab8 <memset+0x4>

08002ac4 <_close_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4d05      	ldr	r5, [pc, #20]	; (8002ae0 <_close_r+0x1c>)
 8002aca:	4604      	mov	r4, r0
 8002acc:	4608      	mov	r0, r1
 8002ace:	602b      	str	r3, [r5, #0]
 8002ad0:	f7fd fe21 	bl	8000716 <_close>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d102      	bne.n	8002ade <_close_r+0x1a>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	b103      	cbz	r3, 8002ade <_close_r+0x1a>
 8002adc:	6023      	str	r3, [r4, #0]
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	2000023c 	.word	0x2000023c

08002ae4 <_lseek_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	2200      	movs	r2, #0
 8002aee:	4d05      	ldr	r5, [pc, #20]	; (8002b04 <_lseek_r+0x20>)
 8002af0:	602a      	str	r2, [r5, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7fd fe33 	bl	800075e <_lseek>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d102      	bne.n	8002b02 <_lseek_r+0x1e>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	b103      	cbz	r3, 8002b02 <_lseek_r+0x1e>
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	2000023c 	.word	0x2000023c

08002b08 <_read_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	2200      	movs	r2, #0
 8002b12:	4d05      	ldr	r5, [pc, #20]	; (8002b28 <_read_r+0x20>)
 8002b14:	602a      	str	r2, [r5, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f7fd fde0 	bl	80006dc <_read>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_read_r+0x1e>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_read_r+0x1e>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	2000023c 	.word	0x2000023c

08002b2c <_write_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	4d05      	ldr	r5, [pc, #20]	; (8002b4c <_write_r+0x20>)
 8002b38:	602a      	str	r2, [r5, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7fd fba2 	bl	8000284 <_write>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d102      	bne.n	8002b4a <_write_r+0x1e>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	b103      	cbz	r3, 8002b4a <_write_r+0x1e>
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	2000023c 	.word	0x2000023c

08002b50 <__errno>:
 8002b50:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <__errno+0x8>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000064 	.word	0x20000064

08002b5c <__libc_init_array>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	2600      	movs	r6, #0
 8002b60:	4d0c      	ldr	r5, [pc, #48]	; (8002b94 <__libc_init_array+0x38>)
 8002b62:	4c0d      	ldr	r4, [pc, #52]	; (8002b98 <__libc_init_array+0x3c>)
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	42a6      	cmp	r6, r4
 8002b6a:	d109      	bne.n	8002b80 <__libc_init_array+0x24>
 8002b6c:	f000 fd32 	bl	80035d4 <_init>
 8002b70:	2600      	movs	r6, #0
 8002b72:	4d0a      	ldr	r5, [pc, #40]	; (8002b9c <__libc_init_array+0x40>)
 8002b74:	4c0a      	ldr	r4, [pc, #40]	; (8002ba0 <__libc_init_array+0x44>)
 8002b76:	1b64      	subs	r4, r4, r5
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	42a6      	cmp	r6, r4
 8002b7c:	d105      	bne.n	8002b8a <__libc_init_array+0x2e>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b84:	4798      	blx	r3
 8002b86:	3601      	adds	r6, #1
 8002b88:	e7ee      	b.n	8002b68 <__libc_init_array+0xc>
 8002b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8e:	4798      	blx	r3
 8002b90:	3601      	adds	r6, #1
 8002b92:	e7f2      	b.n	8002b7a <__libc_init_array+0x1e>
 8002b94:	08003690 	.word	0x08003690
 8002b98:	08003690 	.word	0x08003690
 8002b9c:	08003690 	.word	0x08003690
 8002ba0:	08003694 	.word	0x08003694

08002ba4 <__retarget_lock_acquire_recursive>:
 8002ba4:	4770      	bx	lr

08002ba6 <__retarget_lock_release_recursive>:
 8002ba6:	4770      	bx	lr

08002ba8 <_free_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4605      	mov	r5, r0
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d040      	beq.n	8002c32 <_free_r+0x8a>
 8002bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bb4:	1f0c      	subs	r4, r1, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bfb8      	it	lt
 8002bba:	18e4      	addlt	r4, r4, r3
 8002bbc:	f000 f8dc 	bl	8002d78 <__malloc_lock>
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <_free_r+0x8c>)
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	b933      	cbnz	r3, 8002bd4 <_free_r+0x2c>
 8002bc6:	6063      	str	r3, [r4, #4]
 8002bc8:	6014      	str	r4, [r2, #0]
 8002bca:	4628      	mov	r0, r5
 8002bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bd0:	f000 b8d8 	b.w	8002d84 <__malloc_unlock>
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	d908      	bls.n	8002bea <_free_r+0x42>
 8002bd8:	6820      	ldr	r0, [r4, #0]
 8002bda:	1821      	adds	r1, r4, r0
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	bf01      	itttt	eq
 8002be0:	6819      	ldreq	r1, [r3, #0]
 8002be2:	685b      	ldreq	r3, [r3, #4]
 8002be4:	1809      	addeq	r1, r1, r0
 8002be6:	6021      	streq	r1, [r4, #0]
 8002be8:	e7ed      	b.n	8002bc6 <_free_r+0x1e>
 8002bea:	461a      	mov	r2, r3
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	b10b      	cbz	r3, 8002bf4 <_free_r+0x4c>
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	d9fa      	bls.n	8002bea <_free_r+0x42>
 8002bf4:	6811      	ldr	r1, [r2, #0]
 8002bf6:	1850      	adds	r0, r2, r1
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d10b      	bne.n	8002c14 <_free_r+0x6c>
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	4401      	add	r1, r0
 8002c00:	1850      	adds	r0, r2, r1
 8002c02:	4283      	cmp	r3, r0
 8002c04:	6011      	str	r1, [r2, #0]
 8002c06:	d1e0      	bne.n	8002bca <_free_r+0x22>
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4408      	add	r0, r1
 8002c0e:	6010      	str	r0, [r2, #0]
 8002c10:	6053      	str	r3, [r2, #4]
 8002c12:	e7da      	b.n	8002bca <_free_r+0x22>
 8002c14:	d902      	bls.n	8002c1c <_free_r+0x74>
 8002c16:	230c      	movs	r3, #12
 8002c18:	602b      	str	r3, [r5, #0]
 8002c1a:	e7d6      	b.n	8002bca <_free_r+0x22>
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	1821      	adds	r1, r4, r0
 8002c20:	428b      	cmp	r3, r1
 8002c22:	bf01      	itttt	eq
 8002c24:	6819      	ldreq	r1, [r3, #0]
 8002c26:	685b      	ldreq	r3, [r3, #4]
 8002c28:	1809      	addeq	r1, r1, r0
 8002c2a:	6021      	streq	r1, [r4, #0]
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	6054      	str	r4, [r2, #4]
 8002c30:	e7cb      	b.n	8002bca <_free_r+0x22>
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	20000244 	.word	0x20000244

08002c38 <sbrk_aligned>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	4e0e      	ldr	r6, [pc, #56]	; (8002c74 <sbrk_aligned+0x3c>)
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	6831      	ldr	r1, [r6, #0]
 8002c40:	4605      	mov	r5, r0
 8002c42:	b911      	cbnz	r1, 8002c4a <sbrk_aligned+0x12>
 8002c44:	f000 fca8 	bl	8003598 <_sbrk_r>
 8002c48:	6030      	str	r0, [r6, #0]
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 fca3 	bl	8003598 <_sbrk_r>
 8002c52:	1c43      	adds	r3, r0, #1
 8002c54:	d00a      	beq.n	8002c6c <sbrk_aligned+0x34>
 8002c56:	1cc4      	adds	r4, r0, #3
 8002c58:	f024 0403 	bic.w	r4, r4, #3
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d007      	beq.n	8002c70 <sbrk_aligned+0x38>
 8002c60:	1a21      	subs	r1, r4, r0
 8002c62:	4628      	mov	r0, r5
 8002c64:	f000 fc98 	bl	8003598 <_sbrk_r>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d101      	bne.n	8002c70 <sbrk_aligned+0x38>
 8002c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c70:	4620      	mov	r0, r4
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	20000248 	.word	0x20000248

08002c78 <_malloc_r>:
 8002c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c7c:	1ccd      	adds	r5, r1, #3
 8002c7e:	f025 0503 	bic.w	r5, r5, #3
 8002c82:	3508      	adds	r5, #8
 8002c84:	2d0c      	cmp	r5, #12
 8002c86:	bf38      	it	cc
 8002c88:	250c      	movcc	r5, #12
 8002c8a:	2d00      	cmp	r5, #0
 8002c8c:	4607      	mov	r7, r0
 8002c8e:	db01      	blt.n	8002c94 <_malloc_r+0x1c>
 8002c90:	42a9      	cmp	r1, r5
 8002c92:	d905      	bls.n	8002ca0 <_malloc_r+0x28>
 8002c94:	230c      	movs	r3, #12
 8002c96:	2600      	movs	r6, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d74 <_malloc_r+0xfc>
 8002ca4:	f000 f868 	bl	8002d78 <__malloc_lock>
 8002ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8002cac:	461c      	mov	r4, r3
 8002cae:	bb5c      	cbnz	r4, 8002d08 <_malloc_r+0x90>
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	f7ff ffc0 	bl	8002c38 <sbrk_aligned>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	4604      	mov	r4, r0
 8002cbc:	d155      	bne.n	8002d6a <_malloc_r+0xf2>
 8002cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8002cc2:	4626      	mov	r6, r4
 8002cc4:	2e00      	cmp	r6, #0
 8002cc6:	d145      	bne.n	8002d54 <_malloc_r+0xdc>
 8002cc8:	2c00      	cmp	r4, #0
 8002cca:	d048      	beq.n	8002d5e <_malloc_r+0xe6>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	4631      	mov	r1, r6
 8002cd0:	4638      	mov	r0, r7
 8002cd2:	eb04 0903 	add.w	r9, r4, r3
 8002cd6:	f000 fc5f 	bl	8003598 <_sbrk_r>
 8002cda:	4581      	cmp	r9, r0
 8002cdc:	d13f      	bne.n	8002d5e <_malloc_r+0xe6>
 8002cde:	6821      	ldr	r1, [r4, #0]
 8002ce0:	4638      	mov	r0, r7
 8002ce2:	1a6d      	subs	r5, r5, r1
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7ff ffa7 	bl	8002c38 <sbrk_aligned>
 8002cea:	3001      	adds	r0, #1
 8002cec:	d037      	beq.n	8002d5e <_malloc_r+0xe6>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	442b      	add	r3, r5
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d038      	beq.n	8002d6e <_malloc_r+0xf6>
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	42a2      	cmp	r2, r4
 8002d00:	d12b      	bne.n	8002d5a <_malloc_r+0xe2>
 8002d02:	2200      	movs	r2, #0
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	e00f      	b.n	8002d28 <_malloc_r+0xb0>
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	1b52      	subs	r2, r2, r5
 8002d0c:	d41f      	bmi.n	8002d4e <_malloc_r+0xd6>
 8002d0e:	2a0b      	cmp	r2, #11
 8002d10:	d917      	bls.n	8002d42 <_malloc_r+0xca>
 8002d12:	1961      	adds	r1, r4, r5
 8002d14:	42a3      	cmp	r3, r4
 8002d16:	6025      	str	r5, [r4, #0]
 8002d18:	bf18      	it	ne
 8002d1a:	6059      	strne	r1, [r3, #4]
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	bf08      	it	eq
 8002d20:	f8c8 1000 	streq.w	r1, [r8]
 8002d24:	5162      	str	r2, [r4, r5]
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	4638      	mov	r0, r7
 8002d2a:	f104 060b 	add.w	r6, r4, #11
 8002d2e:	f000 f829 	bl	8002d84 <__malloc_unlock>
 8002d32:	f026 0607 	bic.w	r6, r6, #7
 8002d36:	1d23      	adds	r3, r4, #4
 8002d38:	1af2      	subs	r2, r6, r3
 8002d3a:	d0ae      	beq.n	8002c9a <_malloc_r+0x22>
 8002d3c:	1b9b      	subs	r3, r3, r6
 8002d3e:	50a3      	str	r3, [r4, r2]
 8002d40:	e7ab      	b.n	8002c9a <_malloc_r+0x22>
 8002d42:	42a3      	cmp	r3, r4
 8002d44:	6862      	ldr	r2, [r4, #4]
 8002d46:	d1dd      	bne.n	8002d04 <_malloc_r+0x8c>
 8002d48:	f8c8 2000 	str.w	r2, [r8]
 8002d4c:	e7ec      	b.n	8002d28 <_malloc_r+0xb0>
 8002d4e:	4623      	mov	r3, r4
 8002d50:	6864      	ldr	r4, [r4, #4]
 8002d52:	e7ac      	b.n	8002cae <_malloc_r+0x36>
 8002d54:	4634      	mov	r4, r6
 8002d56:	6876      	ldr	r6, [r6, #4]
 8002d58:	e7b4      	b.n	8002cc4 <_malloc_r+0x4c>
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	e7cc      	b.n	8002cf8 <_malloc_r+0x80>
 8002d5e:	230c      	movs	r3, #12
 8002d60:	4638      	mov	r0, r7
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	f000 f80e 	bl	8002d84 <__malloc_unlock>
 8002d68:	e797      	b.n	8002c9a <_malloc_r+0x22>
 8002d6a:	6025      	str	r5, [r4, #0]
 8002d6c:	e7dc      	b.n	8002d28 <_malloc_r+0xb0>
 8002d6e:	605b      	str	r3, [r3, #4]
 8002d70:	deff      	udf	#255	; 0xff
 8002d72:	bf00      	nop
 8002d74:	20000244 	.word	0x20000244

08002d78 <__malloc_lock>:
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <__malloc_lock+0x8>)
 8002d7a:	f7ff bf13 	b.w	8002ba4 <__retarget_lock_acquire_recursive>
 8002d7e:	bf00      	nop
 8002d80:	20000240 	.word	0x20000240

08002d84 <__malloc_unlock>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__malloc_unlock+0x8>)
 8002d86:	f7ff bf0e 	b.w	8002ba6 <__retarget_lock_release_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	20000240 	.word	0x20000240

08002d90 <__sfputc_r>:
 8002d90:	6893      	ldr	r3, [r2, #8]
 8002d92:	b410      	push	{r4}
 8002d94:	3b01      	subs	r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	6093      	str	r3, [r2, #8]
 8002d9a:	da07      	bge.n	8002dac <__sfputc_r+0x1c>
 8002d9c:	6994      	ldr	r4, [r2, #24]
 8002d9e:	42a3      	cmp	r3, r4
 8002da0:	db01      	blt.n	8002da6 <__sfputc_r+0x16>
 8002da2:	290a      	cmp	r1, #10
 8002da4:	d102      	bne.n	8002dac <__sfputc_r+0x1c>
 8002da6:	bc10      	pop	{r4}
 8002da8:	f7ff bdef 	b.w	800298a <__swbuf_r>
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	1c58      	adds	r0, r3, #1
 8002db0:	6010      	str	r0, [r2, #0]
 8002db2:	7019      	strb	r1, [r3, #0]
 8002db4:	4608      	mov	r0, r1
 8002db6:	bc10      	pop	{r4}
 8002db8:	4770      	bx	lr

08002dba <__sfputs_r>:
 8002dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbc:	4606      	mov	r6, r0
 8002dbe:	460f      	mov	r7, r1
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	18d5      	adds	r5, r2, r3
 8002dc4:	42ac      	cmp	r4, r5
 8002dc6:	d101      	bne.n	8002dcc <__sfputs_r+0x12>
 8002dc8:	2000      	movs	r0, #0
 8002dca:	e007      	b.n	8002ddc <__sfputs_r+0x22>
 8002dcc:	463a      	mov	r2, r7
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd4:	f7ff ffdc 	bl	8002d90 <__sfputc_r>
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	d1f3      	bne.n	8002dc4 <__sfputs_r+0xa>
 8002ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002de0 <_vfiprintf_r>:
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	460d      	mov	r5, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	4698      	mov	r8, r3
 8002dea:	4606      	mov	r6, r0
 8002dec:	b09d      	sub	sp, #116	; 0x74
 8002dee:	b118      	cbz	r0, 8002df8 <_vfiprintf_r+0x18>
 8002df0:	6a03      	ldr	r3, [r0, #32]
 8002df2:	b90b      	cbnz	r3, 8002df8 <_vfiprintf_r+0x18>
 8002df4:	f7ff fce2 	bl	80027bc <__sinit>
 8002df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dfa:	07d9      	lsls	r1, r3, #31
 8002dfc:	d405      	bmi.n	8002e0a <_vfiprintf_r+0x2a>
 8002dfe:	89ab      	ldrh	r3, [r5, #12]
 8002e00:	059a      	lsls	r2, r3, #22
 8002e02:	d402      	bmi.n	8002e0a <_vfiprintf_r+0x2a>
 8002e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e06:	f7ff fecd 	bl	8002ba4 <__retarget_lock_acquire_recursive>
 8002e0a:	89ab      	ldrh	r3, [r5, #12]
 8002e0c:	071b      	lsls	r3, r3, #28
 8002e0e:	d501      	bpl.n	8002e14 <_vfiprintf_r+0x34>
 8002e10:	692b      	ldr	r3, [r5, #16]
 8002e12:	b99b      	cbnz	r3, 8002e3c <_vfiprintf_r+0x5c>
 8002e14:	4629      	mov	r1, r5
 8002e16:	4630      	mov	r0, r6
 8002e18:	f7ff fdf4 	bl	8002a04 <__swsetup_r>
 8002e1c:	b170      	cbz	r0, 8002e3c <_vfiprintf_r+0x5c>
 8002e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e20:	07dc      	lsls	r4, r3, #31
 8002e22:	d504      	bpl.n	8002e2e <_vfiprintf_r+0x4e>
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	b01d      	add	sp, #116	; 0x74
 8002e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2e:	89ab      	ldrh	r3, [r5, #12]
 8002e30:	0598      	lsls	r0, r3, #22
 8002e32:	d4f7      	bmi.n	8002e24 <_vfiprintf_r+0x44>
 8002e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e36:	f7ff feb6 	bl	8002ba6 <__retarget_lock_release_recursive>
 8002e3a:	e7f3      	b.n	8002e24 <_vfiprintf_r+0x44>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e40:	2320      	movs	r3, #32
 8002e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e46:	2330      	movs	r3, #48	; 0x30
 8002e48:	f04f 0901 	mov.w	r9, #1
 8002e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003000 <_vfiprintf_r+0x220>
 8002e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e58:	4623      	mov	r3, r4
 8002e5a:	469a      	mov	sl, r3
 8002e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e60:	b10a      	cbz	r2, 8002e66 <_vfiprintf_r+0x86>
 8002e62:	2a25      	cmp	r2, #37	; 0x25
 8002e64:	d1f9      	bne.n	8002e5a <_vfiprintf_r+0x7a>
 8002e66:	ebba 0b04 	subs.w	fp, sl, r4
 8002e6a:	d00b      	beq.n	8002e84 <_vfiprintf_r+0xa4>
 8002e6c:	465b      	mov	r3, fp
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	4630      	mov	r0, r6
 8002e74:	f7ff ffa1 	bl	8002dba <__sfputs_r>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	f000 80a9 	beq.w	8002fd0 <_vfiprintf_r+0x1f0>
 8002e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e80:	445a      	add	r2, fp
 8002e82:	9209      	str	r2, [sp, #36]	; 0x24
 8002e84:	f89a 3000 	ldrb.w	r3, [sl]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a1 	beq.w	8002fd0 <_vfiprintf_r+0x1f0>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e98:	f10a 0a01 	add.w	sl, sl, #1
 8002e9c:	9304      	str	r3, [sp, #16]
 8002e9e:	9307      	str	r3, [sp, #28]
 8002ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ea6:	4654      	mov	r4, sl
 8002ea8:	2205      	movs	r2, #5
 8002eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eae:	4854      	ldr	r0, [pc, #336]	; (8003000 <_vfiprintf_r+0x220>)
 8002eb0:	f000 fb82 	bl	80035b8 <memchr>
 8002eb4:	9a04      	ldr	r2, [sp, #16]
 8002eb6:	b9d8      	cbnz	r0, 8002ef0 <_vfiprintf_r+0x110>
 8002eb8:	06d1      	lsls	r1, r2, #27
 8002eba:	bf44      	itt	mi
 8002ebc:	2320      	movmi	r3, #32
 8002ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec2:	0713      	lsls	r3, r2, #28
 8002ec4:	bf44      	itt	mi
 8002ec6:	232b      	movmi	r3, #43	; 0x2b
 8002ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed2:	d015      	beq.n	8002f00 <_vfiprintf_r+0x120>
 8002ed4:	4654      	mov	r4, sl
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f04f 0c0a 	mov.w	ip, #10
 8002edc:	9a07      	ldr	r2, [sp, #28]
 8002ede:	4621      	mov	r1, r4
 8002ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ee4:	3b30      	subs	r3, #48	; 0x30
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	d94d      	bls.n	8002f86 <_vfiprintf_r+0x1a6>
 8002eea:	b1b0      	cbz	r0, 8002f1a <_vfiprintf_r+0x13a>
 8002eec:	9207      	str	r2, [sp, #28]
 8002eee:	e014      	b.n	8002f1a <_vfiprintf_r+0x13a>
 8002ef0:	eba0 0308 	sub.w	r3, r0, r8
 8002ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	46a2      	mov	sl, r4
 8002efc:	9304      	str	r3, [sp, #16]
 8002efe:	e7d2      	b.n	8002ea6 <_vfiprintf_r+0xc6>
 8002f00:	9b03      	ldr	r3, [sp, #12]
 8002f02:	1d19      	adds	r1, r3, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	9103      	str	r1, [sp, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bfbb      	ittet	lt
 8002f0c:	425b      	neglt	r3, r3
 8002f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8002f12:	9307      	strge	r3, [sp, #28]
 8002f14:	9307      	strlt	r3, [sp, #28]
 8002f16:	bfb8      	it	lt
 8002f18:	9204      	strlt	r2, [sp, #16]
 8002f1a:	7823      	ldrb	r3, [r4, #0]
 8002f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f1e:	d10c      	bne.n	8002f3a <_vfiprintf_r+0x15a>
 8002f20:	7863      	ldrb	r3, [r4, #1]
 8002f22:	2b2a      	cmp	r3, #42	; 0x2a
 8002f24:	d134      	bne.n	8002f90 <_vfiprintf_r+0x1b0>
 8002f26:	9b03      	ldr	r3, [sp, #12]
 8002f28:	3402      	adds	r4, #2
 8002f2a:	1d1a      	adds	r2, r3, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	9203      	str	r2, [sp, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bfb8      	it	lt
 8002f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f38:	9305      	str	r3, [sp, #20]
 8002f3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003004 <_vfiprintf_r+0x224>
 8002f3e:	2203      	movs	r2, #3
 8002f40:	4650      	mov	r0, sl
 8002f42:	7821      	ldrb	r1, [r4, #0]
 8002f44:	f000 fb38 	bl	80035b8 <memchr>
 8002f48:	b138      	cbz	r0, 8002f5a <_vfiprintf_r+0x17a>
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	9b04      	ldr	r3, [sp, #16]
 8002f4e:	eba0 000a 	sub.w	r0, r0, sl
 8002f52:	4082      	lsls	r2, r0
 8002f54:	4313      	orrs	r3, r2
 8002f56:	3401      	adds	r4, #1
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f5e:	2206      	movs	r2, #6
 8002f60:	4829      	ldr	r0, [pc, #164]	; (8003008 <_vfiprintf_r+0x228>)
 8002f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f66:	f000 fb27 	bl	80035b8 <memchr>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d03f      	beq.n	8002fee <_vfiprintf_r+0x20e>
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <_vfiprintf_r+0x22c>)
 8002f70:	bb1b      	cbnz	r3, 8002fba <_vfiprintf_r+0x1da>
 8002f72:	9b03      	ldr	r3, [sp, #12]
 8002f74:	3307      	adds	r3, #7
 8002f76:	f023 0307 	bic.w	r3, r3, #7
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f80:	443b      	add	r3, r7
 8002f82:	9309      	str	r3, [sp, #36]	; 0x24
 8002f84:	e768      	b.n	8002e58 <_vfiprintf_r+0x78>
 8002f86:	460c      	mov	r4, r1
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f8e:	e7a6      	b.n	8002ede <_vfiprintf_r+0xfe>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f04f 0c0a 	mov.w	ip, #10
 8002f96:	4619      	mov	r1, r3
 8002f98:	3401      	adds	r4, #1
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa2:	3a30      	subs	r2, #48	; 0x30
 8002fa4:	2a09      	cmp	r2, #9
 8002fa6:	d903      	bls.n	8002fb0 <_vfiprintf_r+0x1d0>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0c6      	beq.n	8002f3a <_vfiprintf_r+0x15a>
 8002fac:	9105      	str	r1, [sp, #20]
 8002fae:	e7c4      	b.n	8002f3a <_vfiprintf_r+0x15a>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fb8:	e7f0      	b.n	8002f9c <_vfiprintf_r+0x1bc>
 8002fba:	ab03      	add	r3, sp, #12
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <_vfiprintf_r+0x230>)
 8002fc4:	a904      	add	r1, sp, #16
 8002fc6:	f3af 8000 	nop.w
 8002fca:	4607      	mov	r7, r0
 8002fcc:	1c78      	adds	r0, r7, #1
 8002fce:	d1d6      	bne.n	8002f7e <_vfiprintf_r+0x19e>
 8002fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fd2:	07d9      	lsls	r1, r3, #31
 8002fd4:	d405      	bmi.n	8002fe2 <_vfiprintf_r+0x202>
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	059a      	lsls	r2, r3, #22
 8002fda:	d402      	bmi.n	8002fe2 <_vfiprintf_r+0x202>
 8002fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fde:	f7ff fde2 	bl	8002ba6 <__retarget_lock_release_recursive>
 8002fe2:	89ab      	ldrh	r3, [r5, #12]
 8002fe4:	065b      	lsls	r3, r3, #25
 8002fe6:	f53f af1d 	bmi.w	8002e24 <_vfiprintf_r+0x44>
 8002fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fec:	e71c      	b.n	8002e28 <_vfiprintf_r+0x48>
 8002fee:	ab03      	add	r3, sp, #12
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <_vfiprintf_r+0x230>)
 8002ff8:	a904      	add	r1, sp, #16
 8002ffa:	f000 f87d 	bl	80030f8 <_printf_i>
 8002ffe:	e7e4      	b.n	8002fca <_vfiprintf_r+0x1ea>
 8003000:	0800365a 	.word	0x0800365a
 8003004:	08003660 	.word	0x08003660
 8003008:	08003664 	.word	0x08003664
 800300c:	00000000 	.word	0x00000000
 8003010:	08002dbb 	.word	0x08002dbb

08003014 <_printf_common>:
 8003014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003018:	4616      	mov	r6, r2
 800301a:	4699      	mov	r9, r3
 800301c:	688a      	ldr	r2, [r1, #8]
 800301e:	690b      	ldr	r3, [r1, #16]
 8003020:	4607      	mov	r7, r0
 8003022:	4293      	cmp	r3, r2
 8003024:	bfb8      	it	lt
 8003026:	4613      	movlt	r3, r2
 8003028:	6033      	str	r3, [r6, #0]
 800302a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800302e:	460c      	mov	r4, r1
 8003030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003034:	b10a      	cbz	r2, 800303a <_printf_common+0x26>
 8003036:	3301      	adds	r3, #1
 8003038:	6033      	str	r3, [r6, #0]
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	0699      	lsls	r1, r3, #26
 800303e:	bf42      	ittt	mi
 8003040:	6833      	ldrmi	r3, [r6, #0]
 8003042:	3302      	addmi	r3, #2
 8003044:	6033      	strmi	r3, [r6, #0]
 8003046:	6825      	ldr	r5, [r4, #0]
 8003048:	f015 0506 	ands.w	r5, r5, #6
 800304c:	d106      	bne.n	800305c <_printf_common+0x48>
 800304e:	f104 0a19 	add.w	sl, r4, #25
 8003052:	68e3      	ldr	r3, [r4, #12]
 8003054:	6832      	ldr	r2, [r6, #0]
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	42ab      	cmp	r3, r5
 800305a:	dc2b      	bgt.n	80030b4 <_printf_common+0xa0>
 800305c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003060:	1e13      	subs	r3, r2, #0
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	bf18      	it	ne
 8003066:	2301      	movne	r3, #1
 8003068:	0692      	lsls	r2, r2, #26
 800306a:	d430      	bmi.n	80030ce <_printf_common+0xba>
 800306c:	4649      	mov	r1, r9
 800306e:	4638      	mov	r0, r7
 8003070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003074:	47c0      	blx	r8
 8003076:	3001      	adds	r0, #1
 8003078:	d023      	beq.n	80030c2 <_printf_common+0xae>
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	6922      	ldr	r2, [r4, #16]
 800307e:	f003 0306 	and.w	r3, r3, #6
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf14      	ite	ne
 8003086:	2500      	movne	r5, #0
 8003088:	6833      	ldreq	r3, [r6, #0]
 800308a:	f04f 0600 	mov.w	r6, #0
 800308e:	bf08      	it	eq
 8003090:	68e5      	ldreq	r5, [r4, #12]
 8003092:	f104 041a 	add.w	r4, r4, #26
 8003096:	bf08      	it	eq
 8003098:	1aed      	subeq	r5, r5, r3
 800309a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800309e:	bf08      	it	eq
 80030a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bfc4      	itt	gt
 80030a8:	1a9b      	subgt	r3, r3, r2
 80030aa:	18ed      	addgt	r5, r5, r3
 80030ac:	42b5      	cmp	r5, r6
 80030ae:	d11a      	bne.n	80030e6 <_printf_common+0xd2>
 80030b0:	2000      	movs	r0, #0
 80030b2:	e008      	b.n	80030c6 <_printf_common+0xb2>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4652      	mov	r2, sl
 80030b8:	4649      	mov	r1, r9
 80030ba:	4638      	mov	r0, r7
 80030bc:	47c0      	blx	r8
 80030be:	3001      	adds	r0, #1
 80030c0:	d103      	bne.n	80030ca <_printf_common+0xb6>
 80030c2:	f04f 30ff 	mov.w	r0, #4294967295
 80030c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ca:	3501      	adds	r5, #1
 80030cc:	e7c1      	b.n	8003052 <_printf_common+0x3e>
 80030ce:	2030      	movs	r0, #48	; 0x30
 80030d0:	18e1      	adds	r1, r4, r3
 80030d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030dc:	4422      	add	r2, r4
 80030de:	3302      	adds	r3, #2
 80030e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030e4:	e7c2      	b.n	800306c <_printf_common+0x58>
 80030e6:	2301      	movs	r3, #1
 80030e8:	4622      	mov	r2, r4
 80030ea:	4649      	mov	r1, r9
 80030ec:	4638      	mov	r0, r7
 80030ee:	47c0      	blx	r8
 80030f0:	3001      	adds	r0, #1
 80030f2:	d0e6      	beq.n	80030c2 <_printf_common+0xae>
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7d9      	b.n	80030ac <_printf_common+0x98>

080030f8 <_printf_i>:
 80030f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030fc:	7e0f      	ldrb	r7, [r1, #24]
 80030fe:	4691      	mov	r9, r2
 8003100:	2f78      	cmp	r7, #120	; 0x78
 8003102:	4680      	mov	r8, r0
 8003104:	460c      	mov	r4, r1
 8003106:	469a      	mov	sl, r3
 8003108:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800310a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800310e:	d807      	bhi.n	8003120 <_printf_i+0x28>
 8003110:	2f62      	cmp	r7, #98	; 0x62
 8003112:	d80a      	bhi.n	800312a <_printf_i+0x32>
 8003114:	2f00      	cmp	r7, #0
 8003116:	f000 80d5 	beq.w	80032c4 <_printf_i+0x1cc>
 800311a:	2f58      	cmp	r7, #88	; 0x58
 800311c:	f000 80c1 	beq.w	80032a2 <_printf_i+0x1aa>
 8003120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003128:	e03a      	b.n	80031a0 <_printf_i+0xa8>
 800312a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800312e:	2b15      	cmp	r3, #21
 8003130:	d8f6      	bhi.n	8003120 <_printf_i+0x28>
 8003132:	a101      	add	r1, pc, #4	; (adr r1, 8003138 <_printf_i+0x40>)
 8003134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003138:	08003191 	.word	0x08003191
 800313c:	080031a5 	.word	0x080031a5
 8003140:	08003121 	.word	0x08003121
 8003144:	08003121 	.word	0x08003121
 8003148:	08003121 	.word	0x08003121
 800314c:	08003121 	.word	0x08003121
 8003150:	080031a5 	.word	0x080031a5
 8003154:	08003121 	.word	0x08003121
 8003158:	08003121 	.word	0x08003121
 800315c:	08003121 	.word	0x08003121
 8003160:	08003121 	.word	0x08003121
 8003164:	080032ab 	.word	0x080032ab
 8003168:	080031d1 	.word	0x080031d1
 800316c:	08003265 	.word	0x08003265
 8003170:	08003121 	.word	0x08003121
 8003174:	08003121 	.word	0x08003121
 8003178:	080032cd 	.word	0x080032cd
 800317c:	08003121 	.word	0x08003121
 8003180:	080031d1 	.word	0x080031d1
 8003184:	08003121 	.word	0x08003121
 8003188:	08003121 	.word	0x08003121
 800318c:	0800326d 	.word	0x0800326d
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	1d1a      	adds	r2, r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	602a      	str	r2, [r5, #0]
 8003198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0a0      	b.n	80032e6 <_printf_i+0x1ee>
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	682b      	ldr	r3, [r5, #0]
 80031a8:	0607      	lsls	r7, r0, #24
 80031aa:	f103 0104 	add.w	r1, r3, #4
 80031ae:	6029      	str	r1, [r5, #0]
 80031b0:	d501      	bpl.n	80031b6 <_printf_i+0xbe>
 80031b2:	681e      	ldr	r6, [r3, #0]
 80031b4:	e003      	b.n	80031be <_printf_i+0xc6>
 80031b6:	0646      	lsls	r6, r0, #25
 80031b8:	d5fb      	bpl.n	80031b2 <_printf_i+0xba>
 80031ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80031be:	2e00      	cmp	r6, #0
 80031c0:	da03      	bge.n	80031ca <_printf_i+0xd2>
 80031c2:	232d      	movs	r3, #45	; 0x2d
 80031c4:	4276      	negs	r6, r6
 80031c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ca:	230a      	movs	r3, #10
 80031cc:	4859      	ldr	r0, [pc, #356]	; (8003334 <_printf_i+0x23c>)
 80031ce:	e012      	b.n	80031f6 <_printf_i+0xfe>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	1d19      	adds	r1, r3, #4
 80031d6:	6029      	str	r1, [r5, #0]
 80031d8:	0605      	lsls	r5, r0, #24
 80031da:	d501      	bpl.n	80031e0 <_printf_i+0xe8>
 80031dc:	681e      	ldr	r6, [r3, #0]
 80031de:	e002      	b.n	80031e6 <_printf_i+0xee>
 80031e0:	0641      	lsls	r1, r0, #25
 80031e2:	d5fb      	bpl.n	80031dc <_printf_i+0xe4>
 80031e4:	881e      	ldrh	r6, [r3, #0]
 80031e6:	2f6f      	cmp	r7, #111	; 0x6f
 80031e8:	bf0c      	ite	eq
 80031ea:	2308      	moveq	r3, #8
 80031ec:	230a      	movne	r3, #10
 80031ee:	4851      	ldr	r0, [pc, #324]	; (8003334 <_printf_i+0x23c>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031f6:	6865      	ldr	r5, [r4, #4]
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	bfa8      	it	ge
 80031fc:	6821      	ldrge	r1, [r4, #0]
 80031fe:	60a5      	str	r5, [r4, #8]
 8003200:	bfa4      	itt	ge
 8003202:	f021 0104 	bicge.w	r1, r1, #4
 8003206:	6021      	strge	r1, [r4, #0]
 8003208:	b90e      	cbnz	r6, 800320e <_printf_i+0x116>
 800320a:	2d00      	cmp	r5, #0
 800320c:	d04b      	beq.n	80032a6 <_printf_i+0x1ae>
 800320e:	4615      	mov	r5, r2
 8003210:	fbb6 f1f3 	udiv	r1, r6, r3
 8003214:	fb03 6711 	mls	r7, r3, r1, r6
 8003218:	5dc7      	ldrb	r7, [r0, r7]
 800321a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800321e:	4637      	mov	r7, r6
 8003220:	42bb      	cmp	r3, r7
 8003222:	460e      	mov	r6, r1
 8003224:	d9f4      	bls.n	8003210 <_printf_i+0x118>
 8003226:	2b08      	cmp	r3, #8
 8003228:	d10b      	bne.n	8003242 <_printf_i+0x14a>
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	07de      	lsls	r6, r3, #31
 800322e:	d508      	bpl.n	8003242 <_printf_i+0x14a>
 8003230:	6923      	ldr	r3, [r4, #16]
 8003232:	6861      	ldr	r1, [r4, #4]
 8003234:	4299      	cmp	r1, r3
 8003236:	bfde      	ittt	le
 8003238:	2330      	movle	r3, #48	; 0x30
 800323a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800323e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003242:	1b52      	subs	r2, r2, r5
 8003244:	6122      	str	r2, [r4, #16]
 8003246:	464b      	mov	r3, r9
 8003248:	4621      	mov	r1, r4
 800324a:	4640      	mov	r0, r8
 800324c:	f8cd a000 	str.w	sl, [sp]
 8003250:	aa03      	add	r2, sp, #12
 8003252:	f7ff fedf 	bl	8003014 <_printf_common>
 8003256:	3001      	adds	r0, #1
 8003258:	d14a      	bne.n	80032f0 <_printf_i+0x1f8>
 800325a:	f04f 30ff 	mov.w	r0, #4294967295
 800325e:	b004      	add	sp, #16
 8003260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	f043 0320 	orr.w	r3, r3, #32
 800326a:	6023      	str	r3, [r4, #0]
 800326c:	2778      	movs	r7, #120	; 0x78
 800326e:	4832      	ldr	r0, [pc, #200]	; (8003338 <_printf_i+0x240>)
 8003270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	6829      	ldr	r1, [r5, #0]
 8003278:	061f      	lsls	r7, r3, #24
 800327a:	f851 6b04 	ldr.w	r6, [r1], #4
 800327e:	d402      	bmi.n	8003286 <_printf_i+0x18e>
 8003280:	065f      	lsls	r7, r3, #25
 8003282:	bf48      	it	mi
 8003284:	b2b6      	uxthmi	r6, r6
 8003286:	07df      	lsls	r7, r3, #31
 8003288:	bf48      	it	mi
 800328a:	f043 0320 	orrmi.w	r3, r3, #32
 800328e:	6029      	str	r1, [r5, #0]
 8003290:	bf48      	it	mi
 8003292:	6023      	strmi	r3, [r4, #0]
 8003294:	b91e      	cbnz	r6, 800329e <_printf_i+0x1a6>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	f023 0320 	bic.w	r3, r3, #32
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	2310      	movs	r3, #16
 80032a0:	e7a6      	b.n	80031f0 <_printf_i+0xf8>
 80032a2:	4824      	ldr	r0, [pc, #144]	; (8003334 <_printf_i+0x23c>)
 80032a4:	e7e4      	b.n	8003270 <_printf_i+0x178>
 80032a6:	4615      	mov	r5, r2
 80032a8:	e7bd      	b.n	8003226 <_printf_i+0x12e>
 80032aa:	682b      	ldr	r3, [r5, #0]
 80032ac:	6826      	ldr	r6, [r4, #0]
 80032ae:	1d18      	adds	r0, r3, #4
 80032b0:	6961      	ldr	r1, [r4, #20]
 80032b2:	6028      	str	r0, [r5, #0]
 80032b4:	0635      	lsls	r5, r6, #24
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	d501      	bpl.n	80032be <_printf_i+0x1c6>
 80032ba:	6019      	str	r1, [r3, #0]
 80032bc:	e002      	b.n	80032c4 <_printf_i+0x1cc>
 80032be:	0670      	lsls	r0, r6, #25
 80032c0:	d5fb      	bpl.n	80032ba <_printf_i+0x1c2>
 80032c2:	8019      	strh	r1, [r3, #0]
 80032c4:	2300      	movs	r3, #0
 80032c6:	4615      	mov	r5, r2
 80032c8:	6123      	str	r3, [r4, #16]
 80032ca:	e7bc      	b.n	8003246 <_printf_i+0x14e>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	2100      	movs	r1, #0
 80032d0:	1d1a      	adds	r2, r3, #4
 80032d2:	602a      	str	r2, [r5, #0]
 80032d4:	681d      	ldr	r5, [r3, #0]
 80032d6:	6862      	ldr	r2, [r4, #4]
 80032d8:	4628      	mov	r0, r5
 80032da:	f000 f96d 	bl	80035b8 <memchr>
 80032de:	b108      	cbz	r0, 80032e4 <_printf_i+0x1ec>
 80032e0:	1b40      	subs	r0, r0, r5
 80032e2:	6060      	str	r0, [r4, #4]
 80032e4:	6863      	ldr	r3, [r4, #4]
 80032e6:	6123      	str	r3, [r4, #16]
 80032e8:	2300      	movs	r3, #0
 80032ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ee:	e7aa      	b.n	8003246 <_printf_i+0x14e>
 80032f0:	462a      	mov	r2, r5
 80032f2:	4649      	mov	r1, r9
 80032f4:	4640      	mov	r0, r8
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	47d0      	blx	sl
 80032fa:	3001      	adds	r0, #1
 80032fc:	d0ad      	beq.n	800325a <_printf_i+0x162>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	079b      	lsls	r3, r3, #30
 8003302:	d413      	bmi.n	800332c <_printf_i+0x234>
 8003304:	68e0      	ldr	r0, [r4, #12]
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	4298      	cmp	r0, r3
 800330a:	bfb8      	it	lt
 800330c:	4618      	movlt	r0, r3
 800330e:	e7a6      	b.n	800325e <_printf_i+0x166>
 8003310:	2301      	movs	r3, #1
 8003312:	4632      	mov	r2, r6
 8003314:	4649      	mov	r1, r9
 8003316:	4640      	mov	r0, r8
 8003318:	47d0      	blx	sl
 800331a:	3001      	adds	r0, #1
 800331c:	d09d      	beq.n	800325a <_printf_i+0x162>
 800331e:	3501      	adds	r5, #1
 8003320:	68e3      	ldr	r3, [r4, #12]
 8003322:	9903      	ldr	r1, [sp, #12]
 8003324:	1a5b      	subs	r3, r3, r1
 8003326:	42ab      	cmp	r3, r5
 8003328:	dcf2      	bgt.n	8003310 <_printf_i+0x218>
 800332a:	e7eb      	b.n	8003304 <_printf_i+0x20c>
 800332c:	2500      	movs	r5, #0
 800332e:	f104 0619 	add.w	r6, r4, #25
 8003332:	e7f5      	b.n	8003320 <_printf_i+0x228>
 8003334:	0800366b 	.word	0x0800366b
 8003338:	0800367c 	.word	0x0800367c

0800333c <__sflush_r>:
 800333c:	898a      	ldrh	r2, [r1, #12]
 800333e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003340:	4605      	mov	r5, r0
 8003342:	0710      	lsls	r0, r2, #28
 8003344:	460c      	mov	r4, r1
 8003346:	d457      	bmi.n	80033f8 <__sflush_r+0xbc>
 8003348:	684b      	ldr	r3, [r1, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	dc04      	bgt.n	8003358 <__sflush_r+0x1c>
 800334e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	dc01      	bgt.n	8003358 <__sflush_r+0x1c>
 8003354:	2000      	movs	r0, #0
 8003356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800335a:	2e00      	cmp	r6, #0
 800335c:	d0fa      	beq.n	8003354 <__sflush_r+0x18>
 800335e:	2300      	movs	r3, #0
 8003360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003364:	682f      	ldr	r7, [r5, #0]
 8003366:	6a21      	ldr	r1, [r4, #32]
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	d032      	beq.n	80033d2 <__sflush_r+0x96>
 800336c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	075a      	lsls	r2, r3, #29
 8003372:	d505      	bpl.n	8003380 <__sflush_r+0x44>
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	1ac0      	subs	r0, r0, r3
 8003378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800337a:	b10b      	cbz	r3, 8003380 <__sflush_r+0x44>
 800337c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800337e:	1ac0      	subs	r0, r0, r3
 8003380:	2300      	movs	r3, #0
 8003382:	4602      	mov	r2, r0
 8003384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003386:	4628      	mov	r0, r5
 8003388:	6a21      	ldr	r1, [r4, #32]
 800338a:	47b0      	blx	r6
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	d106      	bne.n	80033a0 <__sflush_r+0x64>
 8003392:	6829      	ldr	r1, [r5, #0]
 8003394:	291d      	cmp	r1, #29
 8003396:	d82b      	bhi.n	80033f0 <__sflush_r+0xb4>
 8003398:	4a28      	ldr	r2, [pc, #160]	; (800343c <__sflush_r+0x100>)
 800339a:	410a      	asrs	r2, r1
 800339c:	07d6      	lsls	r6, r2, #31
 800339e:	d427      	bmi.n	80033f0 <__sflush_r+0xb4>
 80033a0:	2200      	movs	r2, #0
 80033a2:	6062      	str	r2, [r4, #4]
 80033a4:	6922      	ldr	r2, [r4, #16]
 80033a6:	04d9      	lsls	r1, r3, #19
 80033a8:	6022      	str	r2, [r4, #0]
 80033aa:	d504      	bpl.n	80033b6 <__sflush_r+0x7a>
 80033ac:	1c42      	adds	r2, r0, #1
 80033ae:	d101      	bne.n	80033b4 <__sflush_r+0x78>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	b903      	cbnz	r3, 80033b6 <__sflush_r+0x7a>
 80033b4:	6560      	str	r0, [r4, #84]	; 0x54
 80033b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033b8:	602f      	str	r7, [r5, #0]
 80033ba:	2900      	cmp	r1, #0
 80033bc:	d0ca      	beq.n	8003354 <__sflush_r+0x18>
 80033be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033c2:	4299      	cmp	r1, r3
 80033c4:	d002      	beq.n	80033cc <__sflush_r+0x90>
 80033c6:	4628      	mov	r0, r5
 80033c8:	f7ff fbee 	bl	8002ba8 <_free_r>
 80033cc:	2000      	movs	r0, #0
 80033ce:	6360      	str	r0, [r4, #52]	; 0x34
 80033d0:	e7c1      	b.n	8003356 <__sflush_r+0x1a>
 80033d2:	2301      	movs	r3, #1
 80033d4:	4628      	mov	r0, r5
 80033d6:	47b0      	blx	r6
 80033d8:	1c41      	adds	r1, r0, #1
 80033da:	d1c8      	bne.n	800336e <__sflush_r+0x32>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c5      	beq.n	800336e <__sflush_r+0x32>
 80033e2:	2b1d      	cmp	r3, #29
 80033e4:	d001      	beq.n	80033ea <__sflush_r+0xae>
 80033e6:	2b16      	cmp	r3, #22
 80033e8:	d101      	bne.n	80033ee <__sflush_r+0xb2>
 80033ea:	602f      	str	r7, [r5, #0]
 80033ec:	e7b2      	b.n	8003354 <__sflush_r+0x18>
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	e7ae      	b.n	8003356 <__sflush_r+0x1a>
 80033f8:	690f      	ldr	r7, [r1, #16]
 80033fa:	2f00      	cmp	r7, #0
 80033fc:	d0aa      	beq.n	8003354 <__sflush_r+0x18>
 80033fe:	0793      	lsls	r3, r2, #30
 8003400:	bf18      	it	ne
 8003402:	2300      	movne	r3, #0
 8003404:	680e      	ldr	r6, [r1, #0]
 8003406:	bf08      	it	eq
 8003408:	694b      	ldreq	r3, [r1, #20]
 800340a:	1bf6      	subs	r6, r6, r7
 800340c:	600f      	str	r7, [r1, #0]
 800340e:	608b      	str	r3, [r1, #8]
 8003410:	2e00      	cmp	r6, #0
 8003412:	dd9f      	ble.n	8003354 <__sflush_r+0x18>
 8003414:	4633      	mov	r3, r6
 8003416:	463a      	mov	r2, r7
 8003418:	4628      	mov	r0, r5
 800341a:	6a21      	ldr	r1, [r4, #32]
 800341c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003420:	47e0      	blx	ip
 8003422:	2800      	cmp	r0, #0
 8003424:	dc06      	bgt.n	8003434 <__sflush_r+0xf8>
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003430:	81a3      	strh	r3, [r4, #12]
 8003432:	e790      	b.n	8003356 <__sflush_r+0x1a>
 8003434:	4407      	add	r7, r0
 8003436:	1a36      	subs	r6, r6, r0
 8003438:	e7ea      	b.n	8003410 <__sflush_r+0xd4>
 800343a:	bf00      	nop
 800343c:	dfbffffe 	.word	0xdfbffffe

08003440 <_fflush_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	4605      	mov	r5, r0
 8003446:	460c      	mov	r4, r1
 8003448:	b913      	cbnz	r3, 8003450 <_fflush_r+0x10>
 800344a:	2500      	movs	r5, #0
 800344c:	4628      	mov	r0, r5
 800344e:	bd38      	pop	{r3, r4, r5, pc}
 8003450:	b118      	cbz	r0, 800345a <_fflush_r+0x1a>
 8003452:	6a03      	ldr	r3, [r0, #32]
 8003454:	b90b      	cbnz	r3, 800345a <_fflush_r+0x1a>
 8003456:	f7ff f9b1 	bl	80027bc <__sinit>
 800345a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f3      	beq.n	800344a <_fflush_r+0xa>
 8003462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003464:	07d0      	lsls	r0, r2, #31
 8003466:	d404      	bmi.n	8003472 <_fflush_r+0x32>
 8003468:	0599      	lsls	r1, r3, #22
 800346a:	d402      	bmi.n	8003472 <_fflush_r+0x32>
 800346c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346e:	f7ff fb99 	bl	8002ba4 <__retarget_lock_acquire_recursive>
 8003472:	4628      	mov	r0, r5
 8003474:	4621      	mov	r1, r4
 8003476:	f7ff ff61 	bl	800333c <__sflush_r>
 800347a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800347c:	4605      	mov	r5, r0
 800347e:	07da      	lsls	r2, r3, #31
 8003480:	d4e4      	bmi.n	800344c <_fflush_r+0xc>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	d4e1      	bmi.n	800344c <_fflush_r+0xc>
 8003488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348a:	f7ff fb8c 	bl	8002ba6 <__retarget_lock_release_recursive>
 800348e:	e7dd      	b.n	800344c <_fflush_r+0xc>

08003490 <__swhatbuf_r>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	460c      	mov	r4, r1
 8003494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003498:	4615      	mov	r5, r2
 800349a:	2900      	cmp	r1, #0
 800349c:	461e      	mov	r6, r3
 800349e:	b096      	sub	sp, #88	; 0x58
 80034a0:	da0c      	bge.n	80034bc <__swhatbuf_r+0x2c>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	2100      	movs	r1, #0
 80034a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034aa:	bf0c      	ite	eq
 80034ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80034b0:	2340      	movne	r3, #64	; 0x40
 80034b2:	2000      	movs	r0, #0
 80034b4:	6031      	str	r1, [r6, #0]
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	b016      	add	sp, #88	; 0x58
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
 80034bc:	466a      	mov	r2, sp
 80034be:	f000 f849 	bl	8003554 <_fstat_r>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	dbed      	blt.n	80034a2 <__swhatbuf_r+0x12>
 80034c6:	9901      	ldr	r1, [sp, #4]
 80034c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80034cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80034d0:	4259      	negs	r1, r3
 80034d2:	4159      	adcs	r1, r3
 80034d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d8:	e7eb      	b.n	80034b2 <__swhatbuf_r+0x22>

080034da <__smakebuf_r>:
 80034da:	898b      	ldrh	r3, [r1, #12]
 80034dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034de:	079d      	lsls	r5, r3, #30
 80034e0:	4606      	mov	r6, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	d507      	bpl.n	80034f6 <__smakebuf_r+0x1c>
 80034e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	2301      	movs	r3, #1
 80034f0:	6163      	str	r3, [r4, #20]
 80034f2:	b002      	add	sp, #8
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	466a      	mov	r2, sp
 80034f8:	ab01      	add	r3, sp, #4
 80034fa:	f7ff ffc9 	bl	8003490 <__swhatbuf_r>
 80034fe:	9900      	ldr	r1, [sp, #0]
 8003500:	4605      	mov	r5, r0
 8003502:	4630      	mov	r0, r6
 8003504:	f7ff fbb8 	bl	8002c78 <_malloc_r>
 8003508:	b948      	cbnz	r0, 800351e <__smakebuf_r+0x44>
 800350a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800350e:	059a      	lsls	r2, r3, #22
 8003510:	d4ef      	bmi.n	80034f2 <__smakebuf_r+0x18>
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	81a3      	strh	r3, [r4, #12]
 800351c:	e7e3      	b.n	80034e6 <__smakebuf_r+0xc>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	6020      	str	r0, [r4, #0]
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	9b00      	ldr	r3, [sp, #0]
 800352a:	6120      	str	r0, [r4, #16]
 800352c:	6163      	str	r3, [r4, #20]
 800352e:	9b01      	ldr	r3, [sp, #4]
 8003530:	b15b      	cbz	r3, 800354a <__smakebuf_r+0x70>
 8003532:	4630      	mov	r0, r6
 8003534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003538:	f000 f81e 	bl	8003578 <_isatty_r>
 800353c:	b128      	cbz	r0, 800354a <__smakebuf_r+0x70>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	f023 0303 	bic.w	r3, r3, #3
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	81a3      	strh	r3, [r4, #12]
 800354a:	89a3      	ldrh	r3, [r4, #12]
 800354c:	431d      	orrs	r5, r3
 800354e:	81a5      	strh	r5, [r4, #12]
 8003550:	e7cf      	b.n	80034f2 <__smakebuf_r+0x18>
	...

08003554 <_fstat_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	2300      	movs	r3, #0
 8003558:	4d06      	ldr	r5, [pc, #24]	; (8003574 <_fstat_r+0x20>)
 800355a:	4604      	mov	r4, r0
 800355c:	4608      	mov	r0, r1
 800355e:	4611      	mov	r1, r2
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	f7fd f8e3 	bl	800072c <_fstat>
 8003566:	1c43      	adds	r3, r0, #1
 8003568:	d102      	bne.n	8003570 <_fstat_r+0x1c>
 800356a:	682b      	ldr	r3, [r5, #0]
 800356c:	b103      	cbz	r3, 8003570 <_fstat_r+0x1c>
 800356e:	6023      	str	r3, [r4, #0]
 8003570:	bd38      	pop	{r3, r4, r5, pc}
 8003572:	bf00      	nop
 8003574:	2000023c 	.word	0x2000023c

08003578 <_isatty_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	2300      	movs	r3, #0
 800357c:	4d05      	ldr	r5, [pc, #20]	; (8003594 <_isatty_r+0x1c>)
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	f7fd f8e1 	bl	800074a <_isatty>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d102      	bne.n	8003592 <_isatty_r+0x1a>
 800358c:	682b      	ldr	r3, [r5, #0]
 800358e:	b103      	cbz	r3, 8003592 <_isatty_r+0x1a>
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	2000023c 	.word	0x2000023c

08003598 <_sbrk_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	2300      	movs	r3, #0
 800359c:	4d05      	ldr	r5, [pc, #20]	; (80035b4 <_sbrk_r+0x1c>)
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	f7fd f8e8 	bl	8000778 <_sbrk>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_sbrk_r+0x1a>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_sbrk_r+0x1a>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	2000023c 	.word	0x2000023c

080035b8 <memchr>:
 80035b8:	4603      	mov	r3, r0
 80035ba:	b510      	push	{r4, lr}
 80035bc:	b2c9      	uxtb	r1, r1
 80035be:	4402      	add	r2, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	d101      	bne.n	80035ca <memchr+0x12>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e003      	b.n	80035d2 <memchr+0x1a>
 80035ca:	7804      	ldrb	r4, [r0, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	428c      	cmp	r4, r1
 80035d0:	d1f6      	bne.n	80035c0 <memchr+0x8>
 80035d2:	bd10      	pop	{r4, pc}

080035d4 <_init>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr

080035e0 <_fini>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr
